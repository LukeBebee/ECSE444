
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f0  080067f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f8  080067f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  2000007c  0800687c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  0800687c  00020a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e1c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcc  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca0b  00000000  00000000  0003e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164e5  00000000  00000000  0006aa53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111781  00000000  00000000  00080f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001926b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005378  00000000  00000000  00192780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00197af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000007c 	.word	0x2000007c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005ec0 	.word	0x08005ec0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000080 	.word	0x20000080
 80001f8:	08005ec0 	.word	0x08005ec0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f960 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f004 fd17 	bl	8004f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d023      	beq.n	800058c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_InitTick+0x70>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96d 	bl	800083a <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10f      	bne.n	8000586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 f937 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_InitTick+0x74>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e007      	b.n	8000590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e004      	b.n	8000590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000014 	.word	0x20000014
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000098 	.word	0x20000098

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000098 	.word	0x20000098

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e014      	b.n	800088e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f004 fb91 	bl	8004f9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_DAC_Start_DMA+0x1e>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e0ab      	b.n	8000a0e <HAL_DAC_Start_DMA+0x176>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_DAC_Start_DMA+0x180>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_DAC_Start_DMA+0x184>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <HAL_DAC_Start_DMA+0x188>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0x86>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d845      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf0>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0x72>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000908:	e03e      	b.n	8000988 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e03c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330c      	adds	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e037      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3310      	adds	r3, #16
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e032      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <HAL_DAC_Start_DMA+0x18c>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_DAC_Start_DMA+0x190>)
 8000936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <HAL_DAC_Start_DMA+0x194>)
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d013      	beq.n	800097e <HAL_DAC_Start_DMA+0xe6>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d817      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf4>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_DAC_Start_DMA+0xd2>
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000968:	e010      	b.n	800098c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3314      	adds	r3, #20
 8000970:	613b      	str	r3, [r7, #16]
        break;
 8000972:	e00c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3318      	adds	r3, #24
 800097a:	613b      	str	r3, [r7, #16]
        break;
 800097c:	e007      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	331c      	adds	r3, #28
 8000984:	613b      	str	r3, [r7, #16]
        break;
 8000986:	e002      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	f000 fbd9 	bl	8001164 <HAL_DMA_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e010      	b.n	80009da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	f000 fbc7 	bl	8001164 <HAL_DMA_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f043 0204 	orr.w	r2, r3, #4
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08000cd9 	.word	0x08000cd9
 8000a1c:	08000cfb 	.word	0x08000cfb
 8000a20:	08000d17 	.word	0x08000d17
 8000a24:	08000fa9 	.word	0x08000fa9
 8000a28:	08000fcb 	.word	0x08000fcb
 8000a2c:	08000fe7 	.word	0x08000fe7

08000a30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d101      	bne.n	8000a74 <HAL_DAC_ConfigChannel+0x1c>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e12a      	b.n	8000cca <HAL_DAC_ConfigChannel+0x272>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2201      	movs	r2, #1
 8000a78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d174      	bne.n	8000b72 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000a88:	f7ff fda2 	bl	80005d0 <HAL_GetTick>
 8000a8c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d134      	bne.n	8000afe <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a94:	e011      	b.n	8000aba <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a96:	f7ff fd9b 	bl	80005d0 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d90a      	bls.n	8000aba <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	f043 0208 	orr.w	r2, r3, #8
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e107      	b.n	8000cca <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e6      	bne.n	8000a96 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fd8d 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	69d2      	ldr	r2, [r2, #28]
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad8:	e01e      	b.n	8000b18 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ada:	f7ff fd79 	bl	80005d0 <HAL_GetTick>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d90a      	bls.n	8000afe <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	f043 0208 	orr.w	r2, r3, #8
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2203      	movs	r2, #3
 8000af8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e0e5      	b.n	8000cca <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dbe8      	blt.n	8000ada <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fd6d 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	69d2      	ldr	r2, [r2, #28]
 8000b16:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	ea02 0103 	and.w	r1, r2, r3
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	6a1a      	ldr	r2, [r3, #32]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	ea02 0103 	and.w	r1, r2, r3
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d11d      	bne.n	8000bb6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	221f      	movs	r2, #31
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6819      	ldr	r1, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	400a      	ands	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c5a:	d104      	bne.n	8000c66 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	e018      	b.n	8000c98 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e00f      	b.n	8000c98 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000c78:	f001 fcbe 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8000c7c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_DAC_ConfigChannel+0x27c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d904      	bls.n	8000c90 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e003      	b.n	8000c98 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c96:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	22c0      	movs	r2, #192	; 0xc0
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	400a      	ands	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	04c4b400 	.word	0x04c4b400

08000cd8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f003 fdae 	bl	8004848 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	711a      	strb	r2, [r3, #4]
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fe91 	bl	8000a30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	f043 0204 	orr.w	r2, r3, #4
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f7ff fe87 	bl	8000a44 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	711a      	strb	r2, [r3, #4]
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d103      	bne.n	8000da0 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d9e:	e0fd      	b.n	8000f9c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d103      	bne.n	8000db2 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000db0:	e0f4      	b.n	8000f9c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_DACEx_SelfCalibrate+0x3e>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e0f0      	b.n	8000fa0 <HAL_DACEx_SelfCalibrate+0x220>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2201      	movs	r2, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43da      	mvns	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	400a      	ands	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	2207      	movs	r2, #7
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	400a      	ands	r2, r1
 8000e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d103      	bne.n	8000e26 <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3308      	adds	r3, #8
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e002      	b.n	8000e2c <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3314      	adds	r3, #20
 8000e2a:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e46:	409a      	lsls	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 8000e50:	2310      	movs	r3, #16
 8000e52:	623b      	str	r3, [r7, #32]
    delta = 8U;
 8000e54:	2308      	movs	r3, #8
 8000e56:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8000e58:	e037      	b.n	8000eca <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	211f      	movs	r1, #31
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	ea02 0103 	and.w	r1, r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	6a3a      	ldr	r2, [r7, #32]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fbaf 	bl	80005e8 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d104      	bne.n	8000ebc <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8000eb2:	6a3a      	ldr	r2, [r7, #32]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	e003      	b.n	8000ec4 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8000ebc:	6a3a      	ldr	r2, [r7, #32]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1c4      	bne.n	8000e5a <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	211f      	movs	r1, #31
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	ea02 0103 	and.w	r1, r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	6a3a      	ldr	r2, [r7, #32]
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff fb74 	bl	80005e8 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d117      	bne.n	8000f4a <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	ea02 0103 	and.w	r1, r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	409a      	lsls	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	6a3a      	ldr	r2, [r7, #32]
 8000f6c:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2201      	movs	r2, #1
 8000f72:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2107      	movs	r1, #7
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	ea02 0103 	and.w	r1, r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8000f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff fec4 	bl	8000d44 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	711a      	strb	r2, [r3, #4]
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff febd 	bl	8000d58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f043 0204 	orr.w	r2, r3, #4
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff feb3 	bl	8000d6c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e08d      	b.n	8001142 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_DMA_Init+0x138>)
 800102e:	429a      	cmp	r2, r3
 8001030:	d80f      	bhi.n	8001052 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_DMA_Init+0x13c>)
 800103a:	4413      	add	r3, r2
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_DMA_Init+0x140>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	009a      	lsls	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a42      	ldr	r2, [pc, #264]	; (8001158 <HAL_DMA_Init+0x144>)
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
 8001050:	e00e      	b.n	8001070 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_DMA_Init+0x148>)
 800105a:	4413      	add	r3, r2
 800105c:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <HAL_DMA_Init+0x140>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	009a      	lsls	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <HAL_DMA_Init+0x14c>)
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800108a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f9b6 	bl	8001434 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010d0:	d102      	bne.n	80010d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <HAL_DMA_Init+0x104>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d80c      	bhi.n	8001118 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f9d6 	bl	80014b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	e008      	b.n	800112a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020407 	.word	0x40020407
 8001150:	bffdfff8 	.word	0xbffdfff8
 8001154:	cccccccd 	.word	0xcccccccd
 8001158:	40020000 	.word	0x40020000
 800115c:	bffdfbf8 	.word	0xbffdfbf8
 8001160:	40020400 	.word	0x40020400

08001164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_DMA_Start_IT+0x20>
 8001180:	2302      	movs	r3, #2
 8001182:	e066      	b.n	8001252 <HAL_DMA_Start_IT+0xee>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d155      	bne.n	8001244 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f8fb 	bl	80013b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 020e 	orr.w	r2, r2, #14
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00f      	b.n	80011fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 020a 	orr.w	r2, r2, #10
 80011fa:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001218:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001230:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e005      	b.n	8001250 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800124c:	2302      	movs	r3, #2
 800124e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f003 031c 	and.w	r3, r3, #28
 800127a:	2204      	movs	r2, #4
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d026      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x7a>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d021      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0204 	bic.w	r2, r2, #4
 80012ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2104      	movs	r1, #4
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d071      	beq.n	80013ae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012d2:	e06c      	b.n	80013ae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 031c 	and.w	r3, r3, #28
 80012dc:	2202      	movs	r2, #2
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02e      	beq.n	8001346 <HAL_DMA_IRQHandler+0xec>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d029      	beq.n	8001346 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10b      	bne.n	8001318 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020a 	bic.w	r2, r2, #10
 800130e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f003 021c 	and.w	r2, r3, #28
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2102      	movs	r1, #2
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d038      	beq.n	80013ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001344:	e033      	b.n	80013ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 031c 	and.w	r3, r3, #28
 800134e:	2208      	movs	r2, #8
 8001350:	409a      	lsls	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d02a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d025      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 020e 	bic.w	r2, r2, #14
 8001372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	f003 021c 	and.w	r2, r3, #28
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
}
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013ce:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 021c 	and.w	r2, r3, #28
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d108      	bne.n	8001418 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001416:	e007      	b.n	8001428 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001444:	429a      	cmp	r2, r3
 8001446:	d80a      	bhi.n	800145e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001454:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6493      	str	r3, [r2, #72]	; 0x48
 800145c:	e007      	b.n	800146e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001468:	4413      	add	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b08      	subs	r3, #8
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001484:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2201      	movs	r2, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40020407 	.word	0x40020407
 80014a4:	4002081c 	.word	0x4002081c
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40020880 	.word	0x40020880

080014b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	1000823f 	.word	0x1000823f
 80014f4:	40020940 	.word	0x40020940

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e166      	b.n	80017d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8158 	beq.w	80017d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d005      	beq.n	8001538 <HAL_GPIO_Init+0x40>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d130      	bne.n	800159a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156e:	2201      	movs	r2, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f003 0201 	and.w	r2, r3, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d017      	beq.n	80015d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d123      	bne.n	800162a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	6939      	ldr	r1, [r7, #16]
 8001626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0203 	and.w	r2, r3, #3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80b2 	beq.w	80017d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6613      	str	r3, [r2, #96]	; 0x60
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001684:	4a5c      	ldr	r2, [pc, #368]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ae:	d02b      	beq.n	8001708 <HAL_GPIO_Init+0x210>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_GPIO_Init+0x304>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d025      	beq.n	8001704 <HAL_GPIO_Init+0x20c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_GPIO_Init+0x308>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_Init+0x208>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a50      	ldr	r2, [pc, #320]	; (8001804 <HAL_GPIO_Init+0x30c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_GPIO_Init+0x204>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_GPIO_Init+0x310>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x200>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_GPIO_Init+0x314>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1fc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_GPIO_Init+0x318>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1f8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x31c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1f4>
 80016e8:	2307      	movs	r3, #7
 80016ea:	e00e      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016ec:	2308      	movs	r3, #8
 80016ee:	e00c      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f0:	2306      	movs	r3, #6
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f4:	2305      	movs	r3, #5
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_GPIO_Init+0x320>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_GPIO_Init+0x320>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_GPIO_Init+0x320>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae91 	bne.w	8001508 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	48001400 	.word	0x48001400
 8001810:	48001800 	.word	0x48001800
 8001814:	48001c00 	.word	0x48001c00
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001838:	e002      	b.n	8001840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43d9      	mvns	r1, r3
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	400b      	ands	r3, r1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 ffa2 	bl	80047e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c0:	d102      	bne.n	80018c8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80018c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c6:	e00b      	b.n	80018e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	e000      	b.n	80018e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80018de:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000

080018f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d141      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fe:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	d131      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190c:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001912:	4a46      	ldr	r2, [pc, #280]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001924:	4a41      	ldr	r2, [pc, #260]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2232      	movs	r2, #50	; 0x32
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001942:	e002      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3b01      	subs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d102      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f2      	bne.n	8001944 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	d158      	bne.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e057      	b.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001976:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800197c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001980:	e04d      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001988:	d141      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d131      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199e:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b0:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2232      	movs	r2, #50	; 0x32
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9b      	lsrs	r3, r3, #18
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ce:	e002      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d102      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f2      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d112      	bne.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e011      	b.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a0c:	e007      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	20000014 	.word	0x20000014
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc08 	b.w	800225c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a56:	4b94      	ldr	r3, [pc, #592]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80e4 	beq.w	8001c36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	f040 808b 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 8087 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x64>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e3df      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x7e>
 8001aac:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab4:	e005      	b.n	8001ac2 <HAL_RCC_OscConfig+0x8a>
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d223      	bcs.n	8001b0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fdcc 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3c0      	b.n	800225c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	496d      	ldr	r1, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af8:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	4968      	ldr	r1, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e025      	b.n	8001b5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4960      	ldr	r1, [pc, #384]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	495b      	ldr	r1, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fd8c 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e380      	b.n	800225c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5a:	f000 fcc1 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4950      	ldr	r1, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x278>)
 8001b78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcd6 	bl	8000530 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d052      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	e364      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d032      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe fd13 	bl	80005d0 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bae:	f7fe fd0f 	bl	80005d0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e34d      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4930      	ldr	r1, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
 8001bfe:	e01a      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fce0 	bl	80005d0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c14:	f7fe fcdc 	bl	80005d0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e31a      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1dc>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d073      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x21c>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d063      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d15f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e2f7      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x24c>
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e025      	b.n	8001cd0 <HAL_RCC_OscConfig+0x298>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d114      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x280>
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a02      	ldr	r2, [pc, #8]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x298>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08005f40 	.word	0x08005f40
 8001cb0:	20000014 	.word	0x20000014
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a9f      	ldr	r2, [pc, #636]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a9c      	ldr	r2, [pc, #624]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fc7a 	bl	80005d0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fc76 	bl	80005d0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2b4      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf2:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7fe fc66 	bl	80005d0 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7fe fc62 	bl	80005d0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e2a0      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2d0>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x310>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d119      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d116      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x328>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e27d      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4973      	ldr	r1, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	e040      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7e:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fc21 	bl	80005d0 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7fe fc1d 	bl	80005d0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e25b      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	495f      	ldr	r1, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fbfd 	bl	80005d0 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7fe fbf9 	bl	80005d0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e237      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7fe fbd8 	bl	80005d0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7fe fbd4 	bl	80005d0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e212      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ef      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001e44:	e01b      	b.n	8001e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7fe fbbb 	bl	80005d0 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7fe fbb7 	bl	80005d0 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1f5      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d118      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fb7e 	bl	80005d0 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7fe fb7a 	bl	80005d0 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1b8      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d8>
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0e:	e029      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d115      	bne.n	8001f44 <HAL_RCC_OscConfig+0x50c>
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	4b9d      	ldr	r3, [pc, #628]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a9c      	ldr	r2, [pc, #624]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	4b99      	ldr	r3, [pc, #612]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a98      	ldr	r2, [pc, #608]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fb30 	bl	80005d0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fb2c 	bl	80005d0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e168      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8a:	4b8c      	ldr	r3, [pc, #560]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ed      	beq.n	8001f74 <HAL_RCC_OscConfig+0x53c>
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fb19 	bl	80005d0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe fb15 	bl	80005d0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e151      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ed      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fec:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fae8 	bl	80005d0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002004:	f7fe fae4 	bl	80005d0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e122      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002016:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCC_OscConfig+0x5cc>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002026:	4b65      	ldr	r3, [pc, #404]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202c:	4a63      	ldr	r2, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7fe facb 	bl	80005d0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203e:	f7fe fac7 	bl	80005d0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e105      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ef      	bne.n	800203e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80f9 	beq.w	800225a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80cf 	bne.w	8002210 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0203 	and.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	429a      	cmp	r2, r3
 8002084:	d12c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	3b01      	subs	r3, #1
 8002092:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d123      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d11b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d113      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d109      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d071      	beq.n	80021c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d068      	beq.n	80021b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0ac      	b.n	800225c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800210e:	f7fe fa5f 	bl	80005d0 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe fa5b 	bl	80005d0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e099      	b.n	800225c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_OscConfig+0x788>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002144:	3a01      	subs	r2, #1
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	4311      	orrs	r1, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800214e:	0212      	lsls	r2, r2, #8
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0552      	lsls	r2, r2, #21
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002162:	0852      	lsrs	r2, r2, #1
 8002164:	3a01      	subs	r2, #1
 8002166:	0652      	lsls	r2, r2, #25
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216e:	06d2      	lsls	r2, r2, #27
 8002170:	430a      	orrs	r2, r1
 8002172:	4912      	ldr	r1, [pc, #72]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002190:	f7fe fa1e 	bl	80005d0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe fa1a 	bl	80005d0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e058      	b.n	800225c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_OscConfig+0x784>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b6:	e050      	b.n	800225a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04f      	b.n	800225c <HAL_RCC_OscConfig+0x824>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d144      	bne.n	800225a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e8:	f7fe f9f2 	bl	80005d0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe f9ee 	bl	80005d0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e02c      	b.n	800225c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x7b8>
 800220e:	e024      	b.n	800225a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d01f      	beq.n	8002256 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800221c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe f9d5 	bl	80005d0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe f9d1 	bl	80005d0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e00f      	b.n	800225c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4905      	ldr	r1, [pc, #20]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x830>)
 8002250:	4013      	ands	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e001      	b.n	800225a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	feeefffc 	.word	0xfeeefffc

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e11d      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b90      	ldr	r3, [pc, #576]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 020f 	bic.w	r2, r3, #15
 800229a:	498b      	ldr	r1, [pc, #556]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e105      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b81      	ldr	r3, [pc, #516]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	497b      	ldr	r1, [pc, #492]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d079      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d11e      	bne.n	8002334 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0dc      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002306:	f000 fa09 	bl	800271c <RCC_GetSysClockFreqFromPLLSource>
 800230a:	4603      	mov	r3, r0
 800230c:	4a70      	ldr	r2, [pc, #448]	; (80024d0 <HAL_RCC_ClockConfig+0x264>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d946      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002312:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d140      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800231e:	4b6b      	ldr	r3, [pc, #428]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e035      	b.n	80023a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d107      	bne.n	800234c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233c:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d115      	bne.n	8002374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0b9      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002354:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0ad      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0a5      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002374:	f000 f8b4 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002378:	4603      	mov	r3, r0
 800237a:	4a55      	ldr	r2, [pc, #340]	; (80024d0 <HAL_RCC_ClockConfig+0x264>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d90f      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002380:	4b52      	ldr	r3, [pc, #328]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238c:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002394:	4a4d      	ldr	r2, [pc, #308]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 0203 	bic.w	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4947      	ldr	r1, [pc, #284]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b2:	f7fe f90d 	bl	80005d0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7fe f909 	bl	80005d0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e077      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d0:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 020c 	and.w	r2, r3, #12
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	429a      	cmp	r2, r3
 80023e0:	d1eb      	bne.n	80023ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a37      	ldr	r2, [pc, #220]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	429a      	cmp	r2, r3
 800240e:	d208      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	492b      	ldr	r1, [pc, #172]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d210      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 020f 	bic.w	r2, r3, #15
 8002438:	4923      	ldr	r1, [pc, #140]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_ClockConfig+0x25c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e036      	b.n	80024c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4918      	ldr	r1, [pc, #96]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4910      	ldr	r1, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002490:	f000 f826 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_ClockConfig+0x260>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <HAL_RCC_ClockConfig+0x268>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x26c>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f83b 	bl	8000530 <HAL_InitTick>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	04c4b400 	.word	0x04c4b400
 80024d4:	08005f40 	.word	0x08005f40
 80024d8:	20000014 	.word	0x20000014
 80024dc:	20000000 	.word	0x20000000

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f8:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x34>
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d121      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d11e      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e005      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d102      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e004      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d101      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d134      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0xa6>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d003      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xac>
 8002584:	e005      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002588:	617b      	str	r3, [r7, #20]
      break;
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800258e:	617b      	str	r3, [r7, #20]
      break;
 8002590:	e002      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	617b      	str	r3, [r7, #20]
      break;
 8002596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	3301      	adds	r3, #1
 80025a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	0e5b      	lsrs	r3, r3, #25
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	3301      	adds	r3, #1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025d8:	69bb      	ldr	r3, [r7, #24]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08005f58 	.word	0x08005f58
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	007a1200 	.word	0x007a1200

080025f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000014 	.word	0x20000014

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002614:	f7ff fff0 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4904      	ldr	r1, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	08005f50 	.word	0x08005f50

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002640:	f7ff ffda 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0adb      	lsrs	r3, r3, #11
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08005f50 	.word	0x08005f50

08002668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002674:	4b27      	ldr	r3, [pc, #156]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002680:	f7ff f916 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
 8002684:	6178      	str	r0, [r7, #20]
 8002686:	e014      	b.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002692:	6593      	str	r3, [r2, #88]	; 0x58
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a0:	f7ff f906 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
 80026a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b8:	d10b      	bne.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d913      	bls.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2ba0      	cmp	r3, #160	; 0xa0
 80026c4:	d902      	bls.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c6:	2302      	movs	r3, #2
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	e00d      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e00a      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b7f      	cmp	r3, #127	; 0x7f
 80026d6:	d902      	bls.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80026d8:	2302      	movs	r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e004      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d101      	bne.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 020f 	bic.w	r2, r3, #15
 80026f0:	4909      	ldr	r1, [pc, #36]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	40022000 	.word	0x40022000

0800271c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d00b      	beq.n	800274a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d825      	bhi.n	8002784 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d008      	beq.n	8002750 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d11f      	bne.n	8002784 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002746:	613b      	str	r3, [r7, #16]
    break;
 8002748:	e01f      	b.n	800278a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800274c:	613b      	str	r3, [r7, #16]
    break;
 800274e:	e01c      	b.n	800278a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e005      	b.n	8002778 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002778:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
    break;
 8002782:	e002      	b.n	800278a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
    break;
 8002788:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	3301      	adds	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	fb03 f202 	mul.w	r2, r3, r2
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0e5b      	lsrs	r3, r3, #25
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	3301      	adds	r3, #1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80027ca:	683b      	ldr	r3, [r7, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40021000 	.word	0x40021000
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200
 80027e4:	08005f58 	.word	0x08005f58

080027e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f0:	2300      	movs	r3, #0
 80027f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f4:	2300      	movs	r3, #0
 80027f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002800:	2b00      	cmp	r3, #0
 8002802:	d040      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d02a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d825      	bhi.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d026      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d821      	bhi.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d006      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d81d      	bhi.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d010      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002828:	e018      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800282a:	4b89      	ldr	r3, [pc, #548]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a88      	ldr	r2, [pc, #544]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002836:	e015      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fb02 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002848:	e00c      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3320      	adds	r3, #32
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fbed 	bl	8003030 <RCCEx_PLLSAI2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800285a:	e003      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	74fb      	strb	r3, [r7, #19]
      break;
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286a:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800286c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002870:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002878:	4975      	ldr	r1, [pc, #468]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002880:	e001      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d047      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d030      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	d82a      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80028a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a6:	d02a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80028a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ac:	d824      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80028b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b8:	d81e      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80028be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c2:	d010      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80028c4:	e018      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c6:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d2:	e015      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fab4 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e4:	e00c      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3320      	adds	r3, #32
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fb9f 	bl	8003030 <RCCEx_PLLSAI2_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f6:	e003      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	74fb      	strb	r3, [r7, #19]
      break;
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80028fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002906:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002908:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800290c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	494e      	ldr	r1, [pc, #312]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800291c:	e001      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 809f 	beq.w	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002972:	f7fd fe2d 	bl	80005d0 <HAL_GetTick>
 8002976:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002978:	e009      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fd fe29 	bl	80005d0 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	74fb      	strb	r3, [r7, #19]
        break;
 800298c:	e005      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d15b      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01f      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d016      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fd fde8 	bl	80005d0 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a02:	e00b      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fd fde4 	bl	80005d0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d902      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	74fb      	strb	r3, [r7, #19]
            break;
 8002a1a:	e006      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ec      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a48:	e008      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	74bb      	strb	r3, [r7, #18]
 8002a4e:	e005      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5c:	7c7b      	ldrb	r3, [r7, #17]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4ba0      	ldr	r3, [pc, #640]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	4a9f      	ldr	r2, [pc, #636]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a7a:	4b9a      	ldr	r3, [pc, #616]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 0203 	bic.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	4996      	ldr	r1, [pc, #600]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9c:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 020c 	bic.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	498e      	ldr	r1, [pc, #568]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	4985      	ldr	r1, [pc, #532]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ae0:	4b80      	ldr	r3, [pc, #512]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	497d      	ldr	r1, [pc, #500]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b02:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4974      	ldr	r1, [pc, #464]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	496c      	ldr	r1, [pc, #432]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b54:	4963      	ldr	r1, [pc, #396]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b76:	495b      	ldr	r1, [pc, #364]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	4952      	ldr	r1, [pc, #328]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	494a      	ldr	r1, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bce:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	4941      	ldr	r1, [pc, #260]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfe:	4939      	ldr	r1, [pc, #228]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f8f9 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04d      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c78:	d108      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002c8a:	e012      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cba:	d106      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc6:	60d3      	str	r3, [r2, #12]
 8002cc8:	e020      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd2:	d109      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	60d3      	str	r3, [r2, #12]
 8002ce0:	e014      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f8a5 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d028      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d26:	4947      	ldr	r1, [pc, #284]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d36:	d106      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d38:	4b42      	ldr	r3, [pc, #264]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a41      	ldr	r2, [pc, #260]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
 8002d44:	e011      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f876 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01e      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	492f      	ldr	r1, [pc, #188]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f851 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc6:	f023 0204 	bic.w	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd0:	491c      	ldr	r1, [pc, #112]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dea:	f023 0218 	bic.w	r2, r3, #24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	4913      	ldr	r1, [pc, #76]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d017      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e18:	490a      	ldr	r1, [pc, #40]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e38:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e56:	4b72      	ldr	r3, [pc, #456]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0203 	and.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d103      	bne.n	8002e7a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
       ||
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d142      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e03f      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x72>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI1_Config+0x90>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0x4e>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x60>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b62      	ldr	r3, [pc, #392]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b59      	ldr	r3, [pc, #356]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002eee:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4949      	ldr	r1, [pc, #292]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8086 	bne.w	8003014 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a44      	ldr	r2, [pc, #272]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fd fb5c 	bl	80005d0 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f1a:	e009      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f1c:	f7fd fb58 	bl	80005d0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d902      	bls.n	8002f30 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2e:	e005      	b.n	8002f3c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f30:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ef      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d168      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d113      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	0211      	lsls	r1, r2, #8
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	06d2      	lsls	r2, r2, #27
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6852      	ldr	r2, [r2, #4]
 8002f62:	3a01      	subs	r2, #1
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	430a      	orrs	r2, r1
 8002f68:	492d      	ldr	r1, [pc, #180]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	610b      	str	r3, [r1, #16]
 8002f6e:	e02d      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d115      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	0211      	lsls	r1, r2, #8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6912      	ldr	r2, [r2, #16]
 8002f88:	0852      	lsrs	r2, r2, #1
 8002f8a:	3a01      	subs	r2, #1
 8002f8c:	0552      	lsls	r2, r2, #21
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6852      	ldr	r2, [r2, #4]
 8002f94:	3a01      	subs	r2, #1
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4921      	ldr	r1, [pc, #132]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	610b      	str	r3, [r1, #16]
 8002fa0:	e014      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	0211      	lsls	r1, r2, #8
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6952      	ldr	r2, [r2, #20]
 8002fb4:	0852      	lsrs	r2, r2, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0652      	lsls	r2, r2, #25
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6852      	ldr	r2, [r2, #4]
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	4916      	ldr	r1, [pc, #88]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fd fafa 	bl	80005d0 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fde:	e009      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe0:	f7fd faf6 	bl	80005d0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff2:	e005      	b.n	8003000 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	07ff800f 	.word	0x07ff800f
 8003028:	ff9f800f 	.word	0xff9f800f
 800302c:	f9ff800f 	.word	0xf9ff800f

08003030 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303e:	4b72      	ldr	r3, [pc, #456]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800304a:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d103      	bne.n	8003062 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
       ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d142      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	e03f      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d018      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x72>
 8003070:	2b03      	cmp	r3, #3
 8003072:	d825      	bhi.n	80030c0 <RCCEx_PLLSAI2_Config+0x90>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d002      	beq.n	800307e <RCCEx_PLLSAI2_Config+0x4e>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d009      	beq.n	8003090 <RCCEx_PLLSAI2_Config+0x60>
 800307c:	e020      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307e:	4b62      	ldr	r3, [pc, #392]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11d      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308e:	e01a      	b.n	80030c6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003090:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e013      	b.n	80030ca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030a2:	4b59      	ldr	r3, [pc, #356]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ae:	4b56      	ldr	r3, [pc, #344]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030be:	e006      	b.n	80030ce <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e004      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80030ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4949      	ldr	r1, [pc, #292]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8086 	bne.w	80031fc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a44      	ldr	r2, [pc, #272]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fd fa68 	bl	80005d0 <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003102:	e009      	b.n	8003118 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003104:	f7fd fa64 	bl	80005d0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]
        break;
 8003116:	e005      	b.n	8003124 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003118:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ef      	bne.n	8003104 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d168      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d113      	bne.n	8003158 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	0211      	lsls	r1, r2, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	06d2      	lsls	r2, r2, #27
 8003144:	4311      	orrs	r1, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6852      	ldr	r2, [r2, #4]
 800314a:	3a01      	subs	r2, #1
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	430a      	orrs	r2, r1
 8003150:	492d      	ldr	r1, [pc, #180]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	614b      	str	r3, [r1, #20]
 8003156:	e02d      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d115      	bne.n	800318a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	0211      	lsls	r1, r2, #8
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6912      	ldr	r2, [r2, #16]
 8003170:	0852      	lsrs	r2, r2, #1
 8003172:	3a01      	subs	r2, #1
 8003174:	0552      	lsls	r2, r2, #21
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	3a01      	subs	r2, #1
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	430a      	orrs	r2, r1
 8003182:	4921      	ldr	r1, [pc, #132]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	614b      	str	r3, [r1, #20]
 8003188:	e014      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6892      	ldr	r2, [r2, #8]
 8003196:	0211      	lsls	r1, r2, #8
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6952      	ldr	r2, [r2, #20]
 800319c:	0852      	lsrs	r2, r2, #1
 800319e:	3a01      	subs	r2, #1
 80031a0:	0652      	lsls	r2, r2, #25
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6852      	ldr	r2, [r2, #4]
 80031a8:	3a01      	subs	r2, #1
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	430a      	orrs	r2, r1
 80031ae:	4916      	ldr	r1, [pc, #88]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fa06 	bl	80005d0 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031c6:	e009      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031c8:	f7fd fa02 	bl	80005d0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d902      	bls.n	80031dc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	73fb      	strb	r3, [r7, #15]
          break;
 80031da:	e005      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	07ff800f 	.word	0x07ff800f
 8003210:	ff9f800f 	.word	0xff9f800f
 8003214:	f9ff800f 	.word	0xf9ff800f

08003218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e049      	b.n	80032be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f001 ff1a 	bl	8005078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f000 fac0 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e04f      	b.n	8003380 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a23      	ldr	r2, [pc, #140]	; (800338c <HAL_TIM_Base_Start_IT+0xc4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01d      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330a:	d018      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_TIM_Base_Start_IT+0xc8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_TIM_Base_Start_IT+0xcc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_TIM_Base_Start_IT+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_TIM_Base_Start_IT+0xd4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x76>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d115      	bne.n	800336a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d015      	beq.n	800337c <HAL_TIM_Base_Start_IT+0xb4>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d011      	beq.n	800337c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003368:	e008      	b.n	800337c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e000      	b.n	800337e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40013400 	.word	0x40013400
 80033a0:	40014000 	.word	0x40014000
 80033a4:	00010007 	.word	0x00010007

080033a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d122      	bne.n	8003404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d11b      	bne.n	8003404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0202 	mvn.w	r2, #2
 80033d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f9d8 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f9ca 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9db 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b04      	cmp	r3, #4
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0204 	mvn.w	r2, #4
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9ae 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a0 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9b1 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b08      	cmp	r3, #8
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0208 	mvn.w	r2, #8
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2204      	movs	r2, #4
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f984 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f976 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f987 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0210 	mvn.w	r2, #16
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2208      	movs	r2, #8
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f95a 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f94c 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f95d 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0201 	mvn.w	r2, #1
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f926 	bl	8003778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb08 	bl	8003b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fafb 	bl	8003b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f90b 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d10e      	bne.n	80035de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d107      	bne.n	80035de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0220 	mvn.w	r2, #32
 80035d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fabb 	bl	8003b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_ConfigClockSource+0x1c>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0b6      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x18a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003620:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003624:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363e:	d03e      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xd8>
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003644:	f200 8087 	bhi.w	8003756 <HAL_TIM_ConfigClockSource+0x170>
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	f000 8086 	beq.w	800375c <HAL_TIM_ConfigClockSource+0x176>
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d87f      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 8003656:	2b70      	cmp	r3, #112	; 0x70
 8003658:	d01a      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xaa>
 800365a:	2b70      	cmp	r3, #112	; 0x70
 800365c:	d87b      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 800365e:	2b60      	cmp	r3, #96	; 0x60
 8003660:	d050      	beq.n	8003704 <HAL_TIM_ConfigClockSource+0x11e>
 8003662:	2b60      	cmp	r3, #96	; 0x60
 8003664:	d877      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 8003666:	2b50      	cmp	r3, #80	; 0x50
 8003668:	d03c      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0xfe>
 800366a:	2b50      	cmp	r3, #80	; 0x50
 800366c:	d873      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d058      	beq.n	8003724 <HAL_TIM_ConfigClockSource+0x13e>
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d86f      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d064      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0x15e>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d86b      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 800367e:	2b20      	cmp	r3, #32
 8003680:	d060      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0x15e>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d867      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d05c      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0x15e>
 800368a:	2b10      	cmp	r3, #16
 800368c:	d05a      	beq.n	8003744 <HAL_TIM_ConfigClockSource+0x15e>
 800368e:	e062      	b.n	8003756 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f000 f9b0 	bl	8003a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e04f      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f000 f999 	bl	8003a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e0:	609a      	str	r2, [r3, #8]
      break;
 80036e2:	e03c      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f000 f90d 	bl	8003910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2150      	movs	r1, #80	; 0x50
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f966 	bl	80039ce <TIM_ITRx_SetConfig>
      break;
 8003702:	e02c      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	461a      	mov	r2, r3
 8003712:	f000 f92c 	bl	800396e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2160      	movs	r1, #96	; 0x60
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f956 	bl	80039ce <TIM_ITRx_SetConfig>
      break;
 8003722:	e01c      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	461a      	mov	r2, r3
 8003732:	f000 f8ed 	bl	8003910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f946 	bl	80039ce <TIM_ITRx_SetConfig>
      break;
 8003742:	e00c      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 f93d 	bl	80039ce <TIM_ITRx_SetConfig>
      break;
 8003754:	e003      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      break;
 800375a:	e000      	b.n	800375e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800375c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <TIM_Base_SetConfig+0x114>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d00f      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <TIM_Base_SetConfig+0x118>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <TIM_Base_SetConfig+0x11c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <TIM_Base_SetConfig+0x120>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3a      	ldr	r2, [pc, #232]	; (8003900 <TIM_Base_SetConfig+0x124>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <TIM_Base_SetConfig+0x114>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d01b      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <TIM_Base_SetConfig+0x118>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d017      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <TIM_Base_SetConfig+0x11c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <TIM_Base_SetConfig+0x120>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00f      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <TIM_Base_SetConfig+0x124>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <TIM_Base_SetConfig+0x128>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a27      	ldr	r2, [pc, #156]	; (8003908 <TIM_Base_SetConfig+0x12c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0x9a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a26      	ldr	r2, [pc, #152]	; (800390c <TIM_Base_SetConfig+0x130>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <TIM_Base_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00f      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <TIM_Base_SetConfig+0x124>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <TIM_Base_SetConfig+0x128>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <TIM_Base_SetConfig+0x12c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <TIM_Base_SetConfig+0x130>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40013400 	.word	0x40013400
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800

08003910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 030a 	bic.w	r3, r3, #10
 800394c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0210 	bic.w	r2, r3, #16
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f043 0307 	orr.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e068      	b.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2d      	ldr	r2, [pc, #180]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01d      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d018      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10c      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40013400 	.word	0x40013400
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40014000 	.word	0x40014000

08003b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 fa83 	bl	80050c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2224      	movs	r2, #36	; 0x24
 8003bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f82c 	bl	8003c30 <UART_SetConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e022      	b.n	8003c28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fb1c 	bl	8004228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fba3 	bl	800436c <UART_CheckIdleState>
 8003c26:	4603      	mov	r3, r0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b08c      	sub	sp, #48	; 0x30
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4baa      	ldr	r3, [pc, #680]	; (8003f08 <UART_SetConfig+0x2d8>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a9f      	ldr	r2, [pc, #636]	; (8003f0c <UART_SetConfig+0x2dc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ca6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f023 010f 	bic.w	r1, r3, #15
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a90      	ldr	r2, [pc, #576]	; (8003f10 <UART_SetConfig+0x2e0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d125      	bne.n	8003d20 <UART_SetConfig+0xf0>
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d81a      	bhi.n	8003d18 <UART_SetConfig+0xe8>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <UART_SetConfig+0xb8>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d09 	.word	0x08003d09
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d11 	.word	0x08003d11
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e116      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d06:	e112      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e10e      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d10:	2308      	movs	r3, #8
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e10a      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e106      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7c      	ldr	r2, [pc, #496]	; (8003f18 <UART_SetConfig+0x2e8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d138      	bne.n	8003d9c <UART_SetConfig+0x16c>
 8003d2a:	4b7a      	ldr	r3, [pc, #488]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d82d      	bhi.n	8003d94 <UART_SetConfig+0x164>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x110>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d95 	.word	0x08003d95
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d95 	.word	0x08003d95
 8003d60:	08003d7d 	.word	0x08003d7d
 8003d64:	08003d95 	.word	0x08003d95
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d8d 	.word	0x08003d8d
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e0d8      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d82:	e0d4      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e0d0      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e0cc      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e0c8      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5e      	ldr	r2, [pc, #376]	; (8003f1c <UART_SetConfig+0x2ec>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d125      	bne.n	8003df2 <UART_SetConfig+0x1c2>
 8003da6:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d016      	beq.n	8003de2 <UART_SetConfig+0x1b2>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d818      	bhi.n	8003dea <UART_SetConfig+0x1ba>
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d00a      	beq.n	8003dd2 <UART_SetConfig+0x1a2>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d814      	bhi.n	8003dea <UART_SetConfig+0x1ba>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <UART_SetConfig+0x19a>
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d008      	beq.n	8003dda <UART_SetConfig+0x1aa>
 8003dc8:	e00f      	b.n	8003dea <UART_SetConfig+0x1ba>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd0:	e0ad      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd8:	e0a9      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de0:	e0a5      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003de2:	2308      	movs	r3, #8
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de8:	e0a1      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003dea:	2310      	movs	r3, #16
 8003dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df0:	e09d      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <UART_SetConfig+0x2f0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d125      	bne.n	8003e48 <UART_SetConfig+0x218>
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e06:	2bc0      	cmp	r3, #192	; 0xc0
 8003e08:	d016      	beq.n	8003e38 <UART_SetConfig+0x208>
 8003e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e0c:	d818      	bhi.n	8003e40 <UART_SetConfig+0x210>
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d00a      	beq.n	8003e28 <UART_SetConfig+0x1f8>
 8003e12:	2b80      	cmp	r3, #128	; 0x80
 8003e14:	d814      	bhi.n	8003e40 <UART_SetConfig+0x210>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <UART_SetConfig+0x1f0>
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d008      	beq.n	8003e30 <UART_SetConfig+0x200>
 8003e1e:	e00f      	b.n	8003e40 <UART_SetConfig+0x210>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e26:	e082      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	e07e      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e36:	e07a      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3e:	e076      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e072      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <UART_SetConfig+0x2f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d12a      	bne.n	8003ea8 <UART_SetConfig+0x278>
 8003e52:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e60:	d01a      	beq.n	8003e98 <UART_SetConfig+0x268>
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d81b      	bhi.n	8003ea0 <UART_SetConfig+0x270>
 8003e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6c:	d00c      	beq.n	8003e88 <UART_SetConfig+0x258>
 8003e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e72:	d815      	bhi.n	8003ea0 <UART_SetConfig+0x270>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <UART_SetConfig+0x250>
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7c:	d008      	beq.n	8003e90 <UART_SetConfig+0x260>
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x270>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e86:	e052      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	e04e      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e90:	2304      	movs	r3, #4
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e96:	e04a      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e046      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea6:	e042      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <UART_SetConfig+0x2dc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d13a      	bne.n	8003f28 <UART_SetConfig+0x2f8>
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec0:	d01a      	beq.n	8003ef8 <UART_SetConfig+0x2c8>
 8003ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec6:	d81b      	bhi.n	8003f00 <UART_SetConfig+0x2d0>
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ecc:	d00c      	beq.n	8003ee8 <UART_SetConfig+0x2b8>
 8003ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed2:	d815      	bhi.n	8003f00 <UART_SetConfig+0x2d0>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <UART_SetConfig+0x2b0>
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d008      	beq.n	8003ef0 <UART_SetConfig+0x2c0>
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x2d0>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ee6:	e022      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eee:	e01e      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	e01a      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003efe:	e016      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f06:	e012      	b.n	8003f2e <UART_SetConfig+0x2fe>
 8003f08:	cfff69f3 	.word	0xcfff69f3
 8003f0c:	40008000 	.word	0x40008000
 8003f10:	40013800 	.word	0x40013800
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40004400 	.word	0x40004400
 8003f1c:	40004800 	.word	0x40004800
 8003f20:	40004c00 	.word	0x40004c00
 8003f24:	40005000 	.word	0x40005000
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4aae      	ldr	r2, [pc, #696]	; (80041ec <UART_SetConfig+0x5bc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	f040 8097 	bne.w	8004068 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d823      	bhi.n	8003f8a <UART_SetConfig+0x35a>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x318>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f8b 	.word	0x08003f8b
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f8b 	.word	0x08003f8b
 8003f58:	08003f7b 	.word	0x08003f7b
 8003f5c:	08003f8b 	.word	0x08003f8b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f8b 	.word	0x08003f8b
 8003f68:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7fe fb50 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f72:	e010      	b.n	8003f96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b9e      	ldr	r3, [pc, #632]	; (80041f0 <UART_SetConfig+0x5c0>)
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f78:	e00d      	b.n	8003f96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fe fab1 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f80:	e009      	b.n	8003f96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f88:	e005      	b.n	8003f96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8130 	beq.w	80041fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	4a94      	ldr	r2, [pc, #592]	; (80041f4 <UART_SetConfig+0x5c4>)
 8003fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d305      	bcc.n	8003fce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d903      	bls.n	8003fd6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fd4:	e113      	b.n	80041fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	60fa      	str	r2, [r7, #12]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	4a84      	ldr	r2, [pc, #528]	; (80041f4 <UART_SetConfig+0x5c4>)
 8003fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2200      	movs	r2, #0
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ff8:	f7fc f900 	bl	80001fc <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	020b      	lsls	r3, r1, #8
 800400e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004012:	0202      	lsls	r2, r0, #8
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	6849      	ldr	r1, [r1, #4]
 8004018:	0849      	lsrs	r1, r1, #1
 800401a:	2000      	movs	r0, #0
 800401c:	460c      	mov	r4, r1
 800401e:	4605      	mov	r5, r0
 8004020:	eb12 0804 	adds.w	r8, r2, r4
 8004024:	eb43 0905 	adc.w	r9, r3, r5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	469a      	mov	sl, r3
 8004030:	4693      	mov	fp, r2
 8004032:	4652      	mov	r2, sl
 8004034:	465b      	mov	r3, fp
 8004036:	4640      	mov	r0, r8
 8004038:	4649      	mov	r1, r9
 800403a:	f7fc f8df 	bl	80001fc <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4613      	mov	r3, r2
 8004044:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404c:	d308      	bcc.n	8004060 <UART_SetConfig+0x430>
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004054:	d204      	bcs.n	8004060 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e0ce      	b.n	80041fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004066:	e0ca      	b.n	80041fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	d166      	bne.n	8004140 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004076:	2b08      	cmp	r3, #8
 8004078:	d827      	bhi.n	80040ca <UART_SetConfig+0x49a>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0x450>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040ad 	.word	0x080040ad
 8004088:	080040b5 	.word	0x080040b5
 800408c:	080040cb 	.word	0x080040cb
 8004090:	080040bb 	.word	0x080040bb
 8004094:	080040cb 	.word	0x080040cb
 8004098:	080040cb 	.word	0x080040cb
 800409c:	080040cb 	.word	0x080040cb
 80040a0:	080040c3 	.word	0x080040c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a4:	f7fe fab4 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80040a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040aa:	e014      	b.n	80040d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe fac6 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b2:	e010      	b.n	80040d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b4:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <UART_SetConfig+0x5c0>)
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b8:	e00d      	b.n	80040d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ba:	f7fe fa11 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040c0:	e009      	b.n	80040d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040c8:	e005      	b.n	80040d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8090 	beq.w	80041fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	4a44      	ldr	r2, [pc, #272]	; (80041f4 <UART_SetConfig+0x5c4>)
 80040e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f0:	005a      	lsls	r2, r3, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	441a      	add	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d916      	bls.n	8004138 <UART_SetConfig+0x508>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d212      	bcs.n	8004138 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f023 030f 	bic.w	r3, r3, #15
 800411a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	b29a      	uxth	r2, r3
 8004128:	8bfb      	ldrh	r3, [r7, #30]
 800412a:	4313      	orrs	r3, r2
 800412c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	8bfa      	ldrh	r2, [r7, #30]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	e062      	b.n	80041fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800413e:	e05e      	b.n	80041fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004144:	2b08      	cmp	r3, #8
 8004146:	d828      	bhi.n	800419a <UART_SetConfig+0x56a>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x520>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004185 	.word	0x08004185
 800415c:	0800419b 	.word	0x0800419b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800419b 	.word	0x0800419b
 800416c:	0800419b 	.word	0x0800419b
 8004170:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe fa4c 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800417a:	e014      	b.n	80041a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fe fa5e 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004182:	e010      	b.n	80041a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <UART_SetConfig+0x5c0>)
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004188:	e00d      	b.n	80041a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fe f9a9 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004190:	e009      	b.n	80041a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004198:	e005      	b.n	80041a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041a4:	bf00      	nop
    }

    if (pclk != 0U)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d028      	beq.n	80041fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <UART_SetConfig+0x5c4>)
 80041b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d910      	bls.n	80041f8 <UART_SetConfig+0x5c8>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d20c      	bcs.n	80041f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	e009      	b.n	80041fe <UART_SetConfig+0x5ce>
 80041ea:	bf00      	nop
 80041ec:	40008000 	.word	0x40008000
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	08005f18 	.word	0x08005f18
      }
      else
      {
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2201      	movs	r2, #1
 8004202:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2201      	movs	r2, #1
 800420a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2200      	movs	r2, #0
 8004218:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800421a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800421e:	4618      	mov	r0, r3
 8004220:	3730      	adds	r7, #48	; 0x30
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01a      	beq.n	800433e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d10a      	bne.n	800433e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af02      	add	r7, sp, #8
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800437c:	f7fc f928 	bl	80005d0 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d10e      	bne.n	80043ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f82f 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e025      	b.n	80043fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d10e      	bne.n	80043da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f819 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b09c      	sub	sp, #112	; 0x70
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	e0a9      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441a:	f000 80a5 	beq.w	8004568 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7fc f8d7 	bl	80005d0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <UART_WaitOnFlagUntilTimeout+0x32>
 800442e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004430:	2b00      	cmp	r3, #0
 8004432:	d140      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004448:	667b      	str	r3, [r7, #100]	; 0x64
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004454:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e6      	bne.n	8004434 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004486:	64ba      	str	r2, [r7, #72]	; 0x48
 8004488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800448c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e069      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d051      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d2:	d149      	bne.n	8004568 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
 80044fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004530:	623a      	str	r2, [r7, #32]
 8004532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	69f9      	ldr	r1, [r7, #28]
 8004536:	6a3a      	ldr	r2, [r7, #32]
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	61bb      	str	r3, [r7, #24]
   return(result);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e010      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	429a      	cmp	r2, r3
 8004584:	f43f af46 	beq.w	8004414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3770      	adds	r7, #112	; 0x70
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e027      	b.n	80045f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004618:	2302      	movs	r3, #2
 800461a:	e02d      	b.n	8004678 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f84f 	bl	80046fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004694:	2302      	movs	r3, #2
 8004696:	e02d      	b.n	80046f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f811 	bl	80046fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800471c:	e031      	b.n	8004782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800471e:	2308      	movs	r3, #8
 8004720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004722:	2308      	movs	r3, #8
 8004724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	0e5b      	lsrs	r3, r3, #25
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	0f5b      	lsrs	r3, r3, #29
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	7b3a      	ldrb	r2, [r7, #12]
 800474a:	4911      	ldr	r1, [pc, #68]	; (8004790 <UARTEx_SetNbDataToProcess+0x94>)
 800474c:	5c8a      	ldrb	r2, [r1, r2]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004752:	7b3a      	ldrb	r2, [r7, #12]
 8004754:	490f      	ldr	r1, [pc, #60]	; (8004794 <UARTEx_SetNbDataToProcess+0x98>)
 8004756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004758:	fb93 f3f2 	sdiv	r3, r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	7b7a      	ldrb	r2, [r7, #13]
 8004768:	4909      	ldr	r1, [pc, #36]	; (8004790 <UARTEx_SetNbDataToProcess+0x94>)
 800476a:	5c8a      	ldrb	r2, [r1, r2]
 800476c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004770:	7b7a      	ldrb	r2, [r7, #13]
 8004772:	4908      	ldr	r1, [pc, #32]	; (8004794 <UARTEx_SetNbDataToProcess+0x98>)
 8004774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004776:	fb93 f3f2 	sdiv	r3, r3, r2
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	08005f30 	.word	0x08005f30
 8004794:	08005f38 	.word	0x08005f38

08004798 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80047a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80047b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80047b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80047c0:	e000      	b.n	80047c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80047c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80047c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f9      	beq.n	80047c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80047ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80047d8:	687b      	ldr	r3, [r7, #4]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Define our interrupt handlers
// Handler for button interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d118      	bne.n	800482c <HAL_GPIO_EXTI_Callback+0x44>
		note_selector = (note_selector + 1)%3; // cycle through three notes
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_GPIO_EXTI_Callback+0x4c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_GPIO_EXTI_Callback+0x50>)
 8004802:	fb83 3201 	smull	r3, r2, r3, r1
 8004806:	17cb      	asrs	r3, r1, #31
 8004808:	1ad2      	subs	r2, r2, r3
 800480a:	4613      	mov	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4413      	add	r3, r2
 8004810:	1aca      	subs	r2, r1, r3
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004814:	601a      	str	r2, [r3, #0]
		change_note = 1; // raise flag so we know to change the note
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_GPIO_EXTI_Callback+0x54>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(myLed_GPIO_Port, myLed_Pin); // toggle LED as user feedback for a successful button press
 800481c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004820:	4807      	ldr	r0, [pc, #28]	; (8004840 <HAL_GPIO_EXTI_Callback+0x58>)
 8004822:	f7fd f813 	bl	800184c <HAL_GPIO_TogglePin>
		printf("Need to change note\n");
 8004826:	4807      	ldr	r0, [pc, #28]	; (8004844 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004828:	f000 feba 	bl	80055a0 <puts>

	}
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000214 	.word	0x20000214
 8004838:	55555556 	.word	0x55555556
 800483c:	20000a28 	.word	0x20000a28
 8004840:	48000400 	.word	0x48000400
 8004844:	08005ed8 	.word	0x08005ed8

08004848 <HAL_DAC_ConvCpltCallbackCh1>:
//		note_data_index = (note_data_index + 1) % 15;
//	}
//}

// DMA
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	printf("Interrupt\n");
 8004850:	4834      	ldr	r0, [pc, #208]	; (8004924 <HAL_DAC_ConvCpltCallbackCh1+0xdc>)
 8004852:	f000 fea5 	bl	80055a0 <puts>
	if (change_note) {
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d05e      	beq.n	800491c <HAL_DAC_ConvCpltCallbackCh1+0xd4>
		if (note_selector == 0) { // C6
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d119      	bne.n	800489a <HAL_DAC_ConvCpltCallbackCh1+0x52>
			for (int i = 0; i < 924; i++) {
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e011      	b.n	8004890 <HAL_DAC_ConvCpltCallbackCh1+0x48>
				note_data[i] = C6_data[i%C6_size];
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fb93 f1f2 	sdiv	r1, r3, r2
 8004876:	fb01 f202 	mul.w	r2, r1, r2
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 800487e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004882:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 924; i++) {
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3301      	adds	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 8004896:	dbe9      	blt.n	800486c <HAL_DAC_ConvCpltCallbackCh1+0x24>
 8004898:	e03a      	b.n	8004910 <HAL_DAC_ConvCpltCallbackCh1+0xc8>
			}
		} else if (note_selector == 1) { // E6
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d119      	bne.n	80048d6 <HAL_DAC_ConvCpltCallbackCh1+0x8e>
			for (int i = 0; i < 924; i++) {
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e011      	b.n	80048cc <HAL_DAC_ConvCpltCallbackCh1+0x84>
				note_data[i] = E6_data[i%E6_size];
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80048b2:	fb01 f202 	mul.w	r2, r1, r2
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 80048ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 924; i++) {
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 80048d2:	dbe9      	blt.n	80048a8 <HAL_DAC_ConvCpltCallbackCh1+0x60>
 80048d4:	e01c      	b.n	8004910 <HAL_DAC_ConvCpltCallbackCh1+0xc8>
			}
		} else if (note_selector == 2) { // G6
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d118      	bne.n	8004910 <HAL_DAC_ConvCpltCallbackCh1+0xc8>
			for (int i = 0; i < 924; i++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e011      	b.n	8004908 <HAL_DAC_ConvCpltCallbackCh1+0xc0>
				note_data[i] = G6_data[i%G6_size];
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80048ee:	fb01 f202 	mul.w	r2, r1, r2
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_DAC_ConvCpltCallbackCh1+0x100>)
 80048f6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 924; i++) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 800490e:	dbe9      	blt.n	80048e4 <HAL_DAC_ConvCpltCallbackCh1+0x9c>
			}
		}
		change_note = 0; // reset this flag so we know we don't need to change the note
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
		printf("Note Changed\n");
 8004916:	480d      	ldr	r0, [pc, #52]	; (800494c <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8004918:	f000 fe42 	bl	80055a0 <puts>
	}
}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	08005eec 	.word	0x08005eec
 8004928:	20000a28 	.word	0x20000a28
 800492c:	20000214 	.word	0x20000214
 8004930:	20000008 	.word	0x20000008
 8004934:	20000954 	.word	0x20000954
 8004938:	20000218 	.word	0x20000218
 800493c:	2000000c 	.word	0x2000000c
 8004940:	200009ac 	.word	0x200009ac
 8004944:	20000010 	.word	0x20000010
 8004948:	200009f0 	.word	0x200009f0
 800494c:	08005ef8 	.word	0x08005ef8

08004950 <_write>:

// for printf
int _write(int file, char *ptr, int len) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e009      	b.n	8004976 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	60ba      	str	r2, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff14 	bl	8004798 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	dbf1      	blt.n	8004962 <_write+0x12>
	}
	return len;
 800497e:	687b      	ldr	r3, [r7, #4]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	note_selector = 0; // [0, 2] to indicate if the note that should be played is C6 E6 or G6 respectively
 800498e:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <main+0x1cc>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
	note_data_index = 0; // index of above array to indicate which piece of data we are on
 8004994:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <main+0x1d0>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]


	sine_wave_index = 0; //[0, 43] 44.1 kHz sample rate, 1kHz desired sine wave, so one period every 44 samples
 800499a:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <main+0x1d4>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049a0:	f7fb fdae 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049a4:	f000 f8f6 	bl	8004b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049a8:	f000 fa4c 	bl	8004e44 <MX_GPIO_Init>
  MX_DMA_Init();
 80049ac:	f000 fa20 	bl	8004df0 <MX_DMA_Init>
  MX_DAC1_Init();
 80049b0:	f000 f942 	bl	8004c38 <MX_DAC1_Init>
  MX_TIM2_Init();
 80049b4:	f000 f982 	bl	8004cbc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80049b8:	f000 f9ce 	bl	8004d58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize DAC
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
 80049bc:	2200      	movs	r2, #0
 80049be:	4968      	ldr	r1, [pc, #416]	; (8004b60 <main+0x1d8>)
 80049c0:	4868      	ldr	r0, [pc, #416]	; (8004b64 <main+0x1dc>)
 80049c2:	f7fc f9dd 	bl	8000d80 <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_2);//from part 1
 80049c6:	2210      	movs	r2, #16
 80049c8:	4965      	ldr	r1, [pc, #404]	; (8004b60 <main+0x1d8>)
 80049ca:	4866      	ldr	r0, [pc, #408]	; (8004b64 <main+0x1dc>)
 80049cc:	f7fc f9d8 	bl	8000d80 <HAL_DACEx_SelfCalibrate>


  // Start DAC and timer
  //HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
  //HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);//from part 1
  HAL_TIM_Base_Start_IT(&htim2); //Start the timer in interrupt mode
 80049d0:	4865      	ldr	r0, [pc, #404]	; (8004b68 <main+0x1e0>)
 80049d2:	f7fe fc79 	bl	80032c8 <HAL_TIM_Base_Start_IT>
//  printf("Sine array made.\n");



  // make notes
  for (int i = 0; i < C6_size; i++) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e02a      	b.n	8004a32 <main+0xaa>
	  C6_data[i] = (arm_sin_f32(2*PI*i/C6_size)+1)*(1365); //1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004b6c <main+0x1e4>
 80049ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ee:	4b60      	ldr	r3, [pc, #384]	; (8004b70 <main+0x1e8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049fe:	eeb0 0a66 	vmov.f32	s0, s13
 8004a02:	f000 fce7 	bl	80053d4 <arm_sin_f32>
 8004a06:	eef0 7a40 	vmov.f32	s15, s0
 8004a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a12:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004b74 <main+0x1ec>
 8004a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1e:	ee17 3a90 	vmov	r3, s15
 8004a22:	b299      	uxth	r1, r3
 8004a24:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <main+0x1f0>)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < C6_size; i++) {
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <main+0x1e8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dbcf      	blt.n	80049dc <main+0x54>
  }
  for (int i = 0; i < E6_size; i++) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	e02a      	b.n	8004a98 <main+0x110>
  	  E6_data[i] = (arm_sin_f32(2*PI*i/E6_size)+1)*(1365);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004b6c <main+0x1e4>
 8004a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a54:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <main+0x1f4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a64:	eeb0 0a66 	vmov.f32	s0, s13
 8004a68:	f000 fcb4 	bl	80053d4 <arm_sin_f32>
 8004a6c:	eef0 7a40 	vmov.f32	s15, s0
 8004a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a78:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004b74 <main+0x1ec>
 8004a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a84:	ee17 3a90 	vmov	r3, s15
 8004a88:	b299      	uxth	r1, r3
 8004a8a:	4a3d      	ldr	r2, [pc, #244]	; (8004b80 <main+0x1f8>)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < E6_size; i++) {
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <main+0x1f4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	dbcf      	blt.n	8004a42 <main+0xba>
  }
  for (int i = 0; i < G6_size; i++) {
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	e02a      	b.n	8004afe <main+0x176>
  	  G6_data[i] = (arm_sin_f32(2*PI*i/G6_size)+1)*(1365);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004b6c <main+0x1e4>
 8004ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aba:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <main+0x1fc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004aca:	eeb0 0a66 	vmov.f32	s0, s13
 8004ace:	f000 fc81 	bl	80053d4 <arm_sin_f32>
 8004ad2:	eef0 7a40 	vmov.f32	s15, s0
 8004ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ade:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004b74 <main+0x1ec>
 8004ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aea:	ee17 3a90 	vmov	r3, s15
 8004aee:	b299      	uxth	r1, r3
 8004af0:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <main+0x200>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < G6_size; i++) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3301      	adds	r3, #1
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <main+0x1fc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	dbcf      	blt.n	8004aa8 <main+0x120>
  }



  // initialize note_data for C6 to start
    for (int i = 0; i < 924; i++) {
 8004b08:	2300      	movs	r3, #0
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	e011      	b.n	8004b32 <main+0x1aa>
  	  note_data[i] = C6_data[i%C6_size];
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <main+0x1e8>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8004b18:	fb01 f202 	mul.w	r2, r1, r2
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <main+0x1f0>)
 8004b20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <main+0x204>)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 924; i++) {
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 8004b38:	dbe9      	blt.n	8004b0e <main+0x186>
    }
  // Start DAC with DMA
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)note_data, (uint32_t) 924, DAC_ALIGN_12B_R);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f44f 7367 	mov.w	r3, #924	; 0x39c
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <main+0x204>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	4807      	ldr	r0, [pc, #28]	; (8004b64 <main+0x1dc>)
 8004b48:	f7fb fea6 	bl	8000898 <HAL_DAC_Start_DMA>



  printf("Program started\n");
 8004b4c:	4810      	ldr	r0, [pc, #64]	; (8004b90 <main+0x208>)
 8004b4e:	f000 fd27 	bl	80055a0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <main+0x1ca>
 8004b54:	20000214 	.word	0x20000214
 8004b58:	20000950 	.word	0x20000950
 8004b5c:	20000a2c 	.word	0x20000a2c
 8004b60:	200001ec 	.word	0x200001ec
 8004b64:	2000009c 	.word	0x2000009c
 8004b68:	20000110 	.word	0x20000110
 8004b6c:	40c90fdb 	.word	0x40c90fdb
 8004b70:	20000008 	.word	0x20000008
 8004b74:	44aaa000 	.word	0x44aaa000
 8004b78:	20000954 	.word	0x20000954
 8004b7c:	2000000c 	.word	0x2000000c
 8004b80:	200009ac 	.word	0x200009ac
 8004b84:	20000010 	.word	0x20000010
 8004b88:	200009f0 	.word	0x200009f0
 8004b8c:	20000218 	.word	0x20000218
 8004b90:	08005f08 	.word	0x08005f08

08004b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b096      	sub	sp, #88	; 0x58
 8004b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	2244      	movs	r2, #68	; 0x44
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fc86 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ba8:	463b      	mov	r3, r7
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fc fe9a 	bl	80018f0 <HAL_PWREx_ControlVoltageScaling>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004bc2:	f000 f9c1 	bl	8004f48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004bd2:	2360      	movs	r3, #96	; 0x60
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004be2:	233c      	movs	r3, #60	; 0x3c
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004be6:	2302      	movs	r3, #2
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bea:	2302      	movs	r3, #2
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc ff1e 	bl	8001a38 <HAL_RCC_OscConfig>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004c02:	f000 f9a1 	bl	8004f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c06:	230f      	movs	r3, #15
 8004c08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	2105      	movs	r1, #5
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fd fb24 	bl	800226c <HAL_RCC_ClockConfig>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004c2a:	f000 f98d 	bl	8004f48 <Error_Handler>
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3758      	adds	r7, #88	; 0x58
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004c3e:	463b      	mov	r3, r7
 8004c40:	2228      	movs	r2, #40	; 0x28
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fc35 	bl	80054b4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <MX_DAC1_Init+0x7c>)
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <MX_DAC1_Init+0x80>)
 8004c4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004c50:	4818      	ldr	r0, [pc, #96]	; (8004cb4 <MX_DAC1_Init+0x7c>)
 8004c52:	f7fb fdfe 	bl	8000852 <HAL_DAC_Init>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004c5c:	f000 f974 	bl	8004f48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004c64:	230a      	movs	r3, #10
 8004c66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <MX_DAC1_Init+0x7c>)
 8004c82:	f7fb fee9 	bl	8000a58 <HAL_DAC_ConfigChannel>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8004c8c:	f000 f95c 	bl	8004f48 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004c94:	463b      	mov	r3, r7
 8004c96:	2210      	movs	r2, #16
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <MX_DAC1_Init+0x7c>)
 8004c9c:	f7fb fedc 	bl	8000a58 <HAL_DAC_ConfigChannel>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8004ca6:	f000 f94f 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004caa:	bf00      	nop
 8004cac:	3728      	adds	r7, #40	; 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000009c 	.word	0x2000009c
 8004cb8:	40007400 	.word	0x40007400

08004cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cc2:	f107 0310 	add.w	r3, r7, #16
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8004cee:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004cf0:	f240 7216 	movw	r2, #1814	; 0x716
 8004cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d02:	4814      	ldr	r0, [pc, #80]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004d04:	f7fe fa88 	bl	8003218 <HAL_TIM_Base_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d0e:	f000 f91b 	bl	8004f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	480d      	ldr	r0, [pc, #52]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004d20:	f7fe fc61 	bl	80035e6 <HAL_TIM_ConfigClockSource>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004d2a:	f000 f90d 	bl	8004f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4806      	ldr	r0, [pc, #24]	; (8004d54 <MX_TIM2_Init+0x98>)
 8004d3c:	f7fe fe82 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004d46:	f000 f8ff 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d4a:	bf00      	nop
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000110 	.word	0x20000110

08004d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d5e:	4a23      	ldr	r2, [pc, #140]	; (8004dec <MX_USART2_UART_Init+0x94>)
 8004d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d62:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d7e:	220c      	movs	r2, #12
 8004d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d88:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004da0:	4811      	ldr	r0, [pc, #68]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004da2:	f7fe fef5 	bl	8003b90 <HAL_UART_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004dac:	f000 f8cc 	bl	8004f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004db0:	2100      	movs	r1, #0
 8004db2:	480d      	ldr	r0, [pc, #52]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004db4:	f7ff fc26 	bl	8004604 <HAL_UARTEx_SetTxFifoThreshold>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004dbe:	f000 f8c3 	bl	8004f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4808      	ldr	r0, [pc, #32]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004dc6:	f7ff fc5b 	bl	8004680 <HAL_UARTEx_SetRxFifoThreshold>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004dd0:	f000 f8ba 	bl	8004f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004dd4:	4804      	ldr	r0, [pc, #16]	; (8004de8 <MX_USART2_UART_Init+0x90>)
 8004dd6:	f7ff fbdc 	bl	8004592 <HAL_UARTEx_DisableFifoMode>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004de0:	f000 f8b2 	bl	8004f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	2000015c 	.word	0x2000015c
 8004dec:	40004400 	.word	0x40004400

08004df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <MX_DMA_Init+0x50>)
 8004df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <MX_DMA_Init+0x50>)
 8004dfc:	f043 0304 	orr.w	r3, r3, #4
 8004e00:	6493      	str	r3, [r2, #72]	; 0x48
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <MX_DMA_Init+0x50>)
 8004e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <MX_DMA_Init+0x50>)
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	4a0b      	ldr	r2, [pc, #44]	; (8004e40 <MX_DMA_Init+0x50>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	6493      	str	r3, [r2, #72]	; 0x48
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <MX_DMA_Init+0x50>)
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	200b      	movs	r0, #11
 8004e2c:	f7fb fcdb 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e30:	200b      	movs	r0, #11
 8004e32:	f7fb fcf4 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000

08004e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4a:	f107 0314 	add.w	r3, r7, #20
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5a:	4b38      	ldr	r3, [pc, #224]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	4a37      	ldr	r2, [pc, #220]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e66:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ea2:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004ea8:	f043 0308 	orr.w	r3, r3, #8
 8004eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eae:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <MX_GPIO_Init+0xf8>)
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ec0:	481f      	ldr	r0, [pc, #124]	; (8004f40 <MX_GPIO_Init+0xfc>)
 8004ec2:	f7fc fcab 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8004ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ecc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	4619      	mov	r1, r3
 8004edc:	4819      	ldr	r0, [pc, #100]	; (8004f44 <MX_GPIO_Init+0x100>)
 8004ede:	f7fc fb0b 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	4619      	mov	r1, r3
 8004efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f00:	f7fc fafa 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8004f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f12:	2300      	movs	r3, #0
 8004f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4808      	ldr	r0, [pc, #32]	; (8004f40 <MX_GPIO_Init+0xfc>)
 8004f1e:	f7fc faeb 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2028      	movs	r0, #40	; 0x28
 8004f28:	f7fb fc5d 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004f2c:	2028      	movs	r0, #40	; 0x28
 8004f2e:	f7fb fc76 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8004f32:	bf00      	nop
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	48000400 	.word	0x48000400
 8004f44:	48000800 	.word	0x48000800

08004f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004f4c:	b672      	cpsid	i
}
 8004f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f50:	e7fe      	b.n	8004f50 <Error_Handler+0x8>
	...

08004f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_MspInit+0x44>)
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <HAL_MspInit+0x44>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6613      	str	r3, [r2, #96]	; 0x60
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_MspInit+0x44>)
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_MspInit+0x44>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_MspInit+0x44>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_MspInit+0x44>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <HAL_DAC_MspInit+0xcc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d14f      	bne.n	800505e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b28      	ldr	r3, [pc, #160]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	4b25      	ldr	r3, [pc, #148]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4a24      	ldr	r2, [pc, #144]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_DAC_MspInit+0xd0>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004fee:	2330      	movs	r3, #48	; 0x30
 8004ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffa:	f107 0314 	add.w	r3, r7, #20
 8004ffe:	4619      	mov	r1, r3
 8005000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005004:	f7fc fa78 	bl	80014f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <HAL_DAC_MspInit+0xd8>)
 800500c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005010:	2206      	movs	r2, #6
 8005012:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005016:	2210      	movs	r2, #16
 8005018:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 800501c:	2200      	movs	r2, #0
 800501e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800502c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005034:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005036:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005038:	2220      	movs	r2, #32
 800503a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 800503e:	2200      	movs	r2, #0
 8005040:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005042:	480b      	ldr	r0, [pc, #44]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005044:	f7fb ffe6 	bl	8001014 <HAL_DMA_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800504e:	f7ff ff7b 	bl	8004f48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a06      	ldr	r2, [pc, #24]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	4a05      	ldr	r2, [pc, #20]	; (8005070 <HAL_DAC_MspInit+0xd4>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800505e:	bf00      	nop
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40007400 	.word	0x40007400
 800506c:	40021000 	.word	0x40021000
 8005070:	200000b0 	.word	0x200000b0
 8005074:	40020008 	.word	0x40020008

08005078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d113      	bne.n	80050b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_TIM_Base_MspInit+0x44>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <HAL_TIM_Base_MspInit+0x44>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6593      	str	r3, [r2, #88]	; 0x58
 8005096:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_TIM_Base_MspInit+0x44>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	201c      	movs	r0, #28
 80050a8:	f7fb fb9d 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050ac:	201c      	movs	r0, #28
 80050ae:	f7fb fbb6 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000

080050c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0b0      	sub	sp, #192	; 0xc0
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050d8:	f107 0318 	add.w	r3, r7, #24
 80050dc:	2294      	movs	r2, #148	; 0x94
 80050de:	2100      	movs	r1, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 f9e7 	bl	80054b4 <memset>
  if(huart->Instance==USART2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <HAL_UART_MspInit+0xf4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d15d      	bne.n	80051ac <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80050f0:	2302      	movs	r3, #2
 80050f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80050f4:	2300      	movs	r3, #0
 80050f6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050f8:	f107 0318 	add.w	r3, r7, #24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fd fb73 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005108:	f7ff ff1e 	bl	8004f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800510c:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 8005112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005116:	6593      	str	r3, [r2, #88]	; 0x58
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005124:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005130:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800513c:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 8005142:	f043 0308 	orr.w	r3, r3, #8
 8005146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_UART_MspInit+0xf8>)
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005168:	2303      	movs	r3, #3
 800516a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800516e:	2303      	movs	r3, #3
 8005170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005174:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005178:	4619      	mov	r1, r3
 800517a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800517e:	f7fc f9bb 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005182:	2320      	movs	r3, #32
 8005184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2302      	movs	r3, #2
 800518a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005194:	2303      	movs	r3, #3
 8005196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800519a:	2307      	movs	r3, #7
 800519c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80051a4:	4619      	mov	r1, r3
 80051a6:	4805      	ldr	r0, [pc, #20]	; (80051bc <HAL_UART_MspInit+0xfc>)
 80051a8:	f7fc f9a6 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051ac:	bf00      	nop
 80051ae:	37c0      	adds	r7, #192	; 0xc0
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40004400 	.word	0x40004400
 80051b8:	40021000 	.word	0x40021000
 80051bc:	48000c00 	.word	0x48000c00

080051c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051c4:	e7fe      	b.n	80051c4 <NMI_Handler+0x4>

080051c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051c6:	b480      	push	{r7}
 80051c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ca:	e7fe      	b.n	80051ca <HardFault_Handler+0x4>

080051cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d0:	e7fe      	b.n	80051d0 <MemManage_Handler+0x4>

080051d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051d2:	b480      	push	{r7}
 80051d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d6:	e7fe      	b.n	80051d6 <BusFault_Handler+0x4>

080051d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051dc:	e7fe      	b.n	80051dc <UsageFault_Handler+0x4>

080051de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800520c:	f7fb f9cc 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}

08005214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <DMA1_Channel1_IRQHandler+0x10>)
 800521a:	f7fc f81e 	bl	800125a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200000b0 	.word	0x200000b0

08005228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <TIM2_IRQHandler+0x10>)
 800522e:	f7fe f8bb 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000110 	.word	0x20000110

0800523c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 8005240:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005244:	f7fc fb1c 	bl	8001880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005248:	bf00      	nop
 800524a:	bd80      	pop	{r7, pc}

0800524c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e00a      	b.n	8005274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800525e:	f3af 8000 	nop.w
 8005262:	4601      	mov	r1, r0
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	60ba      	str	r2, [r7, #8]
 800526a:	b2ca      	uxtb	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3301      	adds	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	dbf0      	blt.n	800525e <_read+0x12>
  }

  return len;
 800527c:	687b      	ldr	r3, [r7, #4]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052ae:	605a      	str	r2, [r3, #4]
  return 0;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_isatty>:

int _isatty(int file)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052c6:	2301      	movs	r3, #1
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <_sbrk+0x5c>)
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <_sbrk+0x60>)
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <_sbrk+0x64>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <_sbrk+0x64>)
 800530e:	4a12      	ldr	r2, [pc, #72]	; (8005358 <_sbrk+0x68>)
 8005310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <_sbrk+0x64>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005320:	f000 f89e 	bl	8005460 <__errno>
 8005324:	4603      	mov	r3, r0
 8005326:	220c      	movs	r2, #12
 8005328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800532e:	e009      	b.n	8005344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <_sbrk+0x64>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <_sbrk+0x64>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	4a05      	ldr	r2, [pc, #20]	; (8005354 <_sbrk+0x64>)
 8005340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	200a0000 	.word	0x200a0000
 8005350:	00000400 	.word	0x00000400
 8005354:	20000a30 	.word	0x20000a30
 8005358:	20000a48 	.word	0x20000a48

0800535c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <SystemInit+0x20>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	4a05      	ldr	r2, [pc, #20]	; (800537c <SystemInit+0x20>)
 8005368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800536c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005384:	f7ff ffea 	bl	800535c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <LoopForever+0x6>)
  ldr r1, =_edata
 800538a:	490d      	ldr	r1, [pc, #52]	; (80053c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <LoopForever+0xe>)
  movs r3, #0
 800538e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005390:	e002      	b.n	8005398 <LoopCopyDataInit>

08005392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005396:	3304      	adds	r3, #4

08005398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800539a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800539c:	d3f9      	bcc.n	8005392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053a0:	4c0a      	ldr	r4, [pc, #40]	; (80053cc <LoopForever+0x16>)
  movs r3, #0
 80053a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053a4:	e001      	b.n	80053aa <LoopFillZerobss>

080053a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053a8:	3204      	adds	r2, #4

080053aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053ac:	d3fb      	bcc.n	80053a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053ae:	f000 f85d 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053b2:	f7ff fae9 	bl	8004988 <main>

080053b6 <LoopForever>:

LoopForever:
    b LoopForever
 80053b6:	e7fe      	b.n	80053b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80053b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80053bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80053c4:	08006800 	.word	0x08006800
  ldr r2, =_sbss
 80053c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80053cc:	20000a44 	.word	0x20000a44

080053d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053d0:	e7fe      	b.n	80053d0 <ADC1_IRQHandler>
	...

080053d4 <arm_sin_f32>:
 80053d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005454 <arm_sin_f32+0x80>
 80053d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80053dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80053e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053e8:	d504      	bpl.n	80053f4 <arm_sin_f32+0x20>
 80053ea:	ee17 3a90 	vmov	r3, s15
 80053ee:	3b01      	subs	r3, #1
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005458 <arm_sin_f32+0x84>
 80053fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005400:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005404:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005408:	ee17 3a90 	vmov	r3, s15
 800540c:	b29b      	uxth	r3, r3
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d21a      	bcs.n	800544a <arm_sin_f32+0x76>
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541c:	1c59      	adds	r1, r3, #1
 800541e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <arm_sin_f32+0x88>)
 8005424:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800542c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005430:	ed93 7a00 	vldr	s14, [r3]
 8005434:	edd2 6a00 	vldr	s13, [r2]
 8005438:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800543c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005444:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005448:	4770      	bx	lr
 800544a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800544e:	2101      	movs	r1, #1
 8005450:	2300      	movs	r3, #0
 8005452:	e7e6      	b.n	8005422 <arm_sin_f32+0x4e>
 8005454:	3e22f983 	.word	0x3e22f983
 8005458:	44000000 	.word	0x44000000
 800545c:	08005f88 	.word	0x08005f88

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000018 	.word	0x20000018

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 fd1e 	bl	8005ec0 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	080067f8 	.word	0x080067f8
 80054a8:	080067f8 	.word	0x080067f8
 80054ac:	080067f8 	.word	0x080067f8
 80054b0:	080067fc 	.word	0x080067fc

080054b4 <memset>:
 80054b4:	4402      	add	r2, r0
 80054b6:	4603      	mov	r3, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <_puts_r>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	460e      	mov	r6, r1
 80054c8:	4605      	mov	r5, r0
 80054ca:	b118      	cbz	r0, 80054d4 <_puts_r+0x10>
 80054cc:	6983      	ldr	r3, [r0, #24]
 80054ce:	b90b      	cbnz	r3, 80054d4 <_puts_r+0x10>
 80054d0:	f000 fa48 	bl	8005964 <__sinit>
 80054d4:	69ab      	ldr	r3, [r5, #24]
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	b913      	cbnz	r3, 80054e0 <_puts_r+0x1c>
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fa42 	bl	8005964 <__sinit>
 80054e0:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <_puts_r+0xd0>)
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d120      	bne.n	8005528 <_puts_r+0x64>
 80054e6:	686c      	ldr	r4, [r5, #4]
 80054e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ea:	07db      	lsls	r3, r3, #31
 80054ec:	d405      	bmi.n	80054fa <_puts_r+0x36>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	0598      	lsls	r0, r3, #22
 80054f2:	d402      	bmi.n	80054fa <_puts_r+0x36>
 80054f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054f6:	f000 fad3 	bl	8005aa0 <__retarget_lock_acquire_recursive>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	0719      	lsls	r1, r3, #28
 80054fe:	d51d      	bpl.n	800553c <_puts_r+0x78>
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	b1db      	cbz	r3, 800553c <_puts_r+0x78>
 8005504:	3e01      	subs	r6, #1
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800550c:	3b01      	subs	r3, #1
 800550e:	60a3      	str	r3, [r4, #8]
 8005510:	bb39      	cbnz	r1, 8005562 <_puts_r+0x9e>
 8005512:	2b00      	cmp	r3, #0
 8005514:	da38      	bge.n	8005588 <_puts_r+0xc4>
 8005516:	4622      	mov	r2, r4
 8005518:	210a      	movs	r1, #10
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f848 	bl	80055b0 <__swbuf_r>
 8005520:	3001      	adds	r0, #1
 8005522:	d011      	beq.n	8005548 <_puts_r+0x84>
 8005524:	250a      	movs	r5, #10
 8005526:	e011      	b.n	800554c <_puts_r+0x88>
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <_puts_r+0xd4>)
 800552a:	429c      	cmp	r4, r3
 800552c:	d101      	bne.n	8005532 <_puts_r+0x6e>
 800552e:	68ac      	ldr	r4, [r5, #8]
 8005530:	e7da      	b.n	80054e8 <_puts_r+0x24>
 8005532:	4b1a      	ldr	r3, [pc, #104]	; (800559c <_puts_r+0xd8>)
 8005534:	429c      	cmp	r4, r3
 8005536:	bf08      	it	eq
 8005538:	68ec      	ldreq	r4, [r5, #12]
 800553a:	e7d5      	b.n	80054e8 <_puts_r+0x24>
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f888 	bl	8005654 <__swsetup_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	d0dd      	beq.n	8005504 <_puts_r+0x40>
 8005548:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800554c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800554e:	07da      	lsls	r2, r3, #31
 8005550:	d405      	bmi.n	800555e <_puts_r+0x9a>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	059b      	lsls	r3, r3, #22
 8005556:	d402      	bmi.n	800555e <_puts_r+0x9a>
 8005558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555a:	f000 faa2 	bl	8005aa2 <__retarget_lock_release_recursive>
 800555e:	4628      	mov	r0, r5
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	2b00      	cmp	r3, #0
 8005564:	da04      	bge.n	8005570 <_puts_r+0xac>
 8005566:	69a2      	ldr	r2, [r4, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	dc06      	bgt.n	800557a <_puts_r+0xb6>
 800556c:	290a      	cmp	r1, #10
 800556e:	d004      	beq.n	800557a <_puts_r+0xb6>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	6022      	str	r2, [r4, #0]
 8005576:	7019      	strb	r1, [r3, #0]
 8005578:	e7c5      	b.n	8005506 <_puts_r+0x42>
 800557a:	4622      	mov	r2, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f817 	bl	80055b0 <__swbuf_r>
 8005582:	3001      	adds	r0, #1
 8005584:	d1bf      	bne.n	8005506 <_puts_r+0x42>
 8005586:	e7df      	b.n	8005548 <_puts_r+0x84>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	250a      	movs	r5, #10
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	701d      	strb	r5, [r3, #0]
 8005592:	e7db      	b.n	800554c <_puts_r+0x88>
 8005594:	080067b0 	.word	0x080067b0
 8005598:	080067d0 	.word	0x080067d0
 800559c:	08006790 	.word	0x08006790

080055a0 <puts>:
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <puts+0xc>)
 80055a2:	4601      	mov	r1, r0
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f7ff bf8d 	b.w	80054c4 <_puts_r>
 80055aa:	bf00      	nop
 80055ac:	20000018 	.word	0x20000018

080055b0 <__swbuf_r>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	460e      	mov	r6, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	4605      	mov	r5, r0
 80055b8:	b118      	cbz	r0, 80055c2 <__swbuf_r+0x12>
 80055ba:	6983      	ldr	r3, [r0, #24]
 80055bc:	b90b      	cbnz	r3, 80055c2 <__swbuf_r+0x12>
 80055be:	f000 f9d1 	bl	8005964 <__sinit>
 80055c2:	4b21      	ldr	r3, [pc, #132]	; (8005648 <__swbuf_r+0x98>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	d12b      	bne.n	8005620 <__swbuf_r+0x70>
 80055c8:	686c      	ldr	r4, [r5, #4]
 80055ca:	69a3      	ldr	r3, [r4, #24]
 80055cc:	60a3      	str	r3, [r4, #8]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	071a      	lsls	r2, r3, #28
 80055d2:	d52f      	bpl.n	8005634 <__swbuf_r+0x84>
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	b36b      	cbz	r3, 8005634 <__swbuf_r+0x84>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	1ac0      	subs	r0, r0, r3
 80055de:	6963      	ldr	r3, [r4, #20]
 80055e0:	b2f6      	uxtb	r6, r6
 80055e2:	4283      	cmp	r3, r0
 80055e4:	4637      	mov	r7, r6
 80055e6:	dc04      	bgt.n	80055f2 <__swbuf_r+0x42>
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f926 	bl	800583c <_fflush_r>
 80055f0:	bb30      	cbnz	r0, 8005640 <__swbuf_r+0x90>
 80055f2:	68a3      	ldr	r3, [r4, #8]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60a3      	str	r3, [r4, #8]
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	6022      	str	r2, [r4, #0]
 80055fe:	701e      	strb	r6, [r3, #0]
 8005600:	6963      	ldr	r3, [r4, #20]
 8005602:	3001      	adds	r0, #1
 8005604:	4283      	cmp	r3, r0
 8005606:	d004      	beq.n	8005612 <__swbuf_r+0x62>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	07db      	lsls	r3, r3, #31
 800560c:	d506      	bpl.n	800561c <__swbuf_r+0x6c>
 800560e:	2e0a      	cmp	r6, #10
 8005610:	d104      	bne.n	800561c <__swbuf_r+0x6c>
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f911 	bl	800583c <_fflush_r>
 800561a:	b988      	cbnz	r0, 8005640 <__swbuf_r+0x90>
 800561c:	4638      	mov	r0, r7
 800561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <__swbuf_r+0x9c>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d101      	bne.n	800562a <__swbuf_r+0x7a>
 8005626:	68ac      	ldr	r4, [r5, #8]
 8005628:	e7cf      	b.n	80055ca <__swbuf_r+0x1a>
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <__swbuf_r+0xa0>)
 800562c:	429c      	cmp	r4, r3
 800562e:	bf08      	it	eq
 8005630:	68ec      	ldreq	r4, [r5, #12]
 8005632:	e7ca      	b.n	80055ca <__swbuf_r+0x1a>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f000 f80c 	bl	8005654 <__swsetup_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d0cb      	beq.n	80055d8 <__swbuf_r+0x28>
 8005640:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005644:	e7ea      	b.n	800561c <__swbuf_r+0x6c>
 8005646:	bf00      	nop
 8005648:	080067b0 	.word	0x080067b0
 800564c:	080067d0 	.word	0x080067d0
 8005650:	08006790 	.word	0x08006790

08005654 <__swsetup_r>:
 8005654:	4b32      	ldr	r3, [pc, #200]	; (8005720 <__swsetup_r+0xcc>)
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	681d      	ldr	r5, [r3, #0]
 800565a:	4606      	mov	r6, r0
 800565c:	460c      	mov	r4, r1
 800565e:	b125      	cbz	r5, 800566a <__swsetup_r+0x16>
 8005660:	69ab      	ldr	r3, [r5, #24]
 8005662:	b913      	cbnz	r3, 800566a <__swsetup_r+0x16>
 8005664:	4628      	mov	r0, r5
 8005666:	f000 f97d 	bl	8005964 <__sinit>
 800566a:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <__swsetup_r+0xd0>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d10f      	bne.n	8005690 <__swsetup_r+0x3c>
 8005670:	686c      	ldr	r4, [r5, #4]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005678:	0719      	lsls	r1, r3, #28
 800567a:	d42c      	bmi.n	80056d6 <__swsetup_r+0x82>
 800567c:	06dd      	lsls	r5, r3, #27
 800567e:	d411      	bmi.n	80056a4 <__swsetup_r+0x50>
 8005680:	2309      	movs	r3, #9
 8005682:	6033      	str	r3, [r6, #0]
 8005684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568e:	e03e      	b.n	800570e <__swsetup_r+0xba>
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <__swsetup_r+0xd4>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d101      	bne.n	800569a <__swsetup_r+0x46>
 8005696:	68ac      	ldr	r4, [r5, #8]
 8005698:	e7eb      	b.n	8005672 <__swsetup_r+0x1e>
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <__swsetup_r+0xd8>)
 800569c:	429c      	cmp	r4, r3
 800569e:	bf08      	it	eq
 80056a0:	68ec      	ldreq	r4, [r5, #12]
 80056a2:	e7e6      	b.n	8005672 <__swsetup_r+0x1e>
 80056a4:	0758      	lsls	r0, r3, #29
 80056a6:	d512      	bpl.n	80056ce <__swsetup_r+0x7a>
 80056a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056aa:	b141      	cbz	r1, 80056be <__swsetup_r+0x6a>
 80056ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <__swsetup_r+0x66>
 80056b4:	4630      	mov	r0, r6
 80056b6:	f000 fa5b 	bl	8005b70 <_free_r>
 80056ba:	2300      	movs	r3, #0
 80056bc:	6363      	str	r3, [r4, #52]	; 0x34
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	2300      	movs	r3, #0
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f043 0308 	orr.w	r3, r3, #8
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	b94b      	cbnz	r3, 80056ee <__swsetup_r+0x9a>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e4:	d003      	beq.n	80056ee <__swsetup_r+0x9a>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 fa01 	bl	8005af0 <__smakebuf_r>
 80056ee:	89a0      	ldrh	r0, [r4, #12]
 80056f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056f4:	f010 0301 	ands.w	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <__swsetup_r+0xbc>
 80056fa:	2300      	movs	r3, #0
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	425b      	negs	r3, r3
 8005702:	61a3      	str	r3, [r4, #24]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	b943      	cbnz	r3, 800571a <__swsetup_r+0xc6>
 8005708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800570c:	d1ba      	bne.n	8005684 <__swsetup_r+0x30>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	0781      	lsls	r1, r0, #30
 8005712:	bf58      	it	pl
 8005714:	6963      	ldrpl	r3, [r4, #20]
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	e7f4      	b.n	8005704 <__swsetup_r+0xb0>
 800571a:	2000      	movs	r0, #0
 800571c:	e7f7      	b.n	800570e <__swsetup_r+0xba>
 800571e:	bf00      	nop
 8005720:	20000018 	.word	0x20000018
 8005724:	080067b0 	.word	0x080067b0
 8005728:	080067d0 	.word	0x080067d0
 800572c:	08006790 	.word	0x08006790

08005730 <__sflush_r>:
 8005730:	898a      	ldrh	r2, [r1, #12]
 8005732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	4605      	mov	r5, r0
 8005738:	0710      	lsls	r0, r2, #28
 800573a:	460c      	mov	r4, r1
 800573c:	d458      	bmi.n	80057f0 <__sflush_r+0xc0>
 800573e:	684b      	ldr	r3, [r1, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	dc05      	bgt.n	8005750 <__sflush_r+0x20>
 8005744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	dc02      	bgt.n	8005750 <__sflush_r+0x20>
 800574a:	2000      	movs	r0, #0
 800574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005752:	2e00      	cmp	r6, #0
 8005754:	d0f9      	beq.n	800574a <__sflush_r+0x1a>
 8005756:	2300      	movs	r3, #0
 8005758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800575c:	682f      	ldr	r7, [r5, #0]
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	d032      	beq.n	80057c8 <__sflush_r+0x98>
 8005762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	075a      	lsls	r2, r3, #29
 8005768:	d505      	bpl.n	8005776 <__sflush_r+0x46>
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	1ac0      	subs	r0, r0, r3
 800576e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005770:	b10b      	cbz	r3, 8005776 <__sflush_r+0x46>
 8005772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005774:	1ac0      	subs	r0, r0, r3
 8005776:	2300      	movs	r3, #0
 8005778:	4602      	mov	r2, r0
 800577a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577c:	6a21      	ldr	r1, [r4, #32]
 800577e:	4628      	mov	r0, r5
 8005780:	47b0      	blx	r6
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	d106      	bne.n	8005796 <__sflush_r+0x66>
 8005788:	6829      	ldr	r1, [r5, #0]
 800578a:	291d      	cmp	r1, #29
 800578c:	d82c      	bhi.n	80057e8 <__sflush_r+0xb8>
 800578e:	4a2a      	ldr	r2, [pc, #168]	; (8005838 <__sflush_r+0x108>)
 8005790:	40ca      	lsrs	r2, r1
 8005792:	07d6      	lsls	r6, r2, #31
 8005794:	d528      	bpl.n	80057e8 <__sflush_r+0xb8>
 8005796:	2200      	movs	r2, #0
 8005798:	6062      	str	r2, [r4, #4]
 800579a:	04d9      	lsls	r1, r3, #19
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	6022      	str	r2, [r4, #0]
 80057a0:	d504      	bpl.n	80057ac <__sflush_r+0x7c>
 80057a2:	1c42      	adds	r2, r0, #1
 80057a4:	d101      	bne.n	80057aa <__sflush_r+0x7a>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	b903      	cbnz	r3, 80057ac <__sflush_r+0x7c>
 80057aa:	6560      	str	r0, [r4, #84]	; 0x54
 80057ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ae:	602f      	str	r7, [r5, #0]
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d0ca      	beq.n	800574a <__sflush_r+0x1a>
 80057b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <__sflush_r+0x92>
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f9d7 	bl	8005b70 <_free_r>
 80057c2:	2000      	movs	r0, #0
 80057c4:	6360      	str	r0, [r4, #52]	; 0x34
 80057c6:	e7c1      	b.n	800574c <__sflush_r+0x1c>
 80057c8:	6a21      	ldr	r1, [r4, #32]
 80057ca:	2301      	movs	r3, #1
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b0      	blx	r6
 80057d0:	1c41      	adds	r1, r0, #1
 80057d2:	d1c7      	bne.n	8005764 <__sflush_r+0x34>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0c4      	beq.n	8005764 <__sflush_r+0x34>
 80057da:	2b1d      	cmp	r3, #29
 80057dc:	d001      	beq.n	80057e2 <__sflush_r+0xb2>
 80057de:	2b16      	cmp	r3, #22
 80057e0:	d101      	bne.n	80057e6 <__sflush_r+0xb6>
 80057e2:	602f      	str	r7, [r5, #0]
 80057e4:	e7b1      	b.n	800574a <__sflush_r+0x1a>
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	e7ad      	b.n	800574c <__sflush_r+0x1c>
 80057f0:	690f      	ldr	r7, [r1, #16]
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	d0a9      	beq.n	800574a <__sflush_r+0x1a>
 80057f6:	0793      	lsls	r3, r2, #30
 80057f8:	680e      	ldr	r6, [r1, #0]
 80057fa:	bf08      	it	eq
 80057fc:	694b      	ldreq	r3, [r1, #20]
 80057fe:	600f      	str	r7, [r1, #0]
 8005800:	bf18      	it	ne
 8005802:	2300      	movne	r3, #0
 8005804:	eba6 0807 	sub.w	r8, r6, r7
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	f1b8 0f00 	cmp.w	r8, #0
 800580e:	dd9c      	ble.n	800574a <__sflush_r+0x1a>
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005814:	4643      	mov	r3, r8
 8005816:	463a      	mov	r2, r7
 8005818:	4628      	mov	r0, r5
 800581a:	47b0      	blx	r6
 800581c:	2800      	cmp	r0, #0
 800581e:	dc06      	bgt.n	800582e <__sflush_r+0xfe>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582c:	e78e      	b.n	800574c <__sflush_r+0x1c>
 800582e:	4407      	add	r7, r0
 8005830:	eba8 0800 	sub.w	r8, r8, r0
 8005834:	e7e9      	b.n	800580a <__sflush_r+0xda>
 8005836:	bf00      	nop
 8005838:	20400001 	.word	0x20400001

0800583c <_fflush_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	4605      	mov	r5, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b913      	cbnz	r3, 800584c <_fflush_r+0x10>
 8005846:	2500      	movs	r5, #0
 8005848:	4628      	mov	r0, r5
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	b118      	cbz	r0, 8005856 <_fflush_r+0x1a>
 800584e:	6983      	ldr	r3, [r0, #24]
 8005850:	b90b      	cbnz	r3, 8005856 <_fflush_r+0x1a>
 8005852:	f000 f887 	bl	8005964 <__sinit>
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <_fflush_r+0x6c>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d11b      	bne.n	8005894 <_fflush_r+0x58>
 800585c:	686c      	ldr	r4, [r5, #4]
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ef      	beq.n	8005846 <_fflush_r+0xa>
 8005866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	d404      	bmi.n	8005876 <_fflush_r+0x3a>
 800586c:	0599      	lsls	r1, r3, #22
 800586e:	d402      	bmi.n	8005876 <_fflush_r+0x3a>
 8005870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005872:	f000 f915 	bl	8005aa0 <__retarget_lock_acquire_recursive>
 8005876:	4628      	mov	r0, r5
 8005878:	4621      	mov	r1, r4
 800587a:	f7ff ff59 	bl	8005730 <__sflush_r>
 800587e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005880:	07da      	lsls	r2, r3, #31
 8005882:	4605      	mov	r5, r0
 8005884:	d4e0      	bmi.n	8005848 <_fflush_r+0xc>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	d4dd      	bmi.n	8005848 <_fflush_r+0xc>
 800588c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588e:	f000 f908 	bl	8005aa2 <__retarget_lock_release_recursive>
 8005892:	e7d9      	b.n	8005848 <_fflush_r+0xc>
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <_fflush_r+0x70>)
 8005896:	429c      	cmp	r4, r3
 8005898:	d101      	bne.n	800589e <_fflush_r+0x62>
 800589a:	68ac      	ldr	r4, [r5, #8]
 800589c:	e7df      	b.n	800585e <_fflush_r+0x22>
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <_fflush_r+0x74>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	bf08      	it	eq
 80058a4:	68ec      	ldreq	r4, [r5, #12]
 80058a6:	e7da      	b.n	800585e <_fflush_r+0x22>
 80058a8:	080067b0 	.word	0x080067b0
 80058ac:	080067d0 	.word	0x080067d0
 80058b0:	08006790 	.word	0x08006790

080058b4 <std>:
 80058b4:	2300      	movs	r3, #0
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	e9c0 3300 	strd	r3, r3, [r0]
 80058be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c2:	6083      	str	r3, [r0, #8]
 80058c4:	8181      	strh	r1, [r0, #12]
 80058c6:	6643      	str	r3, [r0, #100]	; 0x64
 80058c8:	81c2      	strh	r2, [r0, #14]
 80058ca:	6183      	str	r3, [r0, #24]
 80058cc:	4619      	mov	r1, r3
 80058ce:	2208      	movs	r2, #8
 80058d0:	305c      	adds	r0, #92	; 0x5c
 80058d2:	f7ff fdef 	bl	80054b4 <memset>
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <std+0x38>)
 80058d8:	6263      	str	r3, [r4, #36]	; 0x24
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <std+0x3c>)
 80058dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <std+0x40>)
 80058e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <std+0x44>)
 80058e4:	6224      	str	r4, [r4, #32]
 80058e6:	6323      	str	r3, [r4, #48]	; 0x30
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	08005d51 	.word	0x08005d51
 80058f0:	08005d73 	.word	0x08005d73
 80058f4:	08005dab 	.word	0x08005dab
 80058f8:	08005dcf 	.word	0x08005dcf

080058fc <_cleanup_r>:
 80058fc:	4901      	ldr	r1, [pc, #4]	; (8005904 <_cleanup_r+0x8>)
 80058fe:	f000 b8af 	b.w	8005a60 <_fwalk_reent>
 8005902:	bf00      	nop
 8005904:	0800583d 	.word	0x0800583d

08005908 <__sfmoreglue>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	2268      	movs	r2, #104	; 0x68
 800590c:	1e4d      	subs	r5, r1, #1
 800590e:	4355      	muls	r5, r2
 8005910:	460e      	mov	r6, r1
 8005912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005916:	f000 f997 	bl	8005c48 <_malloc_r>
 800591a:	4604      	mov	r4, r0
 800591c:	b140      	cbz	r0, 8005930 <__sfmoreglue+0x28>
 800591e:	2100      	movs	r1, #0
 8005920:	e9c0 1600 	strd	r1, r6, [r0]
 8005924:	300c      	adds	r0, #12
 8005926:	60a0      	str	r0, [r4, #8]
 8005928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800592c:	f7ff fdc2 	bl	80054b4 <memset>
 8005930:	4620      	mov	r0, r4
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <__sfp_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__sfp_lock_acquire+0x8>)
 8005936:	f000 b8b3 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	20000a35 	.word	0x20000a35

08005940 <__sfp_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__sfp_lock_release+0x8>)
 8005942:	f000 b8ae 	b.w	8005aa2 <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	20000a35 	.word	0x20000a35

0800594c <__sinit_lock_acquire>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__sinit_lock_acquire+0x8>)
 800594e:	f000 b8a7 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	20000a36 	.word	0x20000a36

08005958 <__sinit_lock_release>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__sinit_lock_release+0x8>)
 800595a:	f000 b8a2 	b.w	8005aa2 <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	20000a36 	.word	0x20000a36

08005964 <__sinit>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4604      	mov	r4, r0
 8005968:	f7ff fff0 	bl	800594c <__sinit_lock_acquire>
 800596c:	69a3      	ldr	r3, [r4, #24]
 800596e:	b11b      	cbz	r3, 8005978 <__sinit+0x14>
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f7ff bff0 	b.w	8005958 <__sinit_lock_release>
 8005978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800597c:	6523      	str	r3, [r4, #80]	; 0x50
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <__sinit+0x68>)
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <__sinit+0x6c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	62a2      	str	r2, [r4, #40]	; 0x28
 8005986:	42a3      	cmp	r3, r4
 8005988:	bf04      	itt	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	61a3      	streq	r3, [r4, #24]
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f820 	bl	80059d4 <__sfp>
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f81c 	bl	80059d4 <__sfp>
 800599c:	60a0      	str	r0, [r4, #8]
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 f818 	bl	80059d4 <__sfp>
 80059a4:	2200      	movs	r2, #0
 80059a6:	60e0      	str	r0, [r4, #12]
 80059a8:	2104      	movs	r1, #4
 80059aa:	6860      	ldr	r0, [r4, #4]
 80059ac:	f7ff ff82 	bl	80058b4 <std>
 80059b0:	68a0      	ldr	r0, [r4, #8]
 80059b2:	2201      	movs	r2, #1
 80059b4:	2109      	movs	r1, #9
 80059b6:	f7ff ff7d 	bl	80058b4 <std>
 80059ba:	68e0      	ldr	r0, [r4, #12]
 80059bc:	2202      	movs	r2, #2
 80059be:	2112      	movs	r1, #18
 80059c0:	f7ff ff78 	bl	80058b4 <std>
 80059c4:	2301      	movs	r3, #1
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	e7d2      	b.n	8005970 <__sinit+0xc>
 80059ca:	bf00      	nop
 80059cc:	0800678c 	.word	0x0800678c
 80059d0:	080058fd 	.word	0x080058fd

080059d4 <__sfp>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	4607      	mov	r7, r0
 80059d8:	f7ff ffac 	bl	8005934 <__sfp_lock_acquire>
 80059dc:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <__sfp+0x84>)
 80059de:	681e      	ldr	r6, [r3, #0]
 80059e0:	69b3      	ldr	r3, [r6, #24]
 80059e2:	b913      	cbnz	r3, 80059ea <__sfp+0x16>
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff ffbd 	bl	8005964 <__sinit>
 80059ea:	3648      	adds	r6, #72	; 0x48
 80059ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	d503      	bpl.n	80059fc <__sfp+0x28>
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	b30b      	cbz	r3, 8005a3c <__sfp+0x68>
 80059f8:	6836      	ldr	r6, [r6, #0]
 80059fa:	e7f7      	b.n	80059ec <__sfp+0x18>
 80059fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a00:	b9d5      	cbnz	r5, 8005a38 <__sfp+0x64>
 8005a02:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <__sfp+0x88>)
 8005a04:	60e3      	str	r3, [r4, #12]
 8005a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8005a0c:	f000 f847 	bl	8005a9e <__retarget_lock_init_recursive>
 8005a10:	f7ff ff96 	bl	8005940 <__sfp_lock_release>
 8005a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a1c:	6025      	str	r5, [r4, #0]
 8005a1e:	61a5      	str	r5, [r4, #24]
 8005a20:	2208      	movs	r2, #8
 8005a22:	4629      	mov	r1, r5
 8005a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a28:	f7ff fd44 	bl	80054b4 <memset>
 8005a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a34:	4620      	mov	r0, r4
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a38:	3468      	adds	r4, #104	; 0x68
 8005a3a:	e7d9      	b.n	80059f0 <__sfp+0x1c>
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff ff62 	bl	8005908 <__sfmoreglue>
 8005a44:	4604      	mov	r4, r0
 8005a46:	6030      	str	r0, [r6, #0]
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d1d5      	bne.n	80059f8 <__sfp+0x24>
 8005a4c:	f7ff ff78 	bl	8005940 <__sfp_lock_release>
 8005a50:	230c      	movs	r3, #12
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	e7ee      	b.n	8005a34 <__sfp+0x60>
 8005a56:	bf00      	nop
 8005a58:	0800678c 	.word	0x0800678c
 8005a5c:	ffff0001 	.word	0xffff0001

08005a60 <_fwalk_reent>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4606      	mov	r6, r0
 8005a66:	4688      	mov	r8, r1
 8005a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a6c:	2700      	movs	r7, #0
 8005a6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a72:	f1b9 0901 	subs.w	r9, r9, #1
 8005a76:	d505      	bpl.n	8005a84 <_fwalk_reent+0x24>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	d1f7      	bne.n	8005a6e <_fwalk_reent+0xe>
 8005a7e:	4638      	mov	r0, r7
 8005a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a84:	89ab      	ldrh	r3, [r5, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d907      	bls.n	8005a9a <_fwalk_reent+0x3a>
 8005a8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	d003      	beq.n	8005a9a <_fwalk_reent+0x3a>
 8005a92:	4629      	mov	r1, r5
 8005a94:	4630      	mov	r0, r6
 8005a96:	47c0      	blx	r8
 8005a98:	4307      	orrs	r7, r0
 8005a9a:	3568      	adds	r5, #104	; 0x68
 8005a9c:	e7e9      	b.n	8005a72 <_fwalk_reent+0x12>

08005a9e <__retarget_lock_init_recursive>:
 8005a9e:	4770      	bx	lr

08005aa0 <__retarget_lock_acquire_recursive>:
 8005aa0:	4770      	bx	lr

08005aa2 <__retarget_lock_release_recursive>:
 8005aa2:	4770      	bx	lr

08005aa4 <__swhatbuf_r>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	460e      	mov	r6, r1
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	b096      	sub	sp, #88	; 0x58
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	da08      	bge.n	8005ac8 <__swhatbuf_r+0x24>
 8005ab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	061a      	lsls	r2, r3, #24
 8005ac0:	d410      	bmi.n	8005ae4 <__swhatbuf_r+0x40>
 8005ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac6:	e00e      	b.n	8005ae6 <__swhatbuf_r+0x42>
 8005ac8:	466a      	mov	r2, sp
 8005aca:	f000 f9a7 	bl	8005e1c <_fstat_r>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	dbf1      	blt.n	8005ab6 <__swhatbuf_r+0x12>
 8005ad2:	9a01      	ldr	r2, [sp, #4]
 8005ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005adc:	425a      	negs	r2, r3
 8005ade:	415a      	adcs	r2, r3
 8005ae0:	602a      	str	r2, [r5, #0]
 8005ae2:	e7ee      	b.n	8005ac2 <__swhatbuf_r+0x1e>
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	b016      	add	sp, #88	; 0x58
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08005af0 <__smakebuf_r>:
 8005af0:	898b      	ldrh	r3, [r1, #12]
 8005af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005af4:	079d      	lsls	r5, r3, #30
 8005af6:	4606      	mov	r6, r0
 8005af8:	460c      	mov	r4, r1
 8005afa:	d507      	bpl.n	8005b0c <__smakebuf_r+0x1c>
 8005afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2301      	movs	r3, #1
 8005b06:	6163      	str	r3, [r4, #20]
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	ab01      	add	r3, sp, #4
 8005b0e:	466a      	mov	r2, sp
 8005b10:	f7ff ffc8 	bl	8005aa4 <__swhatbuf_r>
 8005b14:	9900      	ldr	r1, [sp, #0]
 8005b16:	4605      	mov	r5, r0
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 f895 	bl	8005c48 <_malloc_r>
 8005b1e:	b948      	cbnz	r0, 8005b34 <__smakebuf_r+0x44>
 8005b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b24:	059a      	lsls	r2, r3, #22
 8005b26:	d4ef      	bmi.n	8005b08 <__smakebuf_r+0x18>
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	e7e3      	b.n	8005afc <__smakebuf_r+0xc>
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <__smakebuf_r+0x7c>)
 8005b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	6020      	str	r0, [r4, #0]
 8005b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	9b00      	ldr	r3, [sp, #0]
 8005b44:	6163      	str	r3, [r4, #20]
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	6120      	str	r0, [r4, #16]
 8005b4a:	b15b      	cbz	r3, 8005b64 <__smakebuf_r+0x74>
 8005b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f975 	bl	8005e40 <_isatty_r>
 8005b56:	b128      	cbz	r0, 8005b64 <__smakebuf_r+0x74>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	89a0      	ldrh	r0, [r4, #12]
 8005b66:	4305      	orrs	r5, r0
 8005b68:	81a5      	strh	r5, [r4, #12]
 8005b6a:	e7cd      	b.n	8005b08 <__smakebuf_r+0x18>
 8005b6c:	080058fd 	.word	0x080058fd

08005b70 <_free_r>:
 8005b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d044      	beq.n	8005c00 <_free_r+0x90>
 8005b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7a:	9001      	str	r0, [sp, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b82:	bfb8      	it	lt
 8005b84:	18e4      	addlt	r4, r4, r3
 8005b86:	f000 f97d 	bl	8005e84 <__malloc_lock>
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <_free_r+0x94>)
 8005b8c:	9801      	ldr	r0, [sp, #4]
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x30>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	b003      	add	sp, #12
 8005b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b9c:	f000 b978 	b.w	8005e90 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x46>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1949      	addeq	r1, r1, r5
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x22>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x50>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x46>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1855      	adds	r5, r2, r1
 8005bc4:	42a5      	cmp	r5, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x70>
 8005bc8:	6824      	ldr	r4, [r4, #0]
 8005bca:	4421      	add	r1, r4
 8005bcc:	1854      	adds	r4, r2, r1
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x26>
 8005bd4:	681c      	ldr	r4, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	4421      	add	r1, r4
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x26>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x78>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x26>
 8005be8:	6825      	ldr	r5, [r4, #0]
 8005bea:	1961      	adds	r1, r4, r5
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x26>
 8005c00:	b003      	add	sp, #12
 8005c02:	bd30      	pop	{r4, r5, pc}
 8005c04:	20000a38 	.word	0x20000a38

08005c08 <sbrk_aligned>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0e      	ldr	r6, [pc, #56]	; (8005c44 <sbrk_aligned+0x3c>)
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	4605      	mov	r5, r0
 8005c12:	b911      	cbnz	r1, 8005c1a <sbrk_aligned+0x12>
 8005c14:	f000 f88c 	bl	8005d30 <_sbrk_r>
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f887 	bl	8005d30 <_sbrk_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d00a      	beq.n	8005c3c <sbrk_aligned+0x34>
 8005c26:	1cc4      	adds	r4, r0, #3
 8005c28:	f024 0403 	bic.w	r4, r4, #3
 8005c2c:	42a0      	cmp	r0, r4
 8005c2e:	d007      	beq.n	8005c40 <sbrk_aligned+0x38>
 8005c30:	1a21      	subs	r1, r4, r0
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f87c 	bl	8005d30 <_sbrk_r>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d101      	bne.n	8005c40 <sbrk_aligned+0x38>
 8005c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c40:	4620      	mov	r0, r4
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	20000a3c 	.word	0x20000a3c

08005c48 <_malloc_r>:
 8005c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4c:	1ccd      	adds	r5, r1, #3
 8005c4e:	f025 0503 	bic.w	r5, r5, #3
 8005c52:	3508      	adds	r5, #8
 8005c54:	2d0c      	cmp	r5, #12
 8005c56:	bf38      	it	cc
 8005c58:	250c      	movcc	r5, #12
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	db01      	blt.n	8005c64 <_malloc_r+0x1c>
 8005c60:	42a9      	cmp	r1, r5
 8005c62:	d905      	bls.n	8005c70 <_malloc_r+0x28>
 8005c64:	230c      	movs	r3, #12
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	2600      	movs	r6, #0
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	4e2e      	ldr	r6, [pc, #184]	; (8005d2c <_malloc_r+0xe4>)
 8005c72:	f000 f907 	bl	8005e84 <__malloc_lock>
 8005c76:	6833      	ldr	r3, [r6, #0]
 8005c78:	461c      	mov	r4, r3
 8005c7a:	bb34      	cbnz	r4, 8005cca <_malloc_r+0x82>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f7ff ffc2 	bl	8005c08 <sbrk_aligned>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	4604      	mov	r4, r0
 8005c88:	d14d      	bne.n	8005d26 <_malloc_r+0xde>
 8005c8a:	6834      	ldr	r4, [r6, #0]
 8005c8c:	4626      	mov	r6, r4
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d140      	bne.n	8005d14 <_malloc_r+0xcc>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	4631      	mov	r1, r6
 8005c96:	4638      	mov	r0, r7
 8005c98:	eb04 0803 	add.w	r8, r4, r3
 8005c9c:	f000 f848 	bl	8005d30 <_sbrk_r>
 8005ca0:	4580      	cmp	r8, r0
 8005ca2:	d13a      	bne.n	8005d1a <_malloc_r+0xd2>
 8005ca4:	6821      	ldr	r1, [r4, #0]
 8005ca6:	3503      	adds	r5, #3
 8005ca8:	1a6d      	subs	r5, r5, r1
 8005caa:	f025 0503 	bic.w	r5, r5, #3
 8005cae:	3508      	adds	r5, #8
 8005cb0:	2d0c      	cmp	r5, #12
 8005cb2:	bf38      	it	cc
 8005cb4:	250c      	movcc	r5, #12
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff ffa5 	bl	8005c08 <sbrk_aligned>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d02b      	beq.n	8005d1a <_malloc_r+0xd2>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	442b      	add	r3, r5
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	e00e      	b.n	8005ce8 <_malloc_r+0xa0>
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	1b52      	subs	r2, r2, r5
 8005cce:	d41e      	bmi.n	8005d0e <_malloc_r+0xc6>
 8005cd0:	2a0b      	cmp	r2, #11
 8005cd2:	d916      	bls.n	8005d02 <_malloc_r+0xba>
 8005cd4:	1961      	adds	r1, r4, r5
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	6025      	str	r5, [r4, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	6059      	strne	r1, [r3, #4]
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	bf08      	it	eq
 8005ce2:	6031      	streq	r1, [r6, #0]
 8005ce4:	5162      	str	r2, [r4, r5]
 8005ce6:	604b      	str	r3, [r1, #4]
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f104 060b 	add.w	r6, r4, #11
 8005cee:	f000 f8cf 	bl	8005e90 <__malloc_unlock>
 8005cf2:	f026 0607 	bic.w	r6, r6, #7
 8005cf6:	1d23      	adds	r3, r4, #4
 8005cf8:	1af2      	subs	r2, r6, r3
 8005cfa:	d0b6      	beq.n	8005c6a <_malloc_r+0x22>
 8005cfc:	1b9b      	subs	r3, r3, r6
 8005cfe:	50a3      	str	r3, [r4, r2]
 8005d00:	e7b3      	b.n	8005c6a <_malloc_r+0x22>
 8005d02:	6862      	ldr	r2, [r4, #4]
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	bf0c      	ite	eq
 8005d08:	6032      	streq	r2, [r6, #0]
 8005d0a:	605a      	strne	r2, [r3, #4]
 8005d0c:	e7ec      	b.n	8005ce8 <_malloc_r+0xa0>
 8005d0e:	4623      	mov	r3, r4
 8005d10:	6864      	ldr	r4, [r4, #4]
 8005d12:	e7b2      	b.n	8005c7a <_malloc_r+0x32>
 8005d14:	4634      	mov	r4, r6
 8005d16:	6876      	ldr	r6, [r6, #4]
 8005d18:	e7b9      	b.n	8005c8e <_malloc_r+0x46>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	4638      	mov	r0, r7
 8005d20:	f000 f8b6 	bl	8005e90 <__malloc_unlock>
 8005d24:	e7a1      	b.n	8005c6a <_malloc_r+0x22>
 8005d26:	6025      	str	r5, [r4, #0]
 8005d28:	e7de      	b.n	8005ce8 <_malloc_r+0xa0>
 8005d2a:	bf00      	nop
 8005d2c:	20000a38 	.word	0x20000a38

08005d30 <_sbrk_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	; (8005d4c <_sbrk_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7ff fad8 	bl	80052f0 <_sbrk>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_sbrk_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_sbrk_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000a40 	.word	0x20000a40

08005d50 <__sread>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	f000 f8a0 	bl	8005e9c <_read_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	bfab      	itete	ge
 8005d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d62:	89a3      	ldrhlt	r3, [r4, #12]
 8005d64:	181b      	addge	r3, r3, r0
 8005d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d6a:	bfac      	ite	ge
 8005d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d6e:	81a3      	strhlt	r3, [r4, #12]
 8005d70:	bd10      	pop	{r4, pc}

08005d72 <__swrite>:
 8005d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	461f      	mov	r7, r3
 8005d78:	898b      	ldrh	r3, [r1, #12]
 8005d7a:	05db      	lsls	r3, r3, #23
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	4616      	mov	r6, r2
 8005d82:	d505      	bpl.n	8005d90 <__swrite+0x1e>
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	2302      	movs	r3, #2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f000 f868 	bl	8005e60 <_lseek_r>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	4632      	mov	r2, r6
 8005d9e:	463b      	mov	r3, r7
 8005da0:	4628      	mov	r0, r5
 8005da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	f000 b817 	b.w	8005dd8 <_write_r>

08005daa <__sseek>:
 8005daa:	b510      	push	{r4, lr}
 8005dac:	460c      	mov	r4, r1
 8005dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db2:	f000 f855 	bl	8005e60 <_lseek_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	bf15      	itete	ne
 8005dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dc6:	81a3      	strheq	r3, [r4, #12]
 8005dc8:	bf18      	it	ne
 8005dca:	81a3      	strhne	r3, [r4, #12]
 8005dcc:	bd10      	pop	{r4, pc}

08005dce <__sclose>:
 8005dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd2:	f000 b813 	b.w	8005dfc <_close_r>
	...

08005dd8 <_write_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_write_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fe fdb2 	bl	8004950 <_write>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_write_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_write_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000a40 	.word	0x20000a40

08005dfc <_close_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	; (8005e18 <_close_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7ff fa3d 	bl	8005286 <_close>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_close_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_close_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000a40 	.word	0x20000a40

08005e1c <_fstat_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	; (8005e3c <_fstat_r+0x20>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f7ff fa38 	bl	800529e <_fstat>
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d102      	bne.n	8005e38 <_fstat_r+0x1c>
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	b103      	cbz	r3, 8005e38 <_fstat_r+0x1c>
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	bd38      	pop	{r3, r4, r5, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000a40 	.word	0x20000a40

08005e40 <_isatty_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d06      	ldr	r5, [pc, #24]	; (8005e5c <_isatty_r+0x1c>)
 8005e44:	2300      	movs	r3, #0
 8005e46:	4604      	mov	r4, r0
 8005e48:	4608      	mov	r0, r1
 8005e4a:	602b      	str	r3, [r5, #0]
 8005e4c:	f7ff fa37 	bl	80052be <_isatty>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d102      	bne.n	8005e5a <_isatty_r+0x1a>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b103      	cbz	r3, 8005e5a <_isatty_r+0x1a>
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	20000a40 	.word	0x20000a40

08005e60 <_lseek_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d07      	ldr	r5, [pc, #28]	; (8005e80 <_lseek_r+0x20>)
 8005e64:	4604      	mov	r4, r0
 8005e66:	4608      	mov	r0, r1
 8005e68:	4611      	mov	r1, r2
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	602a      	str	r2, [r5, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f7ff fa30 	bl	80052d4 <_lseek>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_lseek_r+0x1e>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_lseek_r+0x1e>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	20000a40 	.word	0x20000a40

08005e84 <__malloc_lock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__malloc_lock+0x8>)
 8005e86:	f7ff be0b 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000a34 	.word	0x20000a34

08005e90 <__malloc_unlock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__malloc_unlock+0x8>)
 8005e92:	f7ff be06 	b.w	8005aa2 <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	20000a34 	.word	0x20000a34

08005e9c <_read_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	; (8005ebc <_read_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7ff f9ce 	bl	800524c <_read>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_read_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_read_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000a40 	.word	0x20000a40

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
