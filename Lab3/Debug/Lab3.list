
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a3c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c38  08002c38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c38  08002c38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c38  08002c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002c4c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc74  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdb  00000000  00000000  0002ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ad5  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d616  00000000  00000000  00059bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001033bd  00000000  00000000  000671c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003424  00000000  00000000  0016a5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002be0 	.word	0x08002be0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002be0 	.word	0x08002be0

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f960 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f002 fbbd 	bl	800299c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f96d 	bl	8000536 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 f937 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002fc:	d005      	beq.n	800030a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_Delay+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030a:	bf00      	nop
 800030c:	f7ff ffde 	bl	80002cc <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f7      	bhi.n	800030c <HAL_Delay+0x28>
  {
  }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	; 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff29 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff3e 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa2 	bl	8000488 <SysTick_Config>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e014      	b.n	800058a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f002 fa37 	bl	80029e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d101      	bne.n	80005a8 <HAL_DAC_Start+0x16>
 80005a4:	2302      	movs	r3, #2
 80005a6:	e040      	b.n	800062a <HAL_DAC_Start+0x98>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2201      	movs	r2, #1
 80005ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2202      	movs	r2, #2
 80005b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2201      	movs	r2, #1
 80005c2:	409a      	lsls	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10f      	bne.n	80005f2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d11d      	bne.n	800061c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	e014      	b.n	800061c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f003 0310 	and.w	r3, r3, #16
 8000602:	2102      	movs	r1, #2
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	429a      	cmp	r2, r3
 800060a:	d107      	bne.n	800061c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f042 0202 	orr.w	r2, r2, #2
 800061a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000636:	b480      	push	{r7}
 8000638:	b087      	sub	sp, #28
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
 8000642:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d105      	bne.n	8000660 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	3308      	adds	r3, #8
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e004      	b.n	800066a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	3314      	adds	r3, #20
 8000668:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	461a      	mov	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	371c      	adds	r7, #28
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <HAL_DAC_ConfigChannel+0x1c>
 8000698:	2302      	movs	r3, #2
 800069a:	e12a      	b.n	80008f2 <HAL_DAC_ConfigChannel+0x272>
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2201      	movs	r2, #1
 80006a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2202      	movs	r2, #2
 80006a6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d174      	bne.n	800079a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80006b0:	f7ff fe0c 	bl	80002cc <HAL_GetTick>
 80006b4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d134      	bne.n	8000726 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80006bc:	e011      	b.n	80006e2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80006be:	f7ff fe05 	bl	80002cc <HAL_GetTick>
 80006c2:	4602      	mov	r2, r0
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d90a      	bls.n	80006e2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	f043 0208 	orr.w	r2, r3, #8
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2203      	movs	r2, #3
 80006dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80006de:	2303      	movs	r3, #3
 80006e0:	e107      	b.n	80008f2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1e6      	bne.n	80006be <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff fdf7 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	69d2      	ldr	r2, [r2, #28]
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000700:	e01e      	b.n	8000740 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000702:	f7ff fde3 	bl	80002cc <HAL_GetTick>
 8000706:	4602      	mov	r2, r0
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	2b01      	cmp	r3, #1
 800070e:	d90a      	bls.n	8000726 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	f043 0208 	orr.w	r2, r3, #8
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2203      	movs	r2, #3
 8000720:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e0e5      	b.n	80008f2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072c:	2b00      	cmp	r3, #0
 800072e:	dbe8      	blt.n	8000702 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff fdd7 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	69d2      	ldr	r2, [r2, #28]
 800073e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	ea02 0103 	and.w	r1, r2, r3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	6a1a      	ldr	r2, [r3, #32]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	409a      	lsls	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	430a      	orrs	r2, r1
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	21ff      	movs	r1, #255	; 0xff
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	ea02 0103 	and.w	r1, r2, r3
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f003 0310 	and.w	r3, r3, #16
 8000790:	409a      	lsls	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	430a      	orrs	r2, r1
 8000798:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d11d      	bne.n	80007de <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f003 0310 	and.w	r3, r3, #16
 80007b0:	221f      	movs	r2, #31
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	69fa      	ldr	r2, [r7, #28]
 80007ba:	4013      	ands	r3, r2
 80007bc:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	69fa      	ldr	r2, [r7, #28]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	2207      	movs	r2, #7
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	69fa      	ldr	r2, [r7, #28]
 80007f6:	4013      	ands	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	431a      	orrs	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	4313      	orrs	r3, r2
 800080a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	4313      	orrs	r3, r2
 800081c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	400a      	ands	r2, r1
 8000842:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4013      	ands	r3, r2
 8000860:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0310 	and.w	r3, r3, #16
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	4313      	orrs	r3, r2
 8000878:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000882:	d104      	bne.n	800088e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	e018      	b.n	80008c0 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d104      	bne.n	80008a0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	e00f      	b.n	80008c0 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80008a0:	f001 f9a8 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 80008a4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_DAC_ConfigChannel+0x27c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d904      	bls.n	80008b8 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e003      	b.n	80008c0 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008be:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	69fa      	ldr	r2, [r7, #28]
 80008c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6819      	ldr	r1, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	22c0      	movs	r2, #192	; 0xc0
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2201      	movs	r2, #1
 80008e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	04c4b400 	.word	0x04c4b400

08000900 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800091e:	e0fd      	b.n	8000b1c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b02      	cmp	r3, #2
 8000928:	d103      	bne.n	8000932 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000930:	e0f4      	b.n	8000b1c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d101      	bne.n	800093e <HAL_DACEx_SelfCalibrate+0x3e>
 800093a:	2302      	movs	r3, #2
 800093c:	e0f0      	b.n	8000b20 <HAL_DACEx_SelfCalibrate+0x220>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2201      	movs	r2, #1
 8000942:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	2107      	movs	r1, #7
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	2201      	movs	r2, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43da      	mvns	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	400a      	ands	r2, r1
 8000974:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	2207      	movs	r2, #7
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43da      	mvns	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	400a      	ands	r2, r1
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d103      	bne.n	80009a6 <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3308      	adds	r3, #8
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e002      	b.n	80009ac <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3314      	adds	r3, #20
 80009aa:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b4:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c6:	409a      	lsls	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 80009d0:	2310      	movs	r3, #16
 80009d2:	623b      	str	r3, [r7, #32]
    delta = 8U;
 80009d4:	2308      	movs	r3, #8
 80009d6:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80009d8:	e037      	b.n	8000a4a <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	211f      	movs	r1, #31
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	ea02 0103 	and.w	r1, r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fc6d 	bl	80002e4 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	401a      	ands	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d104      	bne.n	8000a3c <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8000a32:	6a3a      	ldr	r2, [r7, #32]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	623b      	str	r3, [r7, #32]
 8000a3a:	e003      	b.n	8000a44 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8000a3c:	6a3a      	ldr	r2, [r7, #32]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	4413      	add	r3, r2
 8000a42:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1c4      	bne.n	80009da <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	211f      	movs	r1, #31
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	ea02 0103 	and.w	r1, r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	6a3a      	ldr	r2, [r7, #32]
 8000a70:	409a      	lsls	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fc32 	bl	80002e4 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d117      	bne.n	8000aca <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	211f      	movs	r1, #31
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	ea02 0103 	and.w	r1, r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	6a3a      	ldr	r2, [r7, #32]
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	6a3a      	ldr	r2, [r7, #32]
 8000aec:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	2107      	movs	r1, #7
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	ea02 0103 	and.w	r1, r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8000b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e166      	b.n	8000e06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8158 	beq.w	8000e00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 80b2 	beq.w	8000e00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	4b61      	ldr	r3, [pc, #388]	; (8000e24 <HAL_GPIO_Init+0x2fc>)
 8000c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca0:	4a60      	ldr	r2, [pc, #384]	; (8000e24 <HAL_GPIO_Init+0x2fc>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca8:	4b5e      	ldr	r3, [pc, #376]	; (8000e24 <HAL_GPIO_Init+0x2fc>)
 8000caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb4:	4a5c      	ldr	r2, [pc, #368]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cde:	d02b      	beq.n	8000d38 <HAL_GPIO_Init+0x210>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d025      	beq.n	8000d34 <HAL_GPIO_Init+0x20c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <HAL_GPIO_Init+0x308>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d01f      	beq.n	8000d30 <HAL_GPIO_Init+0x208>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <HAL_GPIO_Init+0x30c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d019      	beq.n	8000d2c <HAL_GPIO_Init+0x204>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4f      	ldr	r2, [pc, #316]	; (8000e38 <HAL_GPIO_Init+0x310>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x200>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <HAL_GPIO_Init+0x314>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1fc>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <HAL_GPIO_Init+0x318>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1f8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x31c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1f4>
 8000d18:	2307      	movs	r3, #7
 8000d1a:	e00e      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	e00c      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d20:	2306      	movs	r3, #6
 8000d22:	e00a      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d24:	2305      	movs	r3, #5
 8000d26:	e008      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da6:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd0:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <HAL_GPIO_Init+0x320>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f ae91 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000c00 	.word	0x48000c00
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	48001400 	.word	0x48001400
 8000e40:	48001800 	.word	0x48001800
 8000e44:	48001c00 	.word	0x48001c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e001      	b.n	8000e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec2:	e00b      	b.n	8000edc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed2:	d102      	bne.n	8000eda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	e000      	b.n	8000edc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000eda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40007000 	.word	0x40007000

08000eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d141      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000efa:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f06:	d131      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f20:	4a41      	ldr	r2, [pc, #260]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f28:	4b40      	ldr	r3, [pc, #256]	; (800102c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2232      	movs	r2, #50	; 0x32
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f3e:	e002      	b.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f52:	d102      	bne.n	8000f5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f2      	bne.n	8000f40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f66:	d158      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e057      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f7c:	e04d      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f84:	d141      	bne.n	800100a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f92:	d131      	bne.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fac:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2232      	movs	r2, #50	; 0x32
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	0c9b      	lsrs	r3, r3, #18
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fca:	e002      	b.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d102      	bne.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f2      	bne.n	8000fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d112      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e011      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001008:	e007      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001018:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40007000 	.word	0x40007000
 800102c:	20000008 	.word	0x20000008
 8001030:	431bde83 	.word	0x431bde83

08001034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	f000 bc08 	b.w	8001858 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001048:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001052:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80e4 	beq.w	8001232 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <HAL_RCC_OscConfig+0x4c>
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	f040 808b 	bne.w	800118e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 8087 	bne.w	800118e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001080:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_OscConfig+0x64>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e3df      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1a      	ldr	r2, [r3, #32]
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_RCC_OscConfig+0x7e>
 80010a8:	4b7e      	ldr	r3, [pc, #504]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b0:	e005      	b.n	80010be <HAL_RCC_OscConfig+0x8a>
 80010b2:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010be:	4293      	cmp	r3, r2
 80010c0:	d223      	bcs.n	800110a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fda0 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e3c0      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d6:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a72      	ldr	r2, [pc, #456]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	496d      	ldr	r1, [pc, #436]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	4968      	ldr	r1, [pc, #416]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e025      	b.n	8001156 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4960      	ldr	r1, [pc, #384]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	495b      	ldr	r1, [pc, #364]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d109      	bne.n	8001156 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd60 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e380      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001156:	f000 fcc1 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 800115a:	4602      	mov	r2, r0
 800115c:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	4950      	ldr	r1, [pc, #320]	; (80012a8 <HAL_RCC_OscConfig+0x274>)
 8001168:	5ccb      	ldrb	r3, [r1, r3]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <HAL_RCC_OscConfig+0x278>)
 8001174:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001176:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <HAL_RCC_OscConfig+0x27c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f856 	bl	800022c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d052      	beq.n	8001230 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	e364      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d032      	beq.n	80011fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001196:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a42      	ldr	r2, [pc, #264]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a2:	f7ff f893 	bl	80002cc <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011aa:	f7ff f88f 	bl	80002cc <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e34d      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4930      	ldr	r1, [pc, #192]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	492b      	ldr	r1, [pc, #172]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
 80011fa:	e01a      	b.n	8001232 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001208:	f7ff f860 	bl	80002cc <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001210:	f7ff f85c 	bl	80002cc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e31a      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1dc>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d073      	beq.n	8001326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x21c>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d10e      	bne.n	8001268 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d10b      	bne.n	8001268 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d063      	beq.n	8001324 <HAL_RCC_OscConfig+0x2f0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d15f      	bne.n	8001324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e2f7      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x24c>
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e025      	b.n	80012cc <HAL_RCC_OscConfig+0x298>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d114      	bne.n	80012b4 <HAL_RCC_OscConfig+0x280>
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a02      	ldr	r2, [pc, #8]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e013      	b.n	80012cc <HAL_RCC_OscConfig+0x298>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08002bf8 	.word	0x08002bf8
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000000 	.word	0x20000000
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a9f      	ldr	r2, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a9c      	ldr	r2, [pc, #624]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7fe fffa 	bl	80002cc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7fe fff6 	bl	80002cc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e2b4      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x2a8>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7fe ffe6 	bl	80002cc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7fe ffe2 	bl	80002cc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e2a0      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d0>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d060      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x310>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d119      	bne.n	8001372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d116      	bne.n	8001372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x328>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e27d      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	4973      	ldr	r1, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001370:	e040      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d023      	beq.n	80013c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7fe ffa1 	bl	80002cc <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7fe ff9d 	bl	80002cc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e25b      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	495f      	ldr	r1, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7fe ff7d 	bl	80002cc <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7fe ff79 	bl	80002cc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e237      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03c      	beq.n	800147a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01c      	beq.n	8001442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7fe ff58 	bl	80002cc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7fe ff54 	bl	80002cc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e212      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ef      	beq.n	8001420 <HAL_RCC_OscConfig+0x3ec>
 8001440:	e01b      	b.n	800147a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001448:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	f7fe ff3b 	bl	80002cc <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145a:	f7fe ff37 	bl	80002cc <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1f5      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800146e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ef      	bne.n	800145a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80a6 	beq.w	80015d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b0:	2301      	movs	r3, #1
 80014b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d118      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014cc:	f7fe fefe 	bl	80002cc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7fe fefa 	bl	80002cc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1b8      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x4d8>
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150a:	e029      	b.n	8001560 <HAL_RCC_OscConfig+0x52c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d115      	bne.n	8001540 <HAL_RCC_OscConfig+0x50c>
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x52c>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	4b9d      	ldr	r3, [pc, #628]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	4a9c      	ldr	r2, [pc, #624]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001550:	4b99      	ldr	r3, [pc, #612]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	4a98      	ldr	r2, [pc, #608]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d016      	beq.n	8001596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7fe feb0 	bl	80002cc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7fe feac 	bl	80002cc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e168      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ed      	beq.n	8001570 <HAL_RCC_OscConfig+0x53c>
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7fe fe99 	bl	80002cc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7fe fe95 	bl	80002cc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e151      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b4:	4b80      	ldr	r3, [pc, #512]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ed      	bne.n	800159e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b7b      	ldr	r3, [pc, #492]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a7a      	ldr	r2, [pc, #488]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03c      	beq.n	800165a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01c      	beq.n	8001622 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015e8:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80015ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ee:	4a72      	ldr	r2, [pc, #456]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7fe fe68 	bl	80002cc <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001600:	f7fe fe64 	bl	80002cc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e122      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ef      	beq.n	8001600 <HAL_RCC_OscConfig+0x5cc>
 8001620:	e01b      	b.n	800165a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001628:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7fe fe4b 	bl	80002cc <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800163a:	f7fe fe47 	bl	80002cc <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e105      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800164c:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 800164e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ef      	bne.n	800163a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80f9 	beq.w	8001856 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	2b02      	cmp	r3, #2
 800166a:	f040 80cf 	bne.w	800180c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800166e:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0203 	and.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	429a      	cmp	r2, r3
 8001680:	d12c      	bne.n	80016dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	3b01      	subs	r3, #1
 800168e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d123      	bne.n	80016dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d11b      	bne.n	80016dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d113      	bne.n	80016dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	3b01      	subs	r3, #1
 80016d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d071      	beq.n	80017c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d068      	beq.n	80017b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0ac      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2d      	ldr	r2, [pc, #180]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800170a:	f7fe fddf 	bl	80002cc <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7fe fddb 	bl	80002cc <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e099      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_RCC_OscConfig+0x788>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001740:	3a01      	subs	r2, #1
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800174a:	0212      	lsls	r2, r2, #8
 800174c:	4311      	orrs	r1, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001752:	0852      	lsrs	r2, r2, #1
 8001754:	3a01      	subs	r2, #1
 8001756:	0552      	lsls	r2, r2, #21
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800175e:	0852      	lsrs	r2, r2, #1
 8001760:	3a01      	subs	r2, #1
 8001762:	0652      	lsls	r2, r2, #25
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800176a:	06d2      	lsls	r2, r2, #27
 800176c:	430a      	orrs	r2, r1
 800176e:	4912      	ldr	r1, [pc, #72]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7fe fd9e 	bl	80002cc <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe fd9a 	bl	80002cc <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e058      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b2:	e050      	b.n	8001856 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04f      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d144      	bne.n	8001856 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017e4:	f7fe fd72 	bl	80002cc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7fe fd6e 	bl	80002cc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e02c      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x7b8>
 800180a:	e024      	b.n	8001856 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d01f      	beq.n	8001852 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7fe fd55 	bl	80002cc <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7fe fd51 	bl	80002cc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e00f      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4905      	ldr	r1, [pc, #20]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x830>)
 800184c:	4013      	ands	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e001      	b.n	8001856 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	feeefffc 	.word	0xfeeefffc

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e11d      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b90      	ldr	r3, [pc, #576]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d910      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b8d      	ldr	r3, [pc, #564]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	498b      	ldr	r1, [pc, #556]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e105      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d010      	beq.n	80018de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d908      	bls.n	80018de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	497b      	ldr	r1, [pc, #492]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d079      	beq.n	80019de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d11e      	bne.n	8001930 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0dc      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001902:	f000 f9dd 	bl	8001cc0 <RCC_GetSysClockFreqFromPLLSource>
 8001906:	4603      	mov	r3, r0
 8001908:	4a70      	ldr	r2, [pc, #448]	; (8001acc <HAL_RCC_ClockConfig+0x264>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d946      	bls.n	800199c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800190e:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d140      	bne.n	800199c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800191a:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001922:	4a69      	ldr	r2, [pc, #420]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e035      	b.n	800199c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d115      	bne.n	8001970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b9      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001950:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0ad      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0a5      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001970:	f000 f8b4 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001974:	4603      	mov	r3, r0
 8001976:	4a55      	ldr	r2, [pc, #340]	; (8001acc <HAL_RCC_ClockConfig+0x264>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d90f      	bls.n	800199c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800197c:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001990:	4a4d      	ldr	r2, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001996:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 0203 	bic.w	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4947      	ldr	r1, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ae:	f7fe fc8d 	bl	80002cc <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7fe fc89 	bl	80002cc <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e077      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 020c 	and.w	r2, r3, #12
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	429a      	cmp	r2, r3
 80019dc:	d1eb      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a37      	ldr	r2, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 80019ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d208      	bcs.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	492b      	ldr	r1, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d210      	bcs.n	8001a4e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 020f 	bic.w	r2, r3, #15
 8001a34:	4923      	ldr	r1, [pc, #140]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_ClockConfig+0x25c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e036      	b.n	8001abc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4918      	ldr	r1, [pc, #96]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4910      	ldr	r1, [pc, #64]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8c:	f000 f826 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_ClockConfig+0x260>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <HAL_RCC_ClockConfig+0x268>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x26c>)
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fbbb 	bl	800022c <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	04c4b400 	.word	0x04c4b400
 8001ad0:	08002bf8 	.word	0x08002bf8
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d121      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d11e      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e005      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_RCC_GetSysClockFreq+0x110>)
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e004      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d134      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d003      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0xac>
 8001b80:	e005      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_RCC_GetSysClockFreq+0x110>)
 8001b84:	617b      	str	r3, [r7, #20]
      break;
 8001b86:	e005      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b8a:	617b      	str	r3, [r7, #20]
      break;
 8001b8c:	e002      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	617b      	str	r3, [r7, #20]
      break;
 8001b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	fb03 f202 	mul.w	r2, r3, r2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	0e5b      	lsrs	r3, r3, #25
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08002c08 	.word	0x08002c08
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c24:	f7ff f942 	bl	8000eac <HAL_PWREx_GetVoltageRange>
 8001c28:	6178      	str	r0, [r7, #20]
 8001c2a:	e014      	b.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c44:	f7ff f932 	bl	8000eac <HAL_PWREx_GetVoltageRange>
 8001c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d10b      	bne.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d913      	bls.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2ba0      	cmp	r3, #160	; 0xa0
 8001c68:	d902      	bls.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e00d      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e00a      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b7f      	cmp	r3, #127	; 0x7f
 8001c7a:	d902      	bls.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e004      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b70      	cmp	r3, #112	; 0x70
 8001c86:	d101      	bne.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 020f 	bic.w	r2, r3, #15
 8001c94:	4909      	ldr	r1, [pc, #36]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d00b      	beq.n	8001cee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d825      	bhi.n	8001d28 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d008      	beq.n	8001cf4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d11f      	bne.n	8001d28 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001cea:	613b      	str	r3, [r7, #16]
    break;
 8001cec:	e01f      	b.n	8001d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001cee:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001cf0:	613b      	str	r3, [r7, #16]
    break;
 8001cf2:	e01c      	b.n	8001d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e005      	b.n	8001d1c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	613b      	str	r3, [r7, #16]
    break;
 8001d26:	e002      	b.n	8001d2e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
    break;
 8001d2c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	fb03 f202 	mul.w	r2, r3, r2
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0e5b      	lsrs	r3, r3, #25
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001d6e:	683b      	ldr	r3, [r7, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	08002c08 	.word	0x08002c08

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e049      	b.n	8001e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fe54 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 fa50 	bl	8002270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d122      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d11b      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0202 	mvn.w	r2, #2
 8001e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f9d8 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8001e82:	e005      	b.n	8001e90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f9ca 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9db 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d122      	bne.n	8001eea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d11b      	bne.n	8001eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0204 	mvn.w	r2, #4
 8001eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f9ae 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8001ed6:	e005      	b.n	8001ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f9a0 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f9b1 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d122      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11b      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0208 	mvn.w	r2, #8
 8001f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2204      	movs	r2, #4
 8001f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f984 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8001f2a:	e005      	b.n	8001f38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f976 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f987 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d122      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d11b      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0210 	mvn.w	r2, #16
 8001f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2208      	movs	r2, #8
 8001f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f95a 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8001f7e:	e005      	b.n	8001f8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f94c 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f95d 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0201 	mvn.w	r2, #1
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f926 	bl	800220a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fb09 	bl	80025fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fafc 	bl	8002610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f90b 	bl	800225a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b20      	cmp	r3, #32
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0220 	mvn.w	r2, #32
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fabc 	bl	80025e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_TIM_ConfigClockSource+0x1c>
 8002090:	2302      	movs	r3, #2
 8002092:	e0b6      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x18a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d0:	d03e      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0xd8>
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	f200 8087 	bhi.w	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 80020da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020de:	f000 8086 	beq.w	80021ee <HAL_TIM_ConfigClockSource+0x176>
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e6:	d87f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 80020e8:	2b70      	cmp	r3, #112	; 0x70
 80020ea:	d01a      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xaa>
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d87b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 80020f0:	2b60      	cmp	r3, #96	; 0x60
 80020f2:	d050      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x11e>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d877      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 80020f8:	2b50      	cmp	r3, #80	; 0x50
 80020fa:	d03c      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xfe>
 80020fc:	2b50      	cmp	r3, #80	; 0x50
 80020fe:	d873      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d058      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x13e>
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d86f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 8002108:	2b30      	cmp	r3, #48	; 0x30
 800210a:	d064      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15e>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15e>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d867      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05c      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15e>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d05a      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15e>
 8002120:	e062      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f000 f9b1 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
      break;
 800214e:	e04f      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f000 f99a 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f90e 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	; 0x50
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f967 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 8002194:	e02c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 f92d 	bl	8002402 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	; 0x60
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f957 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 f8ee 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f947 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 f93e 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021e6:	e003      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e000      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80021ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <TIM_Base_SetConfig+0x114>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d00f      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <TIM_Base_SetConfig+0x118>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00b      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <TIM_Base_SetConfig+0x11c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <TIM_Base_SetConfig+0x120>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <TIM_Base_SetConfig+0x124>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <TIM_Base_SetConfig+0x114>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d01b      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <TIM_Base_SetConfig+0x118>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d017      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <TIM_Base_SetConfig+0x11c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <TIM_Base_SetConfig+0x120>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00f      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0x124>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a28      	ldr	r2, [pc, #160]	; (8002398 <TIM_Base_SetConfig+0x128>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a27      	ldr	r2, [pc, #156]	; (800239c <TIM_Base_SetConfig+0x12c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x9a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <TIM_Base_SetConfig+0x130>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <TIM_Base_SetConfig+0x114>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <TIM_Base_SetConfig+0x124>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <TIM_Base_SetConfig+0x128>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <TIM_Base_SetConfig+0x12c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <TIM_Base_SetConfig+0x130>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40013400 	.word	0x40013400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 030a 	bic.w	r3, r3, #10
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0210 	bic.w	r2, r3, #16
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800242c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	031b      	lsls	r3, r3, #12
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	f043 0307 	orr.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e068      	b.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800252a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01d      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d018      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10c      	bne.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40013400 	.word	0x40013400
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40014000 	.word	0x40014000

080025e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800262a:	f7fd fde7 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262e:	f000 f871 	bl	8002714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002632:	f000 f951 	bl	80028d8 <MX_GPIO_Init>
  MX_DAC1_Init();
 8002636:	f000 f8bf 	bl	80027b8 <MX_DAC1_Init>
  MX_TIM2_Init();
 800263a:	f000 f8ff 	bl	800283c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // initialize DAC
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
 800263e:	2200      	movs	r2, #0
 8002640:	4931      	ldr	r1, [pc, #196]	; (8002708 <main+0xe4>)
 8002642:	4832      	ldr	r0, [pc, #200]	; (800270c <main+0xe8>)
 8002644:	f7fe f95c 	bl	8000900 <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_2);
 8002648:	2210      	movs	r2, #16
 800264a:	492f      	ldr	r1, [pc, #188]	; (8002708 <main+0xe4>)
 800264c:	482f      	ldr	r0, [pc, #188]	; (800270c <main+0xe8>)
 800264e:	f7fe f957 	bl	8000900 <HAL_DACEx_SelfCalibrate>


  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8002652:	2100      	movs	r1, #0
 8002654:	482d      	ldr	r0, [pc, #180]	; (800270c <main+0xe8>)
 8002656:	f7fd ff9c 	bl	8000592 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800265a:	2110      	movs	r1, #16
 800265c:	482b      	ldr	r0, [pc, #172]	; (800270c <main+0xe8>)
 800265e:	f7fd ff98 	bl	8000592 <HAL_DAC_Start>
  /*
   * 16 discrete values for saw wave (as in lab doc example)
   * 8 discrete values for triangle wave (as in lab doc example)
   */
  // Variables for triangle wave
  int triangle_wave_value = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
  int triangle_wave_increment = -2; // start negative because sign will flip in first
 8002666:	f06f 0301 	mvn.w	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
  // Variables for saw wave
  int saw_wave_value = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  int saw_wave_increment = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]

  char status = 1; // status 1 is saw, 0 is triangle
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // increment triangle wave
	  if (triangle_wave_value == 16 || triangle_wave_value == 0) { // flip increment when at max and min
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d002      	beq.n	8002684 <main+0x60>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <main+0x66>
		  triangle_wave_increment *= -1;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	425b      	negs	r3, r3
 8002688:	61bb      	str	r3, [r7, #24]
	  }
	  triangle_wave_value  += triangle_wave_increment;
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]
	  // increment saw wave
	  if (saw_wave_value == 16) {
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b10      	cmp	r3, #16
 8002696:	d102      	bne.n	800269e <main+0x7a>
		  saw_wave_value = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e003      	b.n	80026a6 <main+0x82>
	  } else {
		  saw_wave_value += saw_wave_increment;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
	  }

	  // get signal to pass to DAC (scaled up for larger voltage)
	  uint32_t triangle_signal = triangle_wave_value*100;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2264      	movs	r2, #100	; 0x64
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	60bb      	str	r3, [r7, #8]
	  uint32_t saw_signal = saw_wave_value*100;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2264      	movs	r2, #100	; 0x64
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	607b      	str	r3, [r7, #4]

	  // output to DAC (this currently switches the signals to the output ports, but one of the ports is not working)
	  status = HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 80026ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026be:	4814      	ldr	r0, [pc, #80]	; (8002710 <main+0xec>)
 80026c0:	f7fe fbc4 	bl	8000e4c <HAL_GPIO_ReadPin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
	  if (status == 1) {
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10c      	bne.n	80026e8 <main+0xc4>
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, saw_signal);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2110      	movs	r1, #16
 80026d4:	480d      	ldr	r0, [pc, #52]	; (800270c <main+0xe8>)
 80026d6:	f7fd ffae 	bl	8000636 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, triangle_signal); // not working
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	480a      	ldr	r0, [pc, #40]	; (800270c <main+0xe8>)
 80026e2:	f7fd ffa8 	bl	8000636 <HAL_DAC_SetValue>
 80026e6:	e00b      	b.n	8002700 <main+0xdc>
	  } else {
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, triangle_signal);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	2110      	movs	r1, #16
 80026ee:	4807      	ldr	r0, [pc, #28]	; (800270c <main+0xe8>)
 80026f0:	f7fd ffa1 	bl	8000636 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, saw_signal); // not working
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	4804      	ldr	r0, [pc, #16]	; (800270c <main+0xe8>)
 80026fc:	f7fd ff9b 	bl	8000636 <HAL_DAC_SetValue>
	  }



	  HAL_Delay(15); // delay 15ms for ~15ms period
 8002700:	200f      	movs	r0, #15
 8002702:	f7fd fdef 	bl	80002e4 <HAL_Delay>
  {
 8002706:	e7b7      	b.n	8002678 <main+0x54>
 8002708:	2000008c 	.word	0x2000008c
 800270c:	2000002c 	.word	0x2000002c
 8002710:	48000800 	.word	0x48000800

08002714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b096      	sub	sp, #88	; 0x58
 8002718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	2244      	movs	r2, #68	; 0x44
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa54 	bl	8002bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002728:	463b      	mov	r3, r7
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fbd8 	bl	8000eec <HAL_PWREx_ControlVoltageScaling>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002742:	f000 f925 	bl	8002990 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002746:	2310      	movs	r3, #16
 8002748:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800274a:	2301      	movs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002752:	2360      	movs	r3, #96	; 0x60
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002756:	2302      	movs	r3, #2
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800275a:	2301      	movs	r3, #1
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002762:	233c      	movs	r3, #60	; 0x3c
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002766:	2302      	movs	r3, #2
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800276a:	2302      	movs	r3, #2
 800276c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800276e:	2302      	movs	r3, #2
 8002770:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc5c 	bl	8001034 <HAL_RCC_OscConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002782:	f000 f905 	bl	8002990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002786:	230f      	movs	r3, #15
 8002788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2303      	movs	r3, #3
 800278c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2105      	movs	r1, #5
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f862 	bl	8001868 <HAL_RCC_ClockConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027aa:	f000 f8f1 	bl	8002990 <Error_Handler>
  }
}
 80027ae:	bf00      	nop
 80027b0:	3758      	adds	r7, #88	; 0x58
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2228      	movs	r2, #40	; 0x28
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fa03 	bl	8002bd0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_DAC1_Init+0x7c>)
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <MX_DAC1_Init+0x80>)
 80027ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80027d0:	4818      	ldr	r0, [pc, #96]	; (8002834 <MX_DAC1_Init+0x7c>)
 80027d2:	f7fd febc 	bl	800054e <HAL_DAC_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80027dc:	f000 f8d8 	bl	8002990 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80027e4:	230a      	movs	r3, #10
 80027e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80027e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ec:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <MX_DAC1_Init+0x7c>)
 8002802:	f7fd ff3d 	bl	8000680 <HAL_DAC_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800280c:	f000 f8c0 	bl	8002990 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	2210      	movs	r2, #16
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <MX_DAC1_Init+0x7c>)
 800281c:	f7fd ff30 	bl	8000680 <HAL_DAC_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8002826:	f000 f8b3 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000002c 	.word	0x2000002c
 8002838:	40007400 	.word	0x40007400

0800283c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MX_TIM2_Init+0x98>)
 800285c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002860:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <MX_TIM2_Init+0x98>)
 8002864:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <MX_TIM2_Init+0x98>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_TIM2_Init+0x98>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <MX_TIM2_Init+0x98>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_TIM2_Init+0x98>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002884:	4813      	ldr	r0, [pc, #76]	; (80028d4 <MX_TIM2_Init+0x98>)
 8002886:	f7ff fa81 	bl	8001d8c <HAL_TIM_Base_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002890:	f000 f87e 	bl	8002990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <MX_TIM2_Init+0x98>)
 80028a2:	f7ff fbe9 	bl	8002078 <HAL_TIM_ConfigClockSource>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028ac:	f000 f870 	bl	8002990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028b0:	2320      	movs	r3, #32
 80028b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_TIM2_Init+0x98>)
 80028be:	f7ff fe0b 	bl	80024d8 <HAL_TIMEx_MasterConfigSynchronization>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80028c8:	f000 f862 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000040 	.word	0x20000040

080028d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <MX_GPIO_Init+0xac>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <MX_GPIO_Init+0xac>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <MX_GPIO_Init+0xac>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <MX_GPIO_Init+0xac>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <MX_GPIO_Init+0xac>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_GPIO_Init+0xac>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_GPIO_Init+0xac>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <MX_GPIO_Init+0xac>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_GPIO_Init+0xac>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <MX_GPIO_Init+0xb0>)
 800293e:	f7fe fa9d 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8002942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4619      	mov	r1, r3
 8002956:	480d      	ldr	r0, [pc, #52]	; (800298c <MX_GPIO_Init+0xb4>)
 8002958:	f7fe f8e6 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 800295c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4619      	mov	r1, r3
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <MX_GPIO_Init+0xb0>)
 8002976:	f7fe f8d7 	bl	8000b28 <HAL_GPIO_Init>

}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800

08002990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002994:	b672      	cpsid	i
}
 8002996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002998:	e7fe      	b.n	8002998 <Error_Handler+0x8>
	...

0800299c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_MspInit+0x44>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_MspInit+0x44>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6613      	str	r3, [r2, #96]	; 0x60
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_MspInit+0x44>)
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_MspInit+0x44>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_MspInit+0x44>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_MspInit+0x44>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_DAC_MspInit+0x74>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d124      	bne.n	8002a50 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_DAC_MspInit+0x78>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a36:	2330      	movs	r3, #48	; 0x30
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f7fe f86c 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40007400 	.word	0x40007400
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d113      	bne.n	8002a9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_TIM_Base_MspInit+0x44>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <HAL_TIM_Base_MspInit+0x44>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_TIM_Base_MspInit+0x44>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	201c      	movs	r0, #28
 8002a90:	f7fd fd27 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a94:	201c      	movs	r0, #28
 8002a96:	f7fd fd40 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <NMI_Handler+0x4>

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af4:	f7fd fbd6 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM2_IRQHandler+0x10>)
 8002b02:	f7ff f99a 	bl	8001e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000040 	.word	0x20000040

08002b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b38:	f7ff ffea 	bl	8002b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3e:	490d      	ldr	r1, [pc, #52]	; (8002b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <LoopForever+0xe>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b54:	4c0a      	ldr	r4, [pc, #40]	; (8002b80 <LoopForever+0x16>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b62:	f000 f811 	bl	8002b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b66:	f7ff fd5d 	bl	8002624 <main>

08002b6a <LoopForever>:

LoopForever:
    b LoopForever
 8002b6a:	e7fe      	b.n	8002b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b6c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b78:	08002c40 	.word	0x08002c40
  ldr r2, =_sbss
 8002b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b80:	200000b4 	.word	0x200000b4

08002b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC1_IRQHandler>
	...

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	4d0d      	ldr	r5, [pc, #52]	; (8002bc0 <__libc_init_array+0x38>)
 8002b8c:	4c0d      	ldr	r4, [pc, #52]	; (8002bc4 <__libc_init_array+0x3c>)
 8002b8e:	1b64      	subs	r4, r4, r5
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	2600      	movs	r6, #0
 8002b94:	42a6      	cmp	r6, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	4d0b      	ldr	r5, [pc, #44]	; (8002bc8 <__libc_init_array+0x40>)
 8002b9a:	4c0c      	ldr	r4, [pc, #48]	; (8002bcc <__libc_init_array+0x44>)
 8002b9c:	f000 f820 	bl	8002be0 <_init>
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	42a6      	cmp	r6, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb0:	4798      	blx	r3
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bba:	4798      	blx	r3
 8002bbc:	3601      	adds	r6, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08002c38 	.word	0x08002c38
 8002bc4:	08002c38 	.word	0x08002c38
 8002bc8:	08002c38 	.word	0x08002c38
 8002bcc:	08002c3c 	.word	0x08002c3c

08002bd0 <memset>:
 8002bd0:	4402      	add	r2, r0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d100      	bne.n	8002bda <memset+0xa>
 8002bd8:	4770      	bx	lr
 8002bda:	f803 1b01 	strb.w	r1, [r3], #1
 8002bde:	e7f9      	b.n	8002bd4 <memset+0x4>

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
