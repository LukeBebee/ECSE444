
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08006f50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006f50  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cfc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  00038d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca0b  00000000  00000000  0003def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163b2  00000000  00000000  0006a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011174c  00000000  00000000  00080cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001923f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  001924c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00197a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800659c 	.word	0x0800659c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800659c 	.word	0x0800659c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800091c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000920:	f000 b974 	b.w	8000c0c <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468e      	mov	lr, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14d      	bne.n	80009e6 <__udivmoddi4+0xaa>
 800094a:	428a      	cmp	r2, r1
 800094c:	4694      	mov	ip, r2
 800094e:	d969      	bls.n	8000a24 <__udivmoddi4+0xe8>
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	b152      	cbz	r2, 800096c <__udivmoddi4+0x30>
 8000956:	fa01 f302 	lsl.w	r3, r1, r2
 800095a:	f1c2 0120 	rsb	r1, r2, #32
 800095e:	fa20 f101 	lsr.w	r1, r0, r1
 8000962:	fa0c fc02 	lsl.w	ip, ip, r2
 8000966:	ea41 0e03 	orr.w	lr, r1, r3
 800096a:	4094      	lsls	r4, r2
 800096c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000970:	0c21      	lsrs	r1, r4, #16
 8000972:	fbbe f6f8 	udiv	r6, lr, r8
 8000976:	fa1f f78c 	uxth.w	r7, ip
 800097a:	fb08 e316 	mls	r3, r8, r6, lr
 800097e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000982:	fb06 f107 	mul.w	r1, r6, r7
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000992:	f080 811f 	bcs.w	8000bd4 <__udivmoddi4+0x298>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 811c 	bls.w	8000bd4 <__udivmoddi4+0x298>
 800099c:	3e02      	subs	r6, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x92>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009c0:	f080 810a 	bcs.w	8000bd8 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8107 	bls.w	8000bd8 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d2:	1be4      	subs	r4, r4, r7
 80009d4:	2600      	movs	r6, #0
 80009d6:	b11d      	cbz	r5, 80009e0 <__udivmoddi4+0xa4>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c5 4300 	strd	r4, r3, [r5]
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0xc2>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	f000 80ef 	beq.w	8000bce <__udivmoddi4+0x292>
 80009f0:	2600      	movs	r6, #0
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	4630      	mov	r0, r6
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	fab3 f683 	clz	r6, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d14a      	bne.n	8000a9c <__udivmoddi4+0x160>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d302      	bcc.n	8000a10 <__udivmoddi4+0xd4>
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	f200 80f9 	bhi.w	8000c02 <__udivmoddi4+0x2c6>
 8000a10:	1a84      	subs	r4, r0, r2
 8000a12:	eb61 0303 	sbc.w	r3, r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	469e      	mov	lr, r3
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e0      	beq.n	80009e0 <__udivmoddi4+0xa4>
 8000a1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a22:	e7dd      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000a24:	b902      	cbnz	r2, 8000a28 <__udivmoddi4+0xec>
 8000a26:	deff      	udf	#255	; 0xff
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f040 8092 	bne.w	8000b56 <__udivmoddi4+0x21a>
 8000a32:	eba1 010c 	sub.w	r1, r1, ip
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	2601      	movs	r6, #1
 8000a40:	0c20      	lsrs	r0, r4, #16
 8000a42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a46:	fb07 1113 	mls	r1, r7, r3, r1
 8000a4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a4e:	fb0e f003 	mul.w	r0, lr, r3
 8000a52:	4288      	cmp	r0, r1
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x12c>
 8000a56:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x12a>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f200 80cb 	bhi.w	8000bfc <__udivmoddi4+0x2c0>
 8000a66:	4643      	mov	r3, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a70:	fb07 1110 	mls	r1, r7, r0, r1
 8000a74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a78:	fb0e fe00 	mul.w	lr, lr, r0
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x156>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x154>
 8000a8a:	45a6      	cmp	lr, r4
 8000a8c:	f200 80bb 	bhi.w	8000c06 <__udivmoddi4+0x2ca>
 8000a90:	4608      	mov	r0, r1
 8000a92:	eba4 040e 	sub.w	r4, r4, lr
 8000a96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9a:	e79c      	b.n	80009d6 <__udivmoddi4+0x9a>
 8000a9c:	f1c6 0720 	rsb	r7, r6, #32
 8000aa0:	40b3      	lsls	r3, r6
 8000aa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aaa:	fa20 f407 	lsr.w	r4, r0, r7
 8000aae:	fa01 f306 	lsl.w	r3, r1, r6
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aba:	fa00 f306 	lsl.w	r3, r0, r6
 8000abe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ac2:	0c20      	lsrs	r0, r4, #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	fb09 1118 	mls	r1, r9, r8, r1
 8000acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	fa02 f206 	lsl.w	r2, r2, r6
 8000ada:	d90b      	bls.n	8000af4 <__udivmoddi4+0x1b8>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ae4:	f080 8088 	bcs.w	8000bf8 <__udivmoddi4+0x2bc>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f240 8085 	bls.w	8000bf8 <__udivmoddi4+0x2bc>
 8000aee:	f1a8 0802 	sub.w	r8, r8, #2
 8000af2:	4461      	add	r1, ip
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000afc:	fb09 1110 	mls	r1, r9, r0, r1
 8000b00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	458e      	cmp	lr, r1
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x1e2>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b14:	d26c      	bcs.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b16:	458e      	cmp	lr, r1
 8000b18:	d96a      	bls.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4461      	add	r1, ip
 8000b1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b22:	fba0 9402 	umull	r9, r4, r0, r2
 8000b26:	eba1 010e 	sub.w	r1, r1, lr
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	46c8      	mov	r8, r9
 8000b2e:	46a6      	mov	lr, r4
 8000b30:	d356      	bcc.n	8000be0 <__udivmoddi4+0x2a4>
 8000b32:	d053      	beq.n	8000bdc <__udivmoddi4+0x2a0>
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x212>
 8000b36:	ebb3 0208 	subs.w	r2, r3, r8
 8000b3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b42:	fa22 f306 	lsr.w	r3, r2, r6
 8000b46:	40f1      	lsrs	r1, r6
 8000b48:	431f      	orrs	r7, r3
 8000b4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	fa21 f303 	lsr.w	r3, r1, r3
 8000b64:	4091      	lsls	r1, r2
 8000b66:	4301      	orrs	r1, r0
 8000b68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b74:	fb07 3610 	mls	r6, r7, r0, r3
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b82:	429e      	cmp	r6, r3
 8000b84:	fa04 f402 	lsl.w	r4, r4, r2
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x260>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b92:	d22f      	bcs.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d92d      	bls.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ba4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bac:	fb06 f30e 	mul.w	r3, r6, lr
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x28a>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bbc:	d216      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d914      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000bc2:	3e02      	subs	r6, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bcc:	e738      	b.n	8000a40 <__udivmoddi4+0x104>
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e705      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e3      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6f8      	b.n	80009ce <__udivmoddi4+0x92>
 8000bdc:	454b      	cmp	r3, r9
 8000bde:	d2a9      	bcs.n	8000b34 <__udivmoddi4+0x1f8>
 8000be0:	ebb9 0802 	subs.w	r8, r9, r2
 8000be4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7a3      	b.n	8000b34 <__udivmoddi4+0x1f8>
 8000bec:	4646      	mov	r6, r8
 8000bee:	e7ea      	b.n	8000bc6 <__udivmoddi4+0x28a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	e794      	b.n	8000b1e <__udivmoddi4+0x1e2>
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	e7d1      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bf8:	46d0      	mov	r8, sl
 8000bfa:	e77b      	b.n	8000af4 <__udivmoddi4+0x1b8>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	e732      	b.n	8000a68 <__udivmoddi4+0x12c>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e709      	b.n	8000a1a <__udivmoddi4+0xde>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	e742      	b.n	8000a92 <__udivmoddi4+0x156>

08000c0c <__aeabi_idiv0>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f960 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f80d 	bl	8000c40 <HAL_InitTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	e001      	b.n	8000c36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c32:	f004 fa6d 	bl	8005110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_InitTick+0x70>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f96d 	bl	8000f4a <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d809      	bhi.n	8000c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f000 f937 	bl	8000ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_InitTick+0x74>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e007      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e001      	b.n	8000ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000004 	.word	0x20000004
 8000cdc:	2000008c 	.word	0x2000008c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000004 	.word	0x20000004

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff29 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff3e 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff31 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e014      	b.n	8000f9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d105      	bne.n	8000f8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f004 f8e7 	bl	8005158 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	795b      	ldrb	r3, [r3, #5]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_DAC_Start+0x16>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e040      	b.n	800103e <HAL_DAC_Start+0x98>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d11d      	bne.n	8001030 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	e014      	b.n	8001030 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2102      	movs	r1, #2
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	429a      	cmp	r2, r3
 800101e:	d107      	bne.n	8001030 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0202 	orr.w	r2, r2, #2
 800102e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800104a:	b480      	push	{r7}
 800104c:	b087      	sub	sp, #28
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	3308      	adds	r3, #8
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e004      	b.n	800107e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	3314      	adds	r3, #20
 800107c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	461a      	mov	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_DAC_ConfigChannel+0x1c>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e12a      	b.n	8001306 <HAL_DAC_ConfigChannel+0x272>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2202      	movs	r2, #2
 80010ba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d174      	bne.n	80011ae <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80010c4:	f7ff fe0c 	bl	8000ce0 <HAL_GetTick>
 80010c8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d134      	bne.n	800113a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010d0:	e011      	b.n	80010f6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010d2:	f7ff fe05 	bl	8000ce0 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d90a      	bls.n	80010f6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f043 0208 	orr.w	r2, r3, #8
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2203      	movs	r2, #3
 80010f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e107      	b.n	8001306 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e6      	bne.n	80010d2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fdf7 	bl	8000cf8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	69d2      	ldr	r2, [r2, #28]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
 8001114:	e01e      	b.n	8001154 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001116:	f7ff fde3 	bl	8000ce0 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d90a      	bls.n	800113a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f043 0208 	orr.w	r2, r3, #8
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2203      	movs	r2, #3
 8001134:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e0e5      	b.n	8001306 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	2b00      	cmp	r3, #0
 8001142:	dbe8      	blt.n	8001116 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fdd7 	bl	8000cf8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	69d2      	ldr	r2, [r2, #28]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	ea02 0103 	and.w	r1, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	21ff      	movs	r1, #255	; 0xff
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	ea02 0103 	and.w	r1, r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	409a      	lsls	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d11d      	bne.n	80011f2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	221f      	movs	r2, #31
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2207      	movs	r2, #7
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	4013      	ands	r3, r2
 800120c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	431a      	orrs	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4313      	orrs	r3, r2
 8001230:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	f640 72fe 	movw	r2, #4094	; 0xffe
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	4013      	ands	r3, r2
 8001274:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	4313      	orrs	r3, r2
 800128c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001296:	d104      	bne.n	80012a2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e018      	b.n	80012d4 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d104      	bne.n	80012b4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e00f      	b.n	80012d4 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80012b4:	f001 fb7c 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80012b8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_DAC_ConfigChannel+0x27c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d904      	bls.n	80012cc <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e003      	b.n	80012d4 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012d2:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6819      	ldr	r1, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	22c0      	movs	r2, #192	; 0xc0
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	04c4b400 	.word	0x04c4b400

08001314 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001332:	e0fd      	b.n	8001530 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d103      	bne.n	8001346 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001344:	e0f4      	b.n	8001530 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	795b      	ldrb	r3, [r3, #5]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_DACEx_SelfCalibrate+0x3e>
 800134e:	2302      	movs	r3, #2
 8001350:	e0f0      	b.n	8001534 <HAL_DACEx_SelfCalibrate+0x220>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2107      	movs	r1, #7
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2201      	movs	r2, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43da      	mvns	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	400a      	ands	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2207      	movs	r2, #7
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3308      	adds	r3, #8
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e002      	b.n	80013c0 <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3314      	adds	r3, #20
 80013be:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c8:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 80013e4:	2310      	movs	r3, #16
 80013e6:	623b      	str	r3, [r7, #32]
    delta = 8U;
 80013e8:	2308      	movs	r3, #8
 80013ea:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80013ec:	e037      	b.n	800145e <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	211f      	movs	r1, #31
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	ea02 0103 	and.w	r1, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	6a3a      	ldr	r2, [r7, #32]
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fc6d 	bl	8000cf8 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	401a      	ands	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	429a      	cmp	r2, r3
 8001444:	d104      	bne.n	8001450 <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	e003      	b.n	8001458 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1c4      	bne.n	80013ee <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	211f      	movs	r1, #31
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	ea02 0103 	and.w	r1, r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fc32 	bl	8000cf8 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d117      	bne.n	80014de <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	3301      	adds	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	211f      	movs	r1, #31
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	ea02 0103 	and.w	r1, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2107      	movs	r1, #7
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	ea02 0103 	and.w	r1, r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	430a      	orrs	r2, r1
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8001530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001534:	4618      	mov	r0, r3
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e08d      	b.n	800166a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_DMA_Init+0x138>)
 8001556:	429a      	cmp	r2, r3
 8001558:	d80f      	bhi.n	800157a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_DMA_Init+0x13c>)
 8001562:	4413      	add	r3, r2
 8001564:	4a45      	ldr	r2, [pc, #276]	; (800167c <HAL_DMA_Init+0x140>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	009a      	lsls	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_DMA_Init+0x144>)
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
 8001578:	e00e      	b.n	8001598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_DMA_Init+0x148>)
 8001582:	4413      	add	r3, r2
 8001584:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_DMA_Init+0x140>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	009a      	lsls	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a3c      	ldr	r2, [pc, #240]	; (8001688 <HAL_DMA_Init+0x14c>)
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8fe 	bl	80017ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f8:	d102      	bne.n	8001600 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001614:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <HAL_DMA_Init+0x104>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d80c      	bhi.n	8001640 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f91e 	bl	8001868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e008      	b.n	8001652 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020407 	.word	0x40020407
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000
 8001684:	bffdfbf8 	.word	0xbffdfbf8
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f003 031c 	and.w	r3, r3, #28
 80016ac:	2204      	movs	r2, #4
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d026      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d021      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 021c 	and.w	r2, r3, #28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2104      	movs	r1, #4
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d071      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001704:	e06c      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 031c 	and.w	r3, r3, #28
 800170e:	2202      	movs	r2, #2
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02e      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d029      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10b      	bne.n	800174a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 020a 	bic.w	r2, r2, #10
 8001740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f003 021c 	and.w	r2, r3, #28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	2102      	movs	r1, #2
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d038      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001776:	e033      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f003 031c 	and.w	r3, r3, #28
 8001780:	2208      	movs	r2, #8
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 020e 	bic.w	r2, r2, #14
 80017a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 021c 	and.w	r2, r3, #28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
}
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d80a      	bhi.n	8001816 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800180c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6493      	str	r3, [r2, #72]	; 0x48
 8001814:	e007      	b.n	8001826 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	009a      	lsls	r2, r3, #2
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001820:	4413      	add	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3b08      	subs	r3, #8
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2201      	movs	r2, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40020407 	.word	0x40020407
 800185c:	4002081c 	.word	0x4002081c
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020880 	.word	0x40020880

08001868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800188a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2201      	movs	r2, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	1000823f 	.word	0x1000823f
 80018ac:	40020940 	.word	0x40020940

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e166      	b.n	8001b8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8158 	beq.w	8001b88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80b2 	beq.w	8001b88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b61      	ldr	r3, [pc, #388]	; (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3c:	4a5c      	ldr	r2, [pc, #368]	; (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a66:	d02b      	beq.n	8001ac0 <HAL_GPIO_Init+0x210>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d025      	beq.n	8001abc <HAL_GPIO_Init+0x20c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x308>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d01f      	beq.n	8001ab8 <HAL_GPIO_Init+0x208>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d019      	beq.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_GPIO_Init+0x200>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1fc>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a4d      	ldr	r2, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1f8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <HAL_GPIO_Init+0x31c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1f4>
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	e00e      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	e00c      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	e00a      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aac:	2305      	movs	r3, #5
 8001aae:	e008      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e004      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	f002 0203 	and.w	r2, r2, #3
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	4093      	lsls	r3, r2
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad2:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_GPIO_Init+0x300>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b04:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b2e:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f ae91 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	48001000 	.word	0x48001000
 8001bc4:	48001400 	.word	0x48001400
 8001bc8:	48001800 	.word	0x48001800
 8001bcc:	48001c00 	.word	0x48001c00
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43d9      	mvns	r1, r3
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	400b      	ands	r3, r1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ff98 	bl	8004b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d102      	bne.n	8001c80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7e:	e00b      	b.n	8001c98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8e:	d102      	bne.n	8001c96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	e000      	b.n	8001c98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001c96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d141      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d131      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2232      	movs	r2, #50	; 0x32
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfa:	e002      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d102      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f2      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d158      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e057      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d38:	e04d      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d141      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4e:	d131      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2232      	movs	r2, #50	; 0x32
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9b      	lsrs	r3, r3, #18
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	e002      	b.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d102      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f2      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dae:	d112      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e011      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dc4:	e007      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000008 	.word	0x20000008
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f000 bc08 	b.w	8002614 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e04:	4b96      	ldr	r3, [pc, #600]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0e:	4b94      	ldr	r3, [pc, #592]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80e4 	beq.w	8001fee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	f040 808b 	bne.w	8001f4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 8087 	bne.w	8001f4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3c:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x64>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e3df      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1a      	ldr	r2, [r3, #32]
 8001e58:	4b81      	ldr	r3, [pc, #516]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_RCC_OscConfig+0x7e>
 8001e64:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6c:	e005      	b.n	8001e7a <HAL_RCC_OscConfig+0x8a>
 8001e6e:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d223      	bcs.n	8001ec6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fdcc 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e3c0      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a72      	ldr	r2, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	496d      	ldr	r1, [pc, #436]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	4968      	ldr	r1, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e025      	b.n	8001f12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec6:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4960      	ldr	r1, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	495b      	ldr	r1, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd8c 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e380      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f12:	f000 fcc1 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4950      	ldr	r1, [pc, #320]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_RCC_OscConfig+0x278>)
 8001f30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f32:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_RCC_OscConfig+0x27c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fe82 	bl	8000c40 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d052      	beq.n	8001fec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	e364      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d032      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe febf 	bl	8000ce0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f66:	f7fe febb 	bl	8000ce0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e34d      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a35      	ldr	r2, [pc, #212]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4930      	ldr	r1, [pc, #192]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	492b      	ldr	r1, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
 8001fb6:	e01a      	b.n	8001fee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe8c 	bl	8000ce0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fe88 	bl	8000ce0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e31a      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1dc>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d073      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_OscConfig+0x21c>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d10e      	bne.n	8002024 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d10b      	bne.n	8002024 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d063      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d15f      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e2f7      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x24c>
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e025      	b.n	8002088 <HAL_RCC_OscConfig+0x298>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002044:	d114      	bne.n	8002070 <HAL_RCC_OscConfig+0x280>
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a02      	ldr	r2, [pc, #8]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e013      	b.n	8002088 <HAL_RCC_OscConfig+0x298>
 8002060:	40021000 	.word	0x40021000
 8002064:	080065ec 	.word	0x080065ec
 8002068:	20000008 	.word	0x20000008
 800206c:	20000000 	.word	0x20000000
 8002070:	4ba0      	ldr	r3, [pc, #640]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a9f      	ldr	r2, [pc, #636]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b9d      	ldr	r3, [pc, #628]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a9c      	ldr	r2, [pc, #624]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fe26 	bl	8000ce0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fe22 	bl	8000ce0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2b4      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x2a8>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe12 	bl	8000ce0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fe0e 	bl	8000ce0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e2a0      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2d0>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d060      	beq.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x310>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d119      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d116      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002100:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x328>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e27d      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4973      	ldr	r1, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	e040      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d023      	beq.n	800217e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fdcd 	bl	8000ce0 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fdc9 	bl	8000ce0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e25b      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	495f      	ldr	r1, [pc, #380]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e018      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe fda9 	bl	8000ce0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe fda5 	bl	8000ce0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e237      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ca:	4a4a      	ldr	r2, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fd84 	bl	8000ce0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7fe fd80 	bl	8000ce0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e212      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80021f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x3ec>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe fd67 	bl	8000ce0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe fd63 	bl	8000ce0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1f5      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80a6 	beq.w	8002390 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	6593      	str	r3, [r2, #88]	; 0x58
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_OscConfig+0x508>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d118      	bne.n	80022ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x508>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x508>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002288:	f7fe fd2a 	bl	8000ce0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe fd26 	bl	8000ce0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1b8      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_RCC_OscConfig+0x508>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d8>
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c6:	e029      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_OscConfig+0x50c>
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	4a9c      	ldr	r2, [pc, #624]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230c:	4b99      	ldr	r3, [pc, #612]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a98      	ldr	r2, [pc, #608]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fcdc 	bl	8000ce0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe fcd8 	bl	8000ce0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e168      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ed      	beq.n	800232c <HAL_RCC_OscConfig+0x53c>
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fcc5 	bl	8000ce0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fcc1 	bl	8000ce0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e151      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ed      	bne.n	800235a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237e:	7ffb      	ldrb	r3, [r7, #31]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a4:	4b73      	ldr	r3, [pc, #460]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80023a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023aa:	4a72      	ldr	r2, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fc94 	bl	8000ce0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023bc:	f7fe fc90 	bl	8000ce0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e122      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ce:	4b69      	ldr	r3, [pc, #420]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80023d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x5cc>
 80023dc:	e01b      	b.n	8002416 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023de:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80023e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e4:	4a63      	ldr	r2, [pc, #396]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe fc77 	bl	8000ce0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f6:	f7fe fc73 	bl	8000ce0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e105      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800240a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80f9 	beq.w	8002612 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	2b02      	cmp	r3, #2
 8002426:	f040 80cf 	bne.w	80025c8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800242a:	4b52      	ldr	r3, [pc, #328]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	429a      	cmp	r2, r3
 800243c:	d12c      	bne.n	8002498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	3b01      	subs	r3, #1
 800244a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d123      	bne.n	8002498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d11b      	bne.n	8002498 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d113      	bne.n	8002498 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d109      	bne.n	8002498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	3b01      	subs	r3, #1
 8002492:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d071      	beq.n	800257c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d068      	beq.n	8002570 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0ac      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2d      	ldr	r2, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c6:	f7fe fc0b 	bl	8000ce0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fc07 	bl	8000ce0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e099      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x788>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002506:	0212      	lsls	r2, r2, #8
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800250e:	0852      	lsrs	r2, r2, #1
 8002510:	3a01      	subs	r2, #1
 8002512:	0552      	lsls	r2, r2, #21
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800251a:	0852      	lsrs	r2, r2, #1
 800251c:	3a01      	subs	r2, #1
 800251e:	0652      	lsls	r2, r2, #25
 8002520:	4311      	orrs	r1, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002526:	06d2      	lsls	r2, r2, #27
 8002528:	430a      	orrs	r2, r1
 800252a:	4912      	ldr	r1, [pc, #72]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002548:	f7fe fbca 	bl	8000ce0 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fbc6 	bl	8000ce0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e058      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256e:	e050      	b.n	8002612 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e04f      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
 8002574:	40021000 	.word	0x40021000
 8002578:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d144      	bne.n	8002612 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a0:	f7fe fb9e 	bl	8000ce0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fb9a 	bl	8000ce0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e02c      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x7b8>
 80025c6:	e024      	b.n	8002612 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d01f      	beq.n	800260e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 80025d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fb81 	bl	8000ce0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fb7d 	bl	8000ce0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4905      	ldr	r1, [pc, #20]	; (800261c <HAL_RCC_OscConfig+0x82c>)
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x830>)
 8002608:	4013      	ands	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
 800260c:	e001      	b.n	8002612 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	feeefffc 	.word	0xfeeefffc

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e11d      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b90      	ldr	r3, [pc, #576]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	498b      	ldr	r1, [pc, #556]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e105      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	429a      	cmp	r2, r3
 8002686:	d908      	bls.n	800269a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	497b      	ldr	r1, [pc, #492]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d079      	beq.n	800279a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d11e      	bne.n	80026ec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0dc      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80026be:	f000 fa09 	bl	8002ad4 <RCC_GetSysClockFreqFromPLLSource>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a70      	ldr	r2, [pc, #448]	; (8002888 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d946      	bls.n	8002758 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d140      	bne.n	8002758 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026d6:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e035      	b.n	8002758 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d115      	bne.n	800272c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b9      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0ad      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0a5      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800272c:	f000 f8b4 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002730:	4603      	mov	r3, r0
 8002732:	4a55      	ldr	r2, [pc, #340]	; (8002888 <HAL_RCC_ClockConfig+0x264>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d90f      	bls.n	8002758 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002738:	4b52      	ldr	r3, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800274e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002752:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 0203 	bic.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4947      	ldr	r1, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276a:	f7fe fab9 	bl	8000ce0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002770:	e00a      	b.n	8002788 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7fe fab5 	bl	8000ce0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e077      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002788:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 020c 	and.w	r2, r3, #12
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	429a      	cmp	r2, r3
 8002798:	d1eb      	bne.n	8002772 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d105      	bne.n	80027ac <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027a0:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a37      	ldr	r2, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027aa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d208      	bcs.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	492b      	ldr	r1, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d210      	bcs.n	800280a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 020f 	bic.w	r2, r3, #15
 80027f0:	4923      	ldr	r1, [pc, #140]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e036      	b.n	8002878 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4918      	ldr	r1, [pc, #96]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4910      	ldr	r1, [pc, #64]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002848:	f000 f826 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <HAL_RCC_ClockConfig+0x268>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x26c>)
 8002866:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe f9e7 	bl	8000c40 <HAL_InitTick>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]

  return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	04c4b400 	.word	0x04c4b400
 800288c:	080065ec 	.word	0x080065ec
 8002890:	20000008 	.word	0x20000008
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d121      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d11e      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d8:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d102      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e004      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d101      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 800291e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d134      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0xa6>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d003      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xac>
 800293c:	e005      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002940:	617b      	str	r3, [r7, #20]
      break;
 8002942:	e005      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002946:	617b      	str	r3, [r7, #20]
      break;
 8002948:	e002      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	617b      	str	r3, [r7, #20]
      break;
 800294e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3301      	adds	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0e5b      	lsrs	r3, r3, #25
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	3301      	adds	r3, #1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08006604 	.word	0x08006604
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	080065fc 	.word	0x080065fc

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029f8:	f7ff ffda 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4904      	ldr	r1, [pc, #16]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080065fc 	.word	0x080065fc

08002a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a38:	f7ff f916 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 8002a3c:	6178      	str	r0, [r7, #20]
 8002a3e:	e014      	b.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a21      	ldr	r2, [pc, #132]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7ff f906 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 8002a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a70:	d10b      	bne.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d913      	bls.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a7c:	d902      	bls.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a7e:	2302      	movs	r3, #2
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	e00d      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a84:	2301      	movs	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e00a      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a8e:	d902      	bls.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002a90:	2302      	movs	r3, #2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e004      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b70      	cmp	r3, #112	; 0x70
 8002a9a:	d101      	bne.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 020f 	bic.w	r2, r3, #15
 8002aa8:	4909      	ldr	r1, [pc, #36]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d00b      	beq.n	8002b02 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d825      	bhi.n	8002b3c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d008      	beq.n	8002b08 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d11f      	bne.n	8002b3c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002afe:	613b      	str	r3, [r7, #16]
    break;
 8002b00:	e01f      	b.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002b04:	613b      	str	r3, [r7, #16]
    break;
 8002b06:	e01c      	b.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e005      	b.n	8002b30 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
    break;
 8002b3a:	e002      	b.n	8002b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
    break;
 8002b40:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	fb03 f202 	mul.w	r2, r3, r2
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0e5b      	lsrs	r3, r3, #25
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b82:	683b      	ldr	r3, [r7, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	08006604 	.word	0x08006604

08002ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bac:	2300      	movs	r3, #0
 8002bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d040      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d02a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d825      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d026      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d821      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d006      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d81d      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d010      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002be0:	e018      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a88      	ldr	r2, [pc, #544]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bee:	e015      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fb02 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c00:	e00c      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3320      	adds	r3, #32
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fbed 	bl	80033e8 <RCCEx_PLLSAI2_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	74fb      	strb	r3, [r7, #19]
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c28:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c30:	4975      	ldr	r1, [pc, #468]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c38:	e001      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d047      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d030      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d82a      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5e:	d02a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c64:	d824      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d81e      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c7c:	e018      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c7e:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fab4 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c9c:	e00c      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fb9f 	bl	80033e8 <RCCEx_PLLSAI2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cae:	e003      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cbe:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	494e      	ldr	r1, [pc, #312]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002cd4:	e001      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 809f 	beq.w	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cec:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2a:	f7fd ffd9 	bl	8000ce0 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d30:	e009      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fd ffd5 	bl	8000ce0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d902      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	74fb      	strb	r3, [r7, #19]
        break;
 8002d44:	e005      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ef      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d15b      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01f      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d019      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d016      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fd ff94 	bl	8000ce0 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fd ff90 	bl	8000ce0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d902      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd2:	e006      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ec      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e00:	e008      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	74bb      	strb	r3, [r7, #18]
 8002e06:	e005      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e14:	7c7b      	ldrb	r3, [r7, #17]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4ba0      	ldr	r3, [pc, #640]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a9f      	ldr	r2, [pc, #636]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e32:	4b9a      	ldr	r3, [pc, #616]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	4996      	ldr	r1, [pc, #600]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 020c 	bic.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	498e      	ldr	r1, [pc, #568]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	4985      	ldr	r1, [pc, #532]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e98:	4b80      	ldr	r3, [pc, #512]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	497d      	ldr	r1, [pc, #500]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eba:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	4974      	ldr	r1, [pc, #464]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002edc:	4b6f      	ldr	r3, [pc, #444]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	496c      	ldr	r1, [pc, #432]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efe:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0c:	4963      	ldr	r1, [pc, #396]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f20:	4b5e      	ldr	r3, [pc, #376]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2e:	495b      	ldr	r1, [pc, #364]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	4952      	ldr	r1, [pc, #328]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f64:	4b4d      	ldr	r3, [pc, #308]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	494a      	ldr	r1, [pc, #296]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f86:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	4941      	ldr	r1, [pc, #260]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	4939      	ldr	r1, [pc, #228]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	4930      	ldr	r1, [pc, #192]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a2b      	ldr	r2, [pc, #172]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff4:	60d3      	str	r3, [r2, #12]
 8002ff6:	e011      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003000:	d10c      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f8f9 	bl	8003200 <RCCEx_PLLSAI1_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d04d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003030:	d108      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003042:	e012      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003050:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003062:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003072:	d106      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800307e:	60d3      	str	r3, [r2, #12]
 8003080:	e020      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308a:	d109      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a02      	ldr	r2, [pc, #8]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	60d3      	str	r3, [r2, #12]
 8003098:	e014      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f8a5 	bl	8003200 <RCCEx_PLLSAI1_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d028      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030de:	4947      	ldr	r1, [pc, #284]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ee:	d106      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a41      	ldr	r2, [pc, #260]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030fa:	60d3      	str	r3, [r2, #12]
 80030fc:	e011      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003106:	d10c      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f876 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800312e:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	492f      	ldr	r1, [pc, #188]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003150:	d10c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f851 	bl	8003200 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317e:	f023 0204 	bic.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	491c      	ldr	r1, [pc, #112]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800319c:	4b17      	ldr	r3, [pc, #92]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800319e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a2:	f023 0218 	bic.w	r2, r3, #24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	4913      	ldr	r1, [pc, #76]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d0:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800321a:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
       ||
 800322e:	2b00      	cmp	r3, #0
 8003230:	d142      	bne.n	80032b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e03f      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d018      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x72>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d825      	bhi.n	8003290 <RCCEx_PLLSAI1_Config+0x90>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <RCCEx_PLLSAI1_Config+0x4e>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d009      	beq.n	8003260 <RCCEx_PLLSAI1_Config+0x60>
 800324c:	e020      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e01a      	b.n	8003296 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003260:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e013      	b.n	800329a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003272:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800328e:	e006      	b.n	800329e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800329e:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4949      	ldr	r1, [pc, #292]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 8086 	bne.w	80033cc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd fd08 	bl	8000ce0 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d2:	e009      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d4:	f7fd fd04 	bl	8000ce0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	73fb      	strb	r3, [r7, #15]
        break;
 80032e6:	e005      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ef      	bne.n	80032d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d113      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	0211      	lsls	r1, r2, #8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	06d2      	lsls	r2, r2, #27
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6852      	ldr	r2, [r2, #4]
 800331a:	3a01      	subs	r2, #1
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	430a      	orrs	r2, r1
 8003320:	492d      	ldr	r1, [pc, #180]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]
 8003326:	e02d      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d115      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	0211      	lsls	r1, r2, #8
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6912      	ldr	r2, [r2, #16]
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0552      	lsls	r2, r2, #21
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	3a01      	subs	r2, #1
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	430a      	orrs	r2, r1
 8003352:	4921      	ldr	r1, [pc, #132]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	610b      	str	r3, [r1, #16]
 8003358:	e014      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	0211      	lsls	r1, r2, #8
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6952      	ldr	r2, [r2, #20]
 800336c:	0852      	lsrs	r2, r2, #1
 800336e:	3a01      	subs	r2, #1
 8003370:	0652      	lsls	r2, r2, #25
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6852      	ldr	r2, [r2, #4]
 8003378:	3a01      	subs	r2, #1
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800338a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800338e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd fca6 	bl	8000ce0 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003398:	f7fd fca2 	bl	8000ce0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
          break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	07ff800f 	.word	0x07ff800f
 80033e0:	ff9f800f 	.word	0xff9f800f
 80033e4:	f9ff800f 	.word	0xf9ff800f

080033e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d103      	bne.n	800341a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
       ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d142      	bne.n	80034a0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e03f      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d018      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x72>
 8003428:	2b03      	cmp	r3, #3
 800342a:	d825      	bhi.n	8003478 <RCCEx_PLLSAI2_Config+0x90>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <RCCEx_PLLSAI2_Config+0x4e>
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x60>
 8003434:	e020      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11d      	bne.n	800347e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e01a      	b.n	800347e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003448:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003458:	e013      	b.n	8003482 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345a:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003466:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003476:	e006      	b.n	8003486 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e004      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003486:	bf00      	nop
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4949      	ldr	r1, [pc, #292]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8086 	bne.w	80035b4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034a8:	4b45      	ldr	r3, [pc, #276]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a44      	ldr	r2, [pc, #272]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fc14 	bl	8000ce0 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ba:	e009      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034bc:	f7fd fc10 	bl	8000ce0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	73fb      	strb	r3, [r7, #15]
        break;
 80034ce:	e005      	b.n	80034dc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d0:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ef      	bne.n	80034bc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d168      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d113      	bne.n	8003510 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	0211      	lsls	r1, r2, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	06d2      	lsls	r2, r2, #27
 80034fc:	4311      	orrs	r1, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6852      	ldr	r2, [r2, #4]
 8003502:	3a01      	subs	r2, #1
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	430a      	orrs	r2, r1
 8003508:	492d      	ldr	r1, [pc, #180]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	614b      	str	r3, [r1, #20]
 800350e:	e02d      	b.n	800356c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d115      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0552      	lsls	r2, r2, #21
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6852      	ldr	r2, [r2, #4]
 8003534:	3a01      	subs	r2, #1
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	430a      	orrs	r2, r1
 800353a:	4921      	ldr	r1, [pc, #132]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	614b      	str	r3, [r1, #20]
 8003540:	e014      	b.n	800356c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	4b21      	ldr	r3, [pc, #132]	; (80035cc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	0211      	lsls	r1, r2, #8
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6952      	ldr	r2, [r2, #20]
 8003554:	0852      	lsrs	r2, r2, #1
 8003556:	3a01      	subs	r2, #1
 8003558:	0652      	lsls	r2, r2, #25
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6852      	ldr	r2, [r2, #4]
 8003560:	3a01      	subs	r2, #1
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	430a      	orrs	r2, r1
 8003566:	4916      	ldr	r1, [pc, #88]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003568:	4313      	orrs	r3, r2
 800356a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd fbb2 	bl	8000ce0 <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800357e:	e009      	b.n	8003594 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003580:	f7fd fbae 	bl	8000ce0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	73fb      	strb	r3, [r7, #15]
          break;
 8003592:	e005      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ef      	beq.n	8003580 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	4904      	ldr	r1, [pc, #16]	; (80035c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	07ff800f 	.word	0x07ff800f
 80035c8:	ff9f800f 	.word	0xff9f800f
 80035cc:	f9ff800f 	.word	0xf9ff800f

080035d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e049      	b.n	8003676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f001 fe1c 	bl	8005234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 fab6 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d001      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04f      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_TIM_Base_Start_IT+0xc4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d018      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_TIM_Base_Start_IT+0xc8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_TIM_Base_Start_IT+0xcc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <HAL_TIM_Base_Start_IT+0xd0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_TIM_Base_Start_IT+0xd4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_Base_Start_IT+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d115      	bne.n	8003722 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_TIM_Base_Start_IT+0xdc>)
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d015      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d011      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	e008      	b.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e000      	b.n	8003736 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0202 	mvn.w	r2, #2
 800378c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9ce 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9c0 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f9d1 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f9a4 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f996 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f9a7 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f97a 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f96c 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f97d 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b10      	cmp	r3, #16
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0210 	mvn.w	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f950 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f942 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f953 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 f968 	bl	8004bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fafe 	bl	8003f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 faf1 	bl	8003f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f901 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d10e      	bne.n	8003996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d107      	bne.n	8003996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0220 	mvn.w	r2, #32
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fab1 	bl	8003ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_ConfigClockSource+0x1c>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0b6      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x18a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	d03e      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0xd8>
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fc:	f200 8087 	bhi.w	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a04:	f000 8086 	beq.w	8003b14 <HAL_TIM_ConfigClockSource+0x176>
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d87f      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a0e:	2b70      	cmp	r3, #112	; 0x70
 8003a10:	d01a      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0xaa>
 8003a12:	2b70      	cmp	r3, #112	; 0x70
 8003a14:	d87b      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a16:	2b60      	cmp	r3, #96	; 0x60
 8003a18:	d050      	beq.n	8003abc <HAL_TIM_ConfigClockSource+0x11e>
 8003a1a:	2b60      	cmp	r3, #96	; 0x60
 8003a1c:	d877      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a1e:	2b50      	cmp	r3, #80	; 0x50
 8003a20:	d03c      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0xfe>
 8003a22:	2b50      	cmp	r3, #80	; 0x50
 8003a24:	d873      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d058      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0x13e>
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d86f      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d064      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x15e>
 8003a32:	2b30      	cmp	r3, #48	; 0x30
 8003a34:	d86b      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d060      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x15e>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d867      	bhi.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d05c      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x15e>
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d05a      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0x15e>
 8003a46:	e062      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f000 f9a6 	bl	8003da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
      break;
 8003a74:	e04f      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f000 f98f 	bl	8003da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a98:	609a      	str	r2, [r3, #8]
      break;
 8003a9a:	e03c      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f000 f903 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2150      	movs	r1, #80	; 0x50
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f95c 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003aba:	e02c      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f000 f922 	bl	8003d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2160      	movs	r1, #96	; 0x60
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f94c 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003ada:	e01c      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f000 f8e3 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f93c 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003afa:	e00c      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 f933 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e003      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      break;
 8003b12:	e000      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a40      	ldr	r2, [pc, #256]	; (8003c94 <TIM_Base_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3d      	ldr	r2, [pc, #244]	; (8003c98 <TIM_Base_SetConfig+0x118>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <TIM_Base_SetConfig+0x11c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3b      	ldr	r2, [pc, #236]	; (8003ca0 <TIM_Base_SetConfig+0x120>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3a      	ldr	r2, [pc, #232]	; (8003ca4 <TIM_Base_SetConfig+0x124>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <TIM_Base_SetConfig+0x114>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01f      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d01b      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <TIM_Base_SetConfig+0x118>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d017      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <TIM_Base_SetConfig+0x11c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <TIM_Base_SetConfig+0x120>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <TIM_Base_SetConfig+0x124>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <TIM_Base_SetConfig+0x128>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a27      	ldr	r2, [pc, #156]	; (8003cac <TIM_Base_SetConfig+0x12c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x9a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <TIM_Base_SetConfig+0x130>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <TIM_Base_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0xf8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <TIM_Base_SetConfig+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0xf8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <TIM_Base_SetConfig+0x128>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0xf8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a10      	ldr	r2, [pc, #64]	; (8003cac <TIM_Base_SetConfig+0x12c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0xf8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <TIM_Base_SetConfig+0x130>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d103      	bne.n	8003c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	615a      	str	r2, [r3, #20]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800

08003cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 030a 	bic.w	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0210 	bic.w	r2, r3, #16
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f043 0307 	orr.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e068      	b.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e042      	b.n	8003fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f001 f98f 	bl	800527c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	; 0x24
 8003f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f82c 	bl	8003fd4 <UART_SetConfig>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb1c 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fba3 	bl	8004710 <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b08c      	sub	sp, #48	; 0x30
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4baa      	ldr	r3, [pc, #680]	; (80042ac <UART_SetConfig+0x2d8>)
 8004004:	4013      	ands	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a9f      	ldr	r2, [pc, #636]	; (80042b0 <UART_SetConfig+0x2dc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	4313      	orrs	r3, r2
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800404a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004054:	430b      	orrs	r3, r1
 8004056:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f023 010f 	bic.w	r1, r3, #15
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a90      	ldr	r2, [pc, #576]	; (80042b4 <UART_SetConfig+0x2e0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d125      	bne.n	80040c4 <UART_SetConfig+0xf0>
 8004078:	4b8f      	ldr	r3, [pc, #572]	; (80042b8 <UART_SetConfig+0x2e4>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81a      	bhi.n	80040bc <UART_SetConfig+0xe8>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0xb8>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040b5 	.word	0x080040b5
 800409c:	2301      	movs	r3, #1
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a2:	e116      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80040a4:	2302      	movs	r3, #2
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040aa:	e112      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80040ac:	2304      	movs	r3, #4
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b2:	e10e      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80040b4:	2308      	movs	r3, #8
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ba:	e10a      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80040bc:	2310      	movs	r3, #16
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c2:	e106      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a7c      	ldr	r2, [pc, #496]	; (80042bc <UART_SetConfig+0x2e8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d138      	bne.n	8004140 <UART_SetConfig+0x16c>
 80040ce:	4b7a      	ldr	r3, [pc, #488]	; (80042b8 <UART_SetConfig+0x2e4>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d82d      	bhi.n	8004138 <UART_SetConfig+0x164>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <UART_SetConfig+0x110>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004119 	.word	0x08004119
 80040e8:	08004139 	.word	0x08004139
 80040ec:	08004139 	.word	0x08004139
 80040f0:	08004139 	.word	0x08004139
 80040f4:	08004129 	.word	0x08004129
 80040f8:	08004139 	.word	0x08004139
 80040fc:	08004139 	.word	0x08004139
 8004100:	08004139 	.word	0x08004139
 8004104:	08004121 	.word	0x08004121
 8004108:	08004139 	.word	0x08004139
 800410c:	08004139 	.word	0x08004139
 8004110:	08004139 	.word	0x08004139
 8004114:	08004131 	.word	0x08004131
 8004118:	2300      	movs	r3, #0
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411e:	e0d8      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004120:	2302      	movs	r3, #2
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004126:	e0d4      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004128:	2304      	movs	r3, #4
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412e:	e0d0      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004130:	2308      	movs	r3, #8
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004136:	e0cc      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004138:	2310      	movs	r3, #16
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413e:	e0c8      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <UART_SetConfig+0x2ec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d125      	bne.n	8004196 <UART_SetConfig+0x1c2>
 800414a:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <UART_SetConfig+0x2e4>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d016      	beq.n	8004186 <UART_SetConfig+0x1b2>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d818      	bhi.n	800418e <UART_SetConfig+0x1ba>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d00a      	beq.n	8004176 <UART_SetConfig+0x1a2>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d814      	bhi.n	800418e <UART_SetConfig+0x1ba>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <UART_SetConfig+0x19a>
 8004168:	2b10      	cmp	r3, #16
 800416a:	d008      	beq.n	800417e <UART_SetConfig+0x1aa>
 800416c:	e00f      	b.n	800418e <UART_SetConfig+0x1ba>
 800416e:	2300      	movs	r3, #0
 8004170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004174:	e0ad      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004176:	2302      	movs	r3, #2
 8004178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417c:	e0a9      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800417e:	2304      	movs	r3, #4
 8004180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004184:	e0a5      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004186:	2308      	movs	r3, #8
 8004188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418c:	e0a1      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800418e:	2310      	movs	r3, #16
 8004190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004194:	e09d      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a4a      	ldr	r2, [pc, #296]	; (80042c4 <UART_SetConfig+0x2f0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d125      	bne.n	80041ec <UART_SetConfig+0x218>
 80041a0:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <UART_SetConfig+0x2e4>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041aa:	2bc0      	cmp	r3, #192	; 0xc0
 80041ac:	d016      	beq.n	80041dc <UART_SetConfig+0x208>
 80041ae:	2bc0      	cmp	r3, #192	; 0xc0
 80041b0:	d818      	bhi.n	80041e4 <UART_SetConfig+0x210>
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d00a      	beq.n	80041cc <UART_SetConfig+0x1f8>
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d814      	bhi.n	80041e4 <UART_SetConfig+0x210>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <UART_SetConfig+0x1f0>
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d008      	beq.n	80041d4 <UART_SetConfig+0x200>
 80041c2:	e00f      	b.n	80041e4 <UART_SetConfig+0x210>
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ca:	e082      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e07e      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e07a      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e2:	e076      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ea:	e072      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a35      	ldr	r2, [pc, #212]	; (80042c8 <UART_SetConfig+0x2f4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d12a      	bne.n	800424c <UART_SetConfig+0x278>
 80041f6:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <UART_SetConfig+0x2e4>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d01a      	beq.n	800423c <UART_SetConfig+0x268>
 8004206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420a:	d81b      	bhi.n	8004244 <UART_SetConfig+0x270>
 800420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004210:	d00c      	beq.n	800422c <UART_SetConfig+0x258>
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d815      	bhi.n	8004244 <UART_SetConfig+0x270>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <UART_SetConfig+0x250>
 800421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004220:	d008      	beq.n	8004234 <UART_SetConfig+0x260>
 8004222:	e00f      	b.n	8004244 <UART_SetConfig+0x270>
 8004224:	2300      	movs	r3, #0
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422a:	e052      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800422c:	2302      	movs	r3, #2
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004232:	e04e      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423a:	e04a      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004242:	e046      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424a:	e042      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <UART_SetConfig+0x2dc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d13a      	bne.n	80042cc <UART_SetConfig+0x2f8>
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <UART_SetConfig+0x2e4>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004264:	d01a      	beq.n	800429c <UART_SetConfig+0x2c8>
 8004266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426a:	d81b      	bhi.n	80042a4 <UART_SetConfig+0x2d0>
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d00c      	beq.n	800428c <UART_SetConfig+0x2b8>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d815      	bhi.n	80042a4 <UART_SetConfig+0x2d0>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <UART_SetConfig+0x2b0>
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d008      	beq.n	8004294 <UART_SetConfig+0x2c0>
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x2d0>
 8004284:	2300      	movs	r3, #0
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e022      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e01e      	b.n	80042d2 <UART_SetConfig+0x2fe>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429a:	e01a      	b.n	80042d2 <UART_SetConfig+0x2fe>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a2:	e016      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042aa:	e012      	b.n	80042d2 <UART_SetConfig+0x2fe>
 80042ac:	cfff69f3 	.word	0xcfff69f3
 80042b0:	40008000 	.word	0x40008000
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40004400 	.word	0x40004400
 80042c0:	40004800 	.word	0x40004800
 80042c4:	40004c00 	.word	0x40004c00
 80042c8:	40005000 	.word	0x40005000
 80042cc:	2310      	movs	r3, #16
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4aae      	ldr	r2, [pc, #696]	; (8004590 <UART_SetConfig+0x5bc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	f040 8097 	bne.w	800440c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d823      	bhi.n	800432e <UART_SetConfig+0x35a>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x318>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004311 	.word	0x08004311
 80042f0:	0800432f 	.word	0x0800432f
 80042f4:	08004319 	.word	0x08004319
 80042f8:	0800432f 	.word	0x0800432f
 80042fc:	0800431f 	.word	0x0800431f
 8004300:	0800432f 	.word	0x0800432f
 8004304:	0800432f 	.word	0x0800432f
 8004308:	0800432f 	.word	0x0800432f
 800430c:	08004327 	.word	0x08004327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fb5a 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004314:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004316:	e010      	b.n	800433a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004318:	4b9e      	ldr	r3, [pc, #632]	; (8004594 <UART_SetConfig+0x5c0>)
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800431c:	e00d      	b.n	800433a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431e:	f7fe fabb 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004324:	e009      	b.n	800433a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800432c:	e005      	b.n	800433a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8130 	beq.w	80045a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	4a94      	ldr	r2, [pc, #592]	; (8004598 <UART_SetConfig+0x5c4>)
 8004348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800434c:	461a      	mov	r2, r3
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	fbb3 f3f2 	udiv	r3, r3, r2
 8004354:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	d305      	bcc.n	8004372 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	429a      	cmp	r2, r3
 8004370:	d903      	bls.n	800437a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004378:	e113      	b.n	80045a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2200      	movs	r2, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	60fa      	str	r2, [r7, #12]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	4a84      	ldr	r2, [pc, #528]	; (8004598 <UART_SetConfig+0x5c4>)
 8004388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800438c:	b29b      	uxth	r3, r3
 800438e:	2200      	movs	r2, #0
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800439c:	f7fc fab6 	bl	800090c <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	020b      	lsls	r3, r1, #8
 80043b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043b6:	0202      	lsls	r2, r0, #8
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	6849      	ldr	r1, [r1, #4]
 80043bc:	0849      	lsrs	r1, r1, #1
 80043be:	2000      	movs	r0, #0
 80043c0:	460c      	mov	r4, r1
 80043c2:	4605      	mov	r5, r0
 80043c4:	eb12 0804 	adds.w	r8, r2, r4
 80043c8:	eb43 0905 	adc.w	r9, r3, r5
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	469a      	mov	sl, r3
 80043d4:	4693      	mov	fp, r2
 80043d6:	4652      	mov	r2, sl
 80043d8:	465b      	mov	r3, fp
 80043da:	4640      	mov	r0, r8
 80043dc:	4649      	mov	r1, r9
 80043de:	f7fc fa95 	bl	800090c <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4613      	mov	r3, r2
 80043e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f0:	d308      	bcc.n	8004404 <UART_SetConfig+0x430>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d204      	bcs.n	8004404 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	e0ce      	b.n	80045a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800440a:	e0ca      	b.n	80045a2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d166      	bne.n	80044e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800441a:	2b08      	cmp	r3, #8
 800441c:	d827      	bhi.n	800446e <UART_SetConfig+0x49a>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x450>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fabe 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800444e:	e014      	b.n	800447a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe fad0 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b4e      	ldr	r3, [pc, #312]	; (8004594 <UART_SetConfig+0x5c0>)
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fa1b 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8090 	beq.w	80045a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	4a44      	ldr	r2, [pc, #272]	; (8004598 <UART_SetConfig+0x5c4>)
 8004488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448c:	461a      	mov	r2, r3
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	fbb3 f3f2 	udiv	r3, r3, r2
 8004494:	005a      	lsls	r2, r3, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	441a      	add	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d916      	bls.n	80044dc <UART_SetConfig+0x508>
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d212      	bcs.n	80044dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f023 030f 	bic.w	r3, r3, #15
 80044be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	8bfb      	ldrh	r3, [r7, #30]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	8bfa      	ldrh	r2, [r7, #30]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	e062      	b.n	80045a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044e2:	e05e      	b.n	80045a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d828      	bhi.n	800453e <UART_SetConfig+0x56a>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x520>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004529 	.word	0x08004529
 8004500:	0800453f 	.word	0x0800453f
 8004504:	0800452f 	.word	0x0800452f
 8004508:	0800453f 	.word	0x0800453f
 800450c:	0800453f 	.word	0x0800453f
 8004510:	0800453f 	.word	0x0800453f
 8004514:	08004537 	.word	0x08004537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe fa56 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800451e:	e014      	b.n	800454a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fa68 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8004524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004526:	e010      	b.n	800454a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <UART_SetConfig+0x5c0>)
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800452c:	e00d      	b.n	800454a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7fe f9b3 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004534:	e009      	b.n	800454a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800453c:	e005      	b.n	800454a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004548:	bf00      	nop
    }

    if (pclk != 0U)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d028      	beq.n	80045a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	4a10      	ldr	r2, [pc, #64]	; (8004598 <UART_SetConfig+0x5c4>)
 8004556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800455a:	461a      	mov	r2, r3
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	441a      	add	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	d910      	bls.n	800459c <UART_SetConfig+0x5c8>
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d20c      	bcs.n	800459c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	b29a      	uxth	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x5ce>
 800458e:	bf00      	nop
 8004590:	40008000 	.word	0x40008000
 8004594:	00f42400 	.word	0x00f42400
 8004598:	080065c4 	.word	0x080065c4
      }
      else
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3730      	adds	r7, #48	; 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004720:	f7fc fade 	bl	8000ce0 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f82f 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e025      	b.n	800479e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f819 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b09c      	sub	sp, #112	; 0x70
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	e0a9      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047be:	f000 80a5 	beq.w	800490c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fc fa8d 	bl	8000ce0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d140      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ec:	667b      	str	r3, [r7, #100]	; 0x64
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e6      	bne.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	663b      	str	r3, [r7, #96]	; 0x60
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800482a:	64ba      	str	r2, [r7, #72]	; 0x48
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e069      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d051      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004876:	d149      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004880:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
 80048a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048d4:	623a      	str	r2, [r7, #32]
 80048d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e010      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	f43f af46 	beq.w	80047b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3770      	adds	r7, #112	; 0x70
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UARTEx_DisableFifoMode+0x16>
 8004948:	2302      	movs	r3, #2
 800494a:	e027      	b.n	800499c <HAL_UARTEx_DisableFifoMode+0x66>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800497a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049bc:	2302      	movs	r3, #2
 80049be:	e02d      	b.n	8004a1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f84f 	bl	8004aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e02d      	b.n	8004a98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f811 	bl	8004aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d108      	bne.n	8004ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ac0:	e031      	b.n	8004b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	0e5b      	lsrs	r3, r3, #25
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	0f5b      	lsrs	r3, r3, #29
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aea:	7bbb      	ldrb	r3, [r7, #14]
 8004aec:	7b3a      	ldrb	r2, [r7, #12]
 8004aee:	4911      	ldr	r1, [pc, #68]	; (8004b34 <UARTEx_SetNbDataToProcess+0x94>)
 8004af0:	5c8a      	ldrb	r2, [r1, r2]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004af6:	7b3a      	ldrb	r2, [r7, #12]
 8004af8:	490f      	ldr	r1, [pc, #60]	; (8004b38 <UARTEx_SetNbDataToProcess+0x98>)
 8004afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	7b7a      	ldrb	r2, [r7, #13]
 8004b0c:	4909      	ldr	r1, [pc, #36]	; (8004b34 <UARTEx_SetNbDataToProcess+0x94>)
 8004b0e:	5c8a      	ldrb	r2, [r1, r2]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b14:	7b7a      	ldrb	r2, [r7, #13]
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <UARTEx_SetNbDataToProcess+0x98>)
 8004b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	080065dc 	.word	0x080065dc
 8004b38:	080065e4 	.word	0x080065e4

08004b3c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004b44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004b48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004b54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004b58:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004b5c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004b64:	e000      	b.n	8004b68 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004b66:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004b68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f9      	beq.n	8004b66 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004b72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004b7c:	687b      	ldr	r3, [r7, #4]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Define our interrupt handlers
// Handler for button interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9c:	d104      	bne.n	8004ba8 <HAL_GPIO_EXTI_Callback+0x1c>
		//note_selector = (note_selector + 1)%3; // cycle through three notes
		HAL_GPIO_TogglePin(myLed_GPIO_Port, myLed_Pin); // toggle LED
 8004b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ba2:	4803      	ldr	r0, [pc, #12]	; (8004bb0 <HAL_GPIO_EXTI_Callback+0x24>)
 8004ba4:	f7fd f82e 	bl	8001c04 <HAL_GPIO_TogglePin>


	}
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	48000400 	.word	0x48000400

08004bb4 <HAL_TIM_PeriodElapsedCallback>:

// Handler for timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	sine_wave_value = sine_wave_values[note_data_index];
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004bca:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t) sine_wave_values[note_data_index]);
 8004bcc:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 3a90 	vmov	r3, s15
 8004be2:	2200      	movs	r2, #0
 8004be4:	2110      	movs	r1, #16
 8004be6:	4812      	ldr	r0, [pc, #72]	; (8004c30 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004be8:	f7fc fa2f 	bl	800104a <HAL_DAC_SetValue>
	note_data_index = (note_data_index + 1) % 15;
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004bf4:	fb83 1302 	smull	r1, r3, r3, r2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	10d9      	asrs	r1, r3, #3
 8004bfc:	17d3      	asrs	r3, r2, #31
 8004bfe:	1ac9      	subs	r1, r1, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a5b      	subs	r3, r3, r1
 8004c06:	1ad1      	subs	r1, r2, r3
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004c0a:	6019      	str	r1, [r3, #0]
	printf(note_data_index);
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fd35 	bl	8005680 <iprintf>
	printf("Timer Interrupt");
 8004c16:	4808      	ldr	r0, [pc, #32]	; (8004c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004c18:	f000 fd32 	bl	8005680 <iprintf>
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000208 	.word	0x20000208
 8004c28:	2000020c 	.word	0x2000020c
 8004c2c:	20000248 	.word	0x20000248
 8004c30:	20000090 	.word	0x20000090
 8004c34:	88888889 	.word	0x88888889
 8004c38:	080065b4 	.word	0x080065b4

08004c3c <_write>:

// for printf
int _write(int file, char *ptr, int len) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e009      	b.n	8004c62 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	60ba      	str	r2, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff70 	bl	8004b3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	dbf1      	blt.n	8004c4e <_write+0x12>
	}
	return len;
 8004c6a:	687b      	ldr	r3, [r7, #4]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	0000      	movs	r0, r0
	...

08004c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c7e:	f7fb ffc7 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c82:	f000 f865 	bl	8004d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c86:	f000 f9bb 	bl	8005000 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c8a:	f000 f98f 	bl	8004fac <MX_DMA_Init>
  MX_DAC1_Init();
 8004c8e:	f000 f8b1 	bl	8004df4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8004c92:	f000 f8f1 	bl	8004e78 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004c96:	f000 f93d 	bl	8004f14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize DAC
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4926      	ldr	r1, [pc, #152]	; (8004d38 <main+0xc0>)
 8004c9e:	4827      	ldr	r0, [pc, #156]	; (8004d3c <main+0xc4>)
 8004ca0:	f7fc fb38 	bl	8001314 <HAL_DACEx_SelfCalibrate>
  //HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_2);//from part 1


  // Start DAC and timer
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4825      	ldr	r0, [pc, #148]	; (8004d3c <main+0xc4>)
 8004ca8:	f7fc f97d 	bl	8000fa6 <HAL_DAC_Start>
  //HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);//from part 1
  HAL_TIM_Base_Start_IT(&htim2); //Start the timer in interrupt mode
 8004cac:	4824      	ldr	r0, [pc, #144]	; (8004d40 <main+0xc8>)
 8004cae:	f7fe fce7 	bl	8003680 <HAL_TIM_Base_Start_IT>
  // ----------------------------------------------------------------------------------------------------------------------------------------
  // Part 2 Code below
  // ----------------------------------------------------------------------------------------------------------------------------------------

  // create an array of sine wave values using CMSIS library
  for (int i = 0; i < 15; i++) {
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	e035      	b.n	8004d24 <main+0xac>
	  sine_wave_values[i] = (arm_sin_f32(2*PI*i/15)+1) * 2047.5; // add 1 such that no negative values, max is 2 so multiply by 2047.5 for signal
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004d44 <main+0xcc>
 8004cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cca:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004cce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cd2:	eeb0 0a47 	vmov.f32	s0, s14
 8004cd6:	f000 fc5b 	bl	8005590 <arm_sin_f32>
 8004cda:	eef0 7a40 	vmov.f32	s15, s0
 8004cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ce6:	ee17 0a90 	vmov	r0, s15
 8004cea:	f7fb fd67 	bl	80007bc <__aeabi_f2d>
 8004cee:	a310      	add	r3, pc, #64	; (adr r3, 8004d30 <main+0xb8>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fad4 	bl	80002a0 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f7fb fdb4 	bl	800086c <__aeabi_d2f>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4910      	ldr	r1, [pc, #64]	; (8004d48 <main+0xd0>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	601a      	str	r2, [r3, #0]
	  sine_wave_value = sine_wave_values[i];
 8004d10:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <main+0xd0>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <main+0xd4>)
 8004d1c:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 15; i++) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3301      	adds	r3, #1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b0e      	cmp	r3, #14
 8004d28:	ddc6      	ble.n	8004cb8 <main+0x40>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d2a:	e7fe      	b.n	8004d2a <main+0xb2>
 8004d2c:	f3af 8000 	nop.w
 8004d30:	00000000 	.word	0x00000000
 8004d34:	409ffe00 	.word	0x409ffe00
 8004d38:	200001e0 	.word	0x200001e0
 8004d3c:	20000090 	.word	0x20000090
 8004d40:	20000104 	.word	0x20000104
 8004d44:	40c90fdb 	.word	0x40c90fdb
 8004d48:	2000020c 	.word	0x2000020c
 8004d4c:	20000248 	.word	0x20000248

08004d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b096      	sub	sp, #88	; 0x58
 8004d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	2244      	movs	r2, #68	; 0x44
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fc86 	bl	8005670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d64:	463b      	mov	r3, r7
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fc ff98 	bl	8001ca8 <HAL_PWREx_ControlVoltageScaling>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004d7e:	f000 f9c1 	bl	8005104 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004d82:	2310      	movs	r3, #16
 8004d84:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d86:	2301      	movs	r3, #1
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d8e:	2360      	movs	r3, #96	; 0x60
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d92:	2302      	movs	r3, #2
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004d96:	2301      	movs	r3, #1
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004d9e:	233c      	movs	r3, #60	; 0x3c
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004da2:	2302      	movs	r3, #2
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004da6:	2302      	movs	r3, #2
 8004da8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd f81c 	bl	8001df0 <HAL_RCC_OscConfig>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004dbe:	f000 f9a1 	bl	8005104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dc2:	230f      	movs	r3, #15
 8004dc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	2105      	movs	r1, #5
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fc22 	bl	8002624 <HAL_RCC_ClockConfig>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004de6:	f000 f98d 	bl	8005104 <Error_Handler>
  }
}
 8004dea:	bf00      	nop
 8004dec:	3758      	adds	r7, #88	; 0x58
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	2228      	movs	r2, #40	; 0x28
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fc35 	bl	8005670 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <MX_DAC1_Init+0x7c>)
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <MX_DAC1_Init+0x80>)
 8004e0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004e0c:	4818      	ldr	r0, [pc, #96]	; (8004e70 <MX_DAC1_Init+0x7c>)
 8004e0e:	f7fc f8a8 	bl	8000f62 <HAL_DAC_Init>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004e18:	f000 f974 	bl	8005104 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004e20:	230a      	movs	r3, #10
 8004e22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e28:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e36:	463b      	mov	r3, r7
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	480c      	ldr	r0, [pc, #48]	; (8004e70 <MX_DAC1_Init+0x7c>)
 8004e3e:	f7fc f929 	bl	8001094 <HAL_DAC_ConfigChannel>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8004e48:	f000 f95c 	bl	8005104 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004e50:	463b      	mov	r3, r7
 8004e52:	2210      	movs	r2, #16
 8004e54:	4619      	mov	r1, r3
 8004e56:	4806      	ldr	r0, [pc, #24]	; (8004e70 <MX_DAC1_Init+0x7c>)
 8004e58:	f7fc f91c 	bl	8001094 <HAL_DAC_ConfigChannel>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8004e62:	f000 f94f 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004e66:	bf00      	nop
 8004e68:	3728      	adds	r7, #40	; 0x28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000090 	.word	0x20000090
 8004e74:	40007400 	.word	0x40007400

08004e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e7e:	f107 0310 	add.w	r3, r7, #16
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004eac:	f240 7216 	movw	r2, #1814	; 0x716
 8004eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ebe:	4814      	ldr	r0, [pc, #80]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004ec0:	f7fe fb86 	bl	80035d0 <HAL_TIM_Base_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004eca:	f000 f91b 	bl	8005104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	4619      	mov	r1, r3
 8004eda:	480d      	ldr	r0, [pc, #52]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004edc:	f7fe fd5f 	bl	800399e <HAL_TIM_ConfigClockSource>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004ee6:	f000 f90d 	bl	8005104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004eea:	2320      	movs	r3, #32
 8004eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4806      	ldr	r0, [pc, #24]	; (8004f10 <MX_TIM2_Init+0x98>)
 8004ef8:	f7fe ff76 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004f02:	f000 f8ff 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f06:	bf00      	nop
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000104 	.word	0x20000104

08004f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <MX_USART2_UART_Init+0x94>)
 8004f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f1e:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f3a:	220c      	movs	r2, #12
 8004f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f50:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f5c:	4811      	ldr	r0, [pc, #68]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f5e:	f7fe ffe9 	bl	8003f34 <HAL_UART_Init>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004f68:	f000 f8cc 	bl	8005104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f70:	f7ff fd1a 	bl	80049a8 <HAL_UARTEx_SetTxFifoThreshold>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004f7a:	f000 f8c3 	bl	8005104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4808      	ldr	r0, [pc, #32]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f82:	f7ff fd4f 	bl	8004a24 <HAL_UARTEx_SetRxFifoThreshold>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004f8c:	f000 f8ba 	bl	8005104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f90:	4804      	ldr	r0, [pc, #16]	; (8004fa4 <MX_USART2_UART_Init+0x90>)
 8004f92:	f7ff fcd0 	bl	8004936 <HAL_UARTEx_DisableFifoMode>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004f9c:	f000 f8b2 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fa0:	bf00      	nop
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000150 	.word	0x20000150
 8004fa8:	40004400 	.word	0x40004400

08004fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004fb2:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb6:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	6493      	str	r3, [r2, #72]	; 0x48
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6493      	str	r3, [r2, #72]	; 0x48
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <MX_DMA_Init+0x50>)
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	200b      	movs	r0, #11
 8004fe8:	f7fb ff85 	bl	8000ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fec:	200b      	movs	r0, #11
 8004fee:	f7fb ff9e 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000

08005000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005016:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	4a37      	ldr	r2, [pc, #220]	; (80050f8 <MX_GPIO_Init+0xf8>)
 800501c:	f043 0304 	orr.w	r3, r3, #4
 8005020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005022:	4b35      	ldr	r3, [pc, #212]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	4a31      	ldr	r2, [pc, #196]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <MX_GPIO_Init+0xf8>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005046:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <MX_GPIO_Init+0xf8>)
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <MX_GPIO_Init+0xf8>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <MX_GPIO_Init+0xf8>)
 800506c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8005076:	2200      	movs	r2, #0
 8005078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800507c:	481f      	ldr	r0, [pc, #124]	; (80050fc <MX_GPIO_Init+0xfc>)
 800507e:	f7fc fda9 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8005082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800508c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8005092:	f107 0314 	add.w	r3, r7, #20
 8005096:	4619      	mov	r1, r3
 8005098:	4819      	ldr	r0, [pc, #100]	; (8005100 <MX_GPIO_Init+0x100>)
 800509a:	f7fc fc09 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800509e:	230c      	movs	r3, #12
 80050a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80050ae:	2308      	movs	r3, #8
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	f107 0314 	add.w	r3, r7, #20
 80050b6:	4619      	mov	r1, r3
 80050b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050bc:	f7fc fbf8 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 80050c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ce:	2300      	movs	r3, #0
 80050d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	4808      	ldr	r0, [pc, #32]	; (80050fc <MX_GPIO_Init+0xfc>)
 80050da:	f7fc fbe9 	bl	80018b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	2028      	movs	r0, #40	; 0x28
 80050e4:	f7fb ff07 	bl	8000ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050e8:	2028      	movs	r0, #40	; 0x28
 80050ea:	f7fb ff20 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	48000400 	.word	0x48000400
 8005100:	48000800 	.word	0x48000800

08005104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005108:	b672      	cpsid	i
}
 800510a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800510c:	e7fe      	b.n	800510c <Error_Handler+0x8>
	...

08005110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_MspInit+0x44>)
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <HAL_MspInit+0x44>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6613      	str	r3, [r2, #96]	; 0x60
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_MspInit+0x44>)
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_MspInit+0x44>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <HAL_MspInit+0x44>)
 8005134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005138:	6593      	str	r3, [r2, #88]	; 0x58
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <HAL_MspInit+0x44>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	60da      	str	r2, [r3, #12]
 800516e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <HAL_DAC_MspInit+0xcc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d14f      	bne.n	800521a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800517a:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 8005180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
 8005186:	4b28      	ldr	r3, [pc, #160]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	4a24      	ldr	r2, [pc, #144]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800519e:	4b22      	ldr	r3, [pc, #136]	; (8005228 <HAL_DAC_MspInit+0xd0>)
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051aa:	2330      	movs	r3, #48	; 0x30
 80051ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ae:	2303      	movs	r3, #3
 80051b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b6:	f107 0314 	add.w	r3, r7, #20
 80051ba:	4619      	mov	r1, r3
 80051bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c0:	f7fc fb76 	bl	80018b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051c6:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <HAL_DAC_MspInit+0xd8>)
 80051c8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80051ca:	4b18      	ldr	r3, [pc, #96]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051cc:	2206      	movs	r2, #6
 80051ce:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051d0:	4b16      	ldr	r3, [pc, #88]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051d2:	2210      	movs	r2, #16
 80051d4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051d8:	2200      	movs	r2, #0
 80051da:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051e8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051f4:	2220      	movs	r2, #32
 80051f6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_DAC_MspInit+0xd4>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80051fe:	480b      	ldr	r0, [pc, #44]	; (800522c <HAL_DAC_MspInit+0xd4>)
 8005200:	f7fc f99c 	bl	800153c <HAL_DMA_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800520a:	f7ff ff7b 	bl	8005104 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <HAL_DAC_MspInit+0xd4>)
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	4a05      	ldr	r2, [pc, #20]	; (800522c <HAL_DAC_MspInit+0xd4>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800521a:	bf00      	nop
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40007400 	.word	0x40007400
 8005228:	40021000 	.word	0x40021000
 800522c:	200000a4 	.word	0x200000a4
 8005230:	40020008 	.word	0x40020008

08005234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d113      	bne.n	800526e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <HAL_TIM_Base_MspInit+0x44>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <HAL_TIM_Base_MspInit+0x44>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6593      	str	r3, [r2, #88]	; 0x58
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_TIM_Base_MspInit+0x44>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	201c      	movs	r0, #28
 8005264:	f7fb fe47 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005268:	201c      	movs	r0, #28
 800526a:	f7fb fe60 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000

0800527c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b0b0      	sub	sp, #192	; 0xc0
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005284:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005294:	f107 0318 	add.w	r3, r7, #24
 8005298:	2294      	movs	r2, #148	; 0x94
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f9e7 	bl	8005670 <memset>
  if(huart->Instance==USART2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <HAL_UART_MspInit+0xf4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d15d      	bne.n	8005368 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80052ac:	2302      	movs	r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80052b0:	2300      	movs	r3, #0
 80052b2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052b4:	f107 0318 	add.w	r3, r7, #24
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd fc71 	bl	8002ba0 <HAL_RCCEx_PeriphCLKConfig>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80052c4:	f7ff ff1e 	bl	8005104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	6593      	str	r3, [r2, #88]	; 0x58
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e4:	4a23      	ldr	r2, [pc, #140]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_UART_MspInit+0xf8>)
 80052fe:	f043 0308 	orr.w	r3, r3, #8
 8005302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <HAL_UART_MspInit+0xf8>)
 8005306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005324:	2303      	movs	r3, #3
 8005326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800532a:	2303      	movs	r3, #3
 800532c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005330:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800533a:	f7fc fab9 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800533e:	2320      	movs	r3, #32
 8005340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005350:	2303      	movs	r3, #3
 8005352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005356:	2307      	movs	r3, #7
 8005358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800535c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005360:	4619      	mov	r1, r3
 8005362:	4805      	ldr	r0, [pc, #20]	; (8005378 <HAL_UART_MspInit+0xfc>)
 8005364:	f7fc faa4 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005368:	bf00      	nop
 800536a:	37c0      	adds	r7, #192	; 0xc0
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40004400 	.word	0x40004400
 8005374:	40021000 	.word	0x40021000
 8005378:	48000c00 	.word	0x48000c00

0800537c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005380:	e7fe      	b.n	8005380 <NMI_Handler+0x4>

08005382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005386:	e7fe      	b.n	8005386 <HardFault_Handler+0x4>

08005388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800538c:	e7fe      	b.n	800538c <MemManage_Handler+0x4>

0800538e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005392:	e7fe      	b.n	8005392 <BusFault_Handler+0x4>

08005394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005398:	e7fe      	b.n	8005398 <UsageFault_Handler+0x4>

0800539a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800539a:	b480      	push	{r7}
 800539c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053c8:	f7fb fc76 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053cc:	bf00      	nop
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80053d4:	4802      	ldr	r0, [pc, #8]	; (80053e0 <DMA1_Channel1_IRQHandler+0x10>)
 80053d6:	f7fc f959 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200000a4 	.word	0x200000a4

080053e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053e8:	4802      	ldr	r0, [pc, #8]	; (80053f4 <TIM2_IRQHandler+0x10>)
 80053ea:	f7fe f9b9 	bl	8003760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000104 	.word	0x20000104

080053f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 80053fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005400:	f7fc fc1a 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}

08005408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e00a      	b.n	8005430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800541a:	f3af 8000 	nop.w
 800541e:	4601      	mov	r1, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	60ba      	str	r2, [r7, #8]
 8005426:	b2ca      	uxtb	r2, r1
 8005428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3301      	adds	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	dbf0      	blt.n	800541a <_read+0x12>
  }

  return len;
 8005438:	687b      	ldr	r3, [r7, #4]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800546a:	605a      	str	r2, [r3, #4]
  return 0;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <_isatty>:

int _isatty(int file)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <_sbrk+0x5c>)
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <_sbrk+0x60>)
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <_sbrk+0x64>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <_sbrk+0x64>)
 80054ca:	4a12      	ldr	r2, [pc, #72]	; (8005514 <_sbrk+0x68>)
 80054cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ce:	4b10      	ldr	r3, [pc, #64]	; (8005510 <_sbrk+0x64>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d207      	bcs.n	80054ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054dc:	f000 f89e 	bl	800561c <__errno>
 80054e0:	4603      	mov	r3, r0
 80054e2:	220c      	movs	r2, #12
 80054e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ea:	e009      	b.n	8005500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <_sbrk+0x64>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <_sbrk+0x64>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	4a05      	ldr	r2, [pc, #20]	; (8005510 <_sbrk+0x64>)
 80054fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054fe:	68fb      	ldr	r3, [r7, #12]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200a0000 	.word	0x200a0000
 800550c:	00000400 	.word	0x00000400
 8005510:	2000024c 	.word	0x2000024c
 8005514:	20000260 	.word	0x20000260

08005518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <SystemInit+0x20>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	4a05      	ldr	r2, [pc, #20]	; (8005538 <SystemInit+0x20>)
 8005524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800553c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005574 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005540:	f7ff ffea 	bl	8005518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005544:	480c      	ldr	r0, [pc, #48]	; (8005578 <LoopForever+0x6>)
  ldr r1, =_edata
 8005546:	490d      	ldr	r1, [pc, #52]	; (800557c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <LoopForever+0xe>)
  movs r3, #0
 800554a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800554c:	e002      	b.n	8005554 <LoopCopyDataInit>

0800554e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800554e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005552:	3304      	adds	r3, #4

08005554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005558:	d3f9      	bcc.n	800554e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800555c:	4c0a      	ldr	r4, [pc, #40]	; (8005588 <LoopForever+0x16>)
  movs r3, #0
 800555e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005560:	e001      	b.n	8005566 <LoopFillZerobss>

08005562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005564:	3204      	adds	r2, #4

08005566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005568:	d3fb      	bcc.n	8005562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800556a:	f000 f85d 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800556e:	f7ff fb83 	bl	8004c78 <main>

08005572 <LoopForever>:

LoopForever:
    b LoopForever
 8005572:	e7fe      	b.n	8005572 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005574:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800557c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005580:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 8005584:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005588:	20000260 	.word	0x20000260

0800558c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800558c:	e7fe      	b.n	800558c <ADC1_IRQHandler>
	...

08005590 <arm_sin_f32>:
 8005590:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005610 <arm_sin_f32+0x80>
 8005594:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005598:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80055a4:	d504      	bpl.n	80055b0 <arm_sin_f32+0x20>
 80055a6:	ee17 3a90 	vmov	r3, s15
 80055aa:	3b01      	subs	r3, #1
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005614 <arm_sin_f32+0x84>
 80055b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055bc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80055c0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80055c4:	ee17 3a90 	vmov	r3, s15
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ce:	d21a      	bcs.n	8005606 <arm_sin_f32+0x76>
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055de:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <arm_sin_f32+0x88>)
 80055e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80055e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80055ec:	ed93 7a00 	vldr	s14, [r3]
 80055f0:	edd2 6a00 	vldr	s13, [r2]
 80055f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80055f8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80055fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005600:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005604:	4770      	bx	lr
 8005606:	ee30 0a47 	vsub.f32	s0, s0, s14
 800560a:	2101      	movs	r1, #1
 800560c:	2300      	movs	r3, #0
 800560e:	e7e6      	b.n	80055de <arm_sin_f32+0x4e>
 8005610:	3e22f983 	.word	0x3e22f983
 8005614:	44000000 	.word	0x44000000
 8005618:	08006634 	.word	0x08006634

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	; (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d0d      	ldr	r5, [pc, #52]	; (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2600      	movs	r6, #0
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4d0b      	ldr	r5, [pc, #44]	; (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	; (800566c <__libc_init_array+0x44>)
 800563c:	f000 ffae 	bl	800659c <_init>
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2600      	movs	r6, #0
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f855 3b04 	ldr.w	r3, [r5], #4
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	08006ed8 	.word	0x08006ed8
 8005664:	08006ed8 	.word	0x08006ed8
 8005668:	08006ed8 	.word	0x08006ed8
 800566c:	08006edc 	.word	0x08006edc

08005670 <memset>:
 8005670:	4402      	add	r2, r0
 8005672:	4603      	mov	r3, r0
 8005674:	4293      	cmp	r3, r2
 8005676:	d100      	bne.n	800567a <memset+0xa>
 8005678:	4770      	bx	lr
 800567a:	f803 1b01 	strb.w	r1, [r3], #1
 800567e:	e7f9      	b.n	8005674 <memset+0x4>

08005680 <iprintf>:
 8005680:	b40f      	push	{r0, r1, r2, r3}
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <iprintf+0x2c>)
 8005684:	b513      	push	{r0, r1, r4, lr}
 8005686:	681c      	ldr	r4, [r3, #0]
 8005688:	b124      	cbz	r4, 8005694 <iprintf+0x14>
 800568a:	69a3      	ldr	r3, [r4, #24]
 800568c:	b913      	cbnz	r3, 8005694 <iprintf+0x14>
 800568e:	4620      	mov	r0, r4
 8005690:	f000 f866 	bl	8005760 <__sinit>
 8005694:	ab05      	add	r3, sp, #20
 8005696:	9a04      	ldr	r2, [sp, #16]
 8005698:	68a1      	ldr	r1, [r4, #8]
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	4620      	mov	r0, r4
 800569e:	f000 f9bd 	bl	8005a1c <_vfiprintf_r>
 80056a2:	b002      	add	sp, #8
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	b004      	add	sp, #16
 80056aa:	4770      	bx	lr
 80056ac:	2000000c 	.word	0x2000000c

080056b0 <std>:
 80056b0:	2300      	movs	r3, #0
 80056b2:	b510      	push	{r4, lr}
 80056b4:	4604      	mov	r4, r0
 80056b6:	e9c0 3300 	strd	r3, r3, [r0]
 80056ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056be:	6083      	str	r3, [r0, #8]
 80056c0:	8181      	strh	r1, [r0, #12]
 80056c2:	6643      	str	r3, [r0, #100]	; 0x64
 80056c4:	81c2      	strh	r2, [r0, #14]
 80056c6:	6183      	str	r3, [r0, #24]
 80056c8:	4619      	mov	r1, r3
 80056ca:	2208      	movs	r2, #8
 80056cc:	305c      	adds	r0, #92	; 0x5c
 80056ce:	f7ff ffcf 	bl	8005670 <memset>
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <std+0x38>)
 80056d4:	6263      	str	r3, [r4, #36]	; 0x24
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <std+0x3c>)
 80056d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <std+0x40>)
 80056dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <std+0x44>)
 80056e0:	6224      	str	r4, [r4, #32]
 80056e2:	6323      	str	r3, [r4, #48]	; 0x30
 80056e4:	bd10      	pop	{r4, pc}
 80056e6:	bf00      	nop
 80056e8:	08005fc5 	.word	0x08005fc5
 80056ec:	08005fe7 	.word	0x08005fe7
 80056f0:	0800601f 	.word	0x0800601f
 80056f4:	08006043 	.word	0x08006043

080056f8 <_cleanup_r>:
 80056f8:	4901      	ldr	r1, [pc, #4]	; (8005700 <_cleanup_r+0x8>)
 80056fa:	f000 b8af 	b.w	800585c <_fwalk_reent>
 80056fe:	bf00      	nop
 8005700:	0800631d 	.word	0x0800631d

08005704 <__sfmoreglue>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	2268      	movs	r2, #104	; 0x68
 8005708:	1e4d      	subs	r5, r1, #1
 800570a:	4355      	muls	r5, r2
 800570c:	460e      	mov	r6, r1
 800570e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005712:	f000 f8e5 	bl	80058e0 <_malloc_r>
 8005716:	4604      	mov	r4, r0
 8005718:	b140      	cbz	r0, 800572c <__sfmoreglue+0x28>
 800571a:	2100      	movs	r1, #0
 800571c:	e9c0 1600 	strd	r1, r6, [r0]
 8005720:	300c      	adds	r0, #12
 8005722:	60a0      	str	r0, [r4, #8]
 8005724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005728:	f7ff ffa2 	bl	8005670 <memset>
 800572c:	4620      	mov	r0, r4
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <__sfp_lock_acquire>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sfp_lock_acquire+0x8>)
 8005732:	f000 b8b3 	b.w	800589c <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	20000251 	.word	0x20000251

0800573c <__sfp_lock_release>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__sfp_lock_release+0x8>)
 800573e:	f000 b8ae 	b.w	800589e <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	20000251 	.word	0x20000251

08005748 <__sinit_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sinit_lock_acquire+0x8>)
 800574a:	f000 b8a7 	b.w	800589c <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000252 	.word	0x20000252

08005754 <__sinit_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sinit_lock_release+0x8>)
 8005756:	f000 b8a2 	b.w	800589e <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000252 	.word	0x20000252

08005760 <__sinit>:
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	f7ff fff0 	bl	8005748 <__sinit_lock_acquire>
 8005768:	69a3      	ldr	r3, [r4, #24]
 800576a:	b11b      	cbz	r3, 8005774 <__sinit+0x14>
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f7ff bff0 	b.w	8005754 <__sinit_lock_release>
 8005774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005778:	6523      	str	r3, [r4, #80]	; 0x50
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <__sinit+0x68>)
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <__sinit+0x6c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	62a2      	str	r2, [r4, #40]	; 0x28
 8005782:	42a3      	cmp	r3, r4
 8005784:	bf04      	itt	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	61a3      	streq	r3, [r4, #24]
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f820 	bl	80057d0 <__sfp>
 8005790:	6060      	str	r0, [r4, #4]
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f81c 	bl	80057d0 <__sfp>
 8005798:	60a0      	str	r0, [r4, #8]
 800579a:	4620      	mov	r0, r4
 800579c:	f000 f818 	bl	80057d0 <__sfp>
 80057a0:	2200      	movs	r2, #0
 80057a2:	60e0      	str	r0, [r4, #12]
 80057a4:	2104      	movs	r1, #4
 80057a6:	6860      	ldr	r0, [r4, #4]
 80057a8:	f7ff ff82 	bl	80056b0 <std>
 80057ac:	68a0      	ldr	r0, [r4, #8]
 80057ae:	2201      	movs	r2, #1
 80057b0:	2109      	movs	r1, #9
 80057b2:	f7ff ff7d 	bl	80056b0 <std>
 80057b6:	68e0      	ldr	r0, [r4, #12]
 80057b8:	2202      	movs	r2, #2
 80057ba:	2112      	movs	r1, #18
 80057bc:	f7ff ff78 	bl	80056b0 <std>
 80057c0:	2301      	movs	r3, #1
 80057c2:	61a3      	str	r3, [r4, #24]
 80057c4:	e7d2      	b.n	800576c <__sinit+0xc>
 80057c6:	bf00      	nop
 80057c8:	08006e38 	.word	0x08006e38
 80057cc:	080056f9 	.word	0x080056f9

080057d0 <__sfp>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	4607      	mov	r7, r0
 80057d4:	f7ff ffac 	bl	8005730 <__sfp_lock_acquire>
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <__sfp+0x84>)
 80057da:	681e      	ldr	r6, [r3, #0]
 80057dc:	69b3      	ldr	r3, [r6, #24]
 80057de:	b913      	cbnz	r3, 80057e6 <__sfp+0x16>
 80057e0:	4630      	mov	r0, r6
 80057e2:	f7ff ffbd 	bl	8005760 <__sinit>
 80057e6:	3648      	adds	r6, #72	; 0x48
 80057e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	d503      	bpl.n	80057f8 <__sfp+0x28>
 80057f0:	6833      	ldr	r3, [r6, #0]
 80057f2:	b30b      	cbz	r3, 8005838 <__sfp+0x68>
 80057f4:	6836      	ldr	r6, [r6, #0]
 80057f6:	e7f7      	b.n	80057e8 <__sfp+0x18>
 80057f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057fc:	b9d5      	cbnz	r5, 8005834 <__sfp+0x64>
 80057fe:	4b16      	ldr	r3, [pc, #88]	; (8005858 <__sfp+0x88>)
 8005800:	60e3      	str	r3, [r4, #12]
 8005802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005806:	6665      	str	r5, [r4, #100]	; 0x64
 8005808:	f000 f847 	bl	800589a <__retarget_lock_init_recursive>
 800580c:	f7ff ff96 	bl	800573c <__sfp_lock_release>
 8005810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005818:	6025      	str	r5, [r4, #0]
 800581a:	61a5      	str	r5, [r4, #24]
 800581c:	2208      	movs	r2, #8
 800581e:	4629      	mov	r1, r5
 8005820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005824:	f7ff ff24 	bl	8005670 <memset>
 8005828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800582c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005830:	4620      	mov	r0, r4
 8005832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005834:	3468      	adds	r4, #104	; 0x68
 8005836:	e7d9      	b.n	80057ec <__sfp+0x1c>
 8005838:	2104      	movs	r1, #4
 800583a:	4638      	mov	r0, r7
 800583c:	f7ff ff62 	bl	8005704 <__sfmoreglue>
 8005840:	4604      	mov	r4, r0
 8005842:	6030      	str	r0, [r6, #0]
 8005844:	2800      	cmp	r0, #0
 8005846:	d1d5      	bne.n	80057f4 <__sfp+0x24>
 8005848:	f7ff ff78 	bl	800573c <__sfp_lock_release>
 800584c:	230c      	movs	r3, #12
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	e7ee      	b.n	8005830 <__sfp+0x60>
 8005852:	bf00      	nop
 8005854:	08006e38 	.word	0x08006e38
 8005858:	ffff0001 	.word	0xffff0001

0800585c <_fwalk_reent>:
 800585c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005860:	4606      	mov	r6, r0
 8005862:	4688      	mov	r8, r1
 8005864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005868:	2700      	movs	r7, #0
 800586a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800586e:	f1b9 0901 	subs.w	r9, r9, #1
 8005872:	d505      	bpl.n	8005880 <_fwalk_reent+0x24>
 8005874:	6824      	ldr	r4, [r4, #0]
 8005876:	2c00      	cmp	r4, #0
 8005878:	d1f7      	bne.n	800586a <_fwalk_reent+0xe>
 800587a:	4638      	mov	r0, r7
 800587c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005880:	89ab      	ldrh	r3, [r5, #12]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d907      	bls.n	8005896 <_fwalk_reent+0x3a>
 8005886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800588a:	3301      	adds	r3, #1
 800588c:	d003      	beq.n	8005896 <_fwalk_reent+0x3a>
 800588e:	4629      	mov	r1, r5
 8005890:	4630      	mov	r0, r6
 8005892:	47c0      	blx	r8
 8005894:	4307      	orrs	r7, r0
 8005896:	3568      	adds	r5, #104	; 0x68
 8005898:	e7e9      	b.n	800586e <_fwalk_reent+0x12>

0800589a <__retarget_lock_init_recursive>:
 800589a:	4770      	bx	lr

0800589c <__retarget_lock_acquire_recursive>:
 800589c:	4770      	bx	lr

0800589e <__retarget_lock_release_recursive>:
 800589e:	4770      	bx	lr

080058a0 <sbrk_aligned>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	4e0e      	ldr	r6, [pc, #56]	; (80058dc <sbrk_aligned+0x3c>)
 80058a4:	460c      	mov	r4, r1
 80058a6:	6831      	ldr	r1, [r6, #0]
 80058a8:	4605      	mov	r5, r0
 80058aa:	b911      	cbnz	r1, 80058b2 <sbrk_aligned+0x12>
 80058ac:	f000 fb7a 	bl	8005fa4 <_sbrk_r>
 80058b0:	6030      	str	r0, [r6, #0]
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fb75 	bl	8005fa4 <_sbrk_r>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d00a      	beq.n	80058d4 <sbrk_aligned+0x34>
 80058be:	1cc4      	adds	r4, r0, #3
 80058c0:	f024 0403 	bic.w	r4, r4, #3
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d007      	beq.n	80058d8 <sbrk_aligned+0x38>
 80058c8:	1a21      	subs	r1, r4, r0
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 fb6a 	bl	8005fa4 <_sbrk_r>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d101      	bne.n	80058d8 <sbrk_aligned+0x38>
 80058d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	20000258 	.word	0x20000258

080058e0 <_malloc_r>:
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	1ccd      	adds	r5, r1, #3
 80058e6:	f025 0503 	bic.w	r5, r5, #3
 80058ea:	3508      	adds	r5, #8
 80058ec:	2d0c      	cmp	r5, #12
 80058ee:	bf38      	it	cc
 80058f0:	250c      	movcc	r5, #12
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	4607      	mov	r7, r0
 80058f6:	db01      	blt.n	80058fc <_malloc_r+0x1c>
 80058f8:	42a9      	cmp	r1, r5
 80058fa:	d905      	bls.n	8005908 <_malloc_r+0x28>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	2600      	movs	r6, #0
 8005902:	4630      	mov	r0, r6
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	4e2e      	ldr	r6, [pc, #184]	; (80059c4 <_malloc_r+0xe4>)
 800590a:	f000 fdbb 	bl	8006484 <__malloc_lock>
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	461c      	mov	r4, r3
 8005912:	bb34      	cbnz	r4, 8005962 <_malloc_r+0x82>
 8005914:	4629      	mov	r1, r5
 8005916:	4638      	mov	r0, r7
 8005918:	f7ff ffc2 	bl	80058a0 <sbrk_aligned>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	4604      	mov	r4, r0
 8005920:	d14d      	bne.n	80059be <_malloc_r+0xde>
 8005922:	6834      	ldr	r4, [r6, #0]
 8005924:	4626      	mov	r6, r4
 8005926:	2e00      	cmp	r6, #0
 8005928:	d140      	bne.n	80059ac <_malloc_r+0xcc>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	4631      	mov	r1, r6
 800592e:	4638      	mov	r0, r7
 8005930:	eb04 0803 	add.w	r8, r4, r3
 8005934:	f000 fb36 	bl	8005fa4 <_sbrk_r>
 8005938:	4580      	cmp	r8, r0
 800593a:	d13a      	bne.n	80059b2 <_malloc_r+0xd2>
 800593c:	6821      	ldr	r1, [r4, #0]
 800593e:	3503      	adds	r5, #3
 8005940:	1a6d      	subs	r5, r5, r1
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ffa5 	bl	80058a0 <sbrk_aligned>
 8005956:	3001      	adds	r0, #1
 8005958:	d02b      	beq.n	80059b2 <_malloc_r+0xd2>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	442b      	add	r3, r5
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	e00e      	b.n	8005980 <_malloc_r+0xa0>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	1b52      	subs	r2, r2, r5
 8005966:	d41e      	bmi.n	80059a6 <_malloc_r+0xc6>
 8005968:	2a0b      	cmp	r2, #11
 800596a:	d916      	bls.n	800599a <_malloc_r+0xba>
 800596c:	1961      	adds	r1, r4, r5
 800596e:	42a3      	cmp	r3, r4
 8005970:	6025      	str	r5, [r4, #0]
 8005972:	bf18      	it	ne
 8005974:	6059      	strne	r1, [r3, #4]
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	bf08      	it	eq
 800597a:	6031      	streq	r1, [r6, #0]
 800597c:	5162      	str	r2, [r4, r5]
 800597e:	604b      	str	r3, [r1, #4]
 8005980:	4638      	mov	r0, r7
 8005982:	f104 060b 	add.w	r6, r4, #11
 8005986:	f000 fd83 	bl	8006490 <__malloc_unlock>
 800598a:	f026 0607 	bic.w	r6, r6, #7
 800598e:	1d23      	adds	r3, r4, #4
 8005990:	1af2      	subs	r2, r6, r3
 8005992:	d0b6      	beq.n	8005902 <_malloc_r+0x22>
 8005994:	1b9b      	subs	r3, r3, r6
 8005996:	50a3      	str	r3, [r4, r2]
 8005998:	e7b3      	b.n	8005902 <_malloc_r+0x22>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	42a3      	cmp	r3, r4
 800599e:	bf0c      	ite	eq
 80059a0:	6032      	streq	r2, [r6, #0]
 80059a2:	605a      	strne	r2, [r3, #4]
 80059a4:	e7ec      	b.n	8005980 <_malloc_r+0xa0>
 80059a6:	4623      	mov	r3, r4
 80059a8:	6864      	ldr	r4, [r4, #4]
 80059aa:	e7b2      	b.n	8005912 <_malloc_r+0x32>
 80059ac:	4634      	mov	r4, r6
 80059ae:	6876      	ldr	r6, [r6, #4]
 80059b0:	e7b9      	b.n	8005926 <_malloc_r+0x46>
 80059b2:	230c      	movs	r3, #12
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4638      	mov	r0, r7
 80059b8:	f000 fd6a 	bl	8006490 <__malloc_unlock>
 80059bc:	e7a1      	b.n	8005902 <_malloc_r+0x22>
 80059be:	6025      	str	r5, [r4, #0]
 80059c0:	e7de      	b.n	8005980 <_malloc_r+0xa0>
 80059c2:	bf00      	nop
 80059c4:	20000254 	.word	0x20000254

080059c8 <__sfputc_r>:
 80059c8:	6893      	ldr	r3, [r2, #8]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	b410      	push	{r4}
 80059d0:	6093      	str	r3, [r2, #8]
 80059d2:	da08      	bge.n	80059e6 <__sfputc_r+0x1e>
 80059d4:	6994      	ldr	r4, [r2, #24]
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	db01      	blt.n	80059de <__sfputc_r+0x16>
 80059da:	290a      	cmp	r1, #10
 80059dc:	d103      	bne.n	80059e6 <__sfputc_r+0x1e>
 80059de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e2:	f000 bb33 	b.w	800604c <__swbuf_r>
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	1c58      	adds	r0, r3, #1
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	7019      	strb	r1, [r3, #0]
 80059ee:	4608      	mov	r0, r1
 80059f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <__sfputs_r>:
 80059f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	18d5      	adds	r5, r2, r3
 8005a00:	42ac      	cmp	r4, r5
 8005a02:	d101      	bne.n	8005a08 <__sfputs_r+0x12>
 8005a04:	2000      	movs	r0, #0
 8005a06:	e007      	b.n	8005a18 <__sfputs_r+0x22>
 8005a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7ff ffda 	bl	80059c8 <__sfputc_r>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d1f3      	bne.n	8005a00 <__sfputs_r+0xa>
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a1c <_vfiprintf_r>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	460d      	mov	r5, r1
 8005a22:	b09d      	sub	sp, #116	; 0x74
 8005a24:	4614      	mov	r4, r2
 8005a26:	4698      	mov	r8, r3
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b118      	cbz	r0, 8005a34 <_vfiprintf_r+0x18>
 8005a2c:	6983      	ldr	r3, [r0, #24]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x18>
 8005a30:	f7ff fe96 	bl	8005760 <__sinit>
 8005a34:	4b89      	ldr	r3, [pc, #548]	; (8005c5c <_vfiprintf_r+0x240>)
 8005a36:	429d      	cmp	r5, r3
 8005a38:	d11b      	bne.n	8005a72 <_vfiprintf_r+0x56>
 8005a3a:	6875      	ldr	r5, [r6, #4]
 8005a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d405      	bmi.n	8005a4e <_vfiprintf_r+0x32>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	059a      	lsls	r2, r3, #22
 8005a46:	d402      	bmi.n	8005a4e <_vfiprintf_r+0x32>
 8005a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4a:	f7ff ff27 	bl	800589c <__retarget_lock_acquire_recursive>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	d501      	bpl.n	8005a58 <_vfiprintf_r+0x3c>
 8005a54:	692b      	ldr	r3, [r5, #16]
 8005a56:	b9eb      	cbnz	r3, 8005a94 <_vfiprintf_r+0x78>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f000 fb5a 	bl	8006114 <__swsetup_r>
 8005a60:	b1c0      	cbz	r0, 8005a94 <_vfiprintf_r+0x78>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07dc      	lsls	r4, r3, #31
 8005a66:	d50e      	bpl.n	8005a86 <_vfiprintf_r+0x6a>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6c:	b01d      	add	sp, #116	; 0x74
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	4b7b      	ldr	r3, [pc, #492]	; (8005c60 <_vfiprintf_r+0x244>)
 8005a74:	429d      	cmp	r5, r3
 8005a76:	d101      	bne.n	8005a7c <_vfiprintf_r+0x60>
 8005a78:	68b5      	ldr	r5, [r6, #8]
 8005a7a:	e7df      	b.n	8005a3c <_vfiprintf_r+0x20>
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <_vfiprintf_r+0x248>)
 8005a7e:	429d      	cmp	r5, r3
 8005a80:	bf08      	it	eq
 8005a82:	68f5      	ldreq	r5, [r6, #12]
 8005a84:	e7da      	b.n	8005a3c <_vfiprintf_r+0x20>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	0598      	lsls	r0, r3, #22
 8005a8a:	d4ed      	bmi.n	8005a68 <_vfiprintf_r+0x4c>
 8005a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a8e:	f7ff ff06 	bl	800589e <__retarget_lock_release_recursive>
 8005a92:	e7e9      	b.n	8005a68 <_vfiprintf_r+0x4c>
 8005a94:	2300      	movs	r3, #0
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa2:	2330      	movs	r3, #48	; 0x30
 8005aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c68 <_vfiprintf_r+0x24c>
 8005aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aac:	f04f 0901 	mov.w	r9, #1
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	469a      	mov	sl, r3
 8005ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab8:	b10a      	cbz	r2, 8005abe <_vfiprintf_r+0xa2>
 8005aba:	2a25      	cmp	r2, #37	; 0x25
 8005abc:	d1f9      	bne.n	8005ab2 <_vfiprintf_r+0x96>
 8005abe:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac2:	d00b      	beq.n	8005adc <_vfiprintf_r+0xc0>
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ff93 	bl	80059f6 <__sfputs_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f000 80aa 	beq.w	8005c2a <_vfiprintf_r+0x20e>
 8005ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad8:	445a      	add	r2, fp
 8005ada:	9209      	str	r2, [sp, #36]	; 0x24
 8005adc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a2 	beq.w	8005c2a <_vfiprintf_r+0x20e>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af0:	f10a 0a01 	add.w	sl, sl, #1
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005afc:	931a      	str	r3, [sp, #104]	; 0x68
 8005afe:	4654      	mov	r4, sl
 8005b00:	2205      	movs	r2, #5
 8005b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b06:	4858      	ldr	r0, [pc, #352]	; (8005c68 <_vfiprintf_r+0x24c>)
 8005b08:	f7fa fb7a 	bl	8000200 <memchr>
 8005b0c:	9a04      	ldr	r2, [sp, #16]
 8005b0e:	b9d8      	cbnz	r0, 8005b48 <_vfiprintf_r+0x12c>
 8005b10:	06d1      	lsls	r1, r2, #27
 8005b12:	bf44      	itt	mi
 8005b14:	2320      	movmi	r3, #32
 8005b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1a:	0713      	lsls	r3, r2, #28
 8005b1c:	bf44      	itt	mi
 8005b1e:	232b      	movmi	r3, #43	; 0x2b
 8005b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b24:	f89a 3000 	ldrb.w	r3, [sl]
 8005b28:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2a:	d015      	beq.n	8005b58 <_vfiprintf_r+0x13c>
 8005b2c:	9a07      	ldr	r2, [sp, #28]
 8005b2e:	4654      	mov	r4, sl
 8005b30:	2000      	movs	r0, #0
 8005b32:	f04f 0c0a 	mov.w	ip, #10
 8005b36:	4621      	mov	r1, r4
 8005b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b3c:	3b30      	subs	r3, #48	; 0x30
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	d94e      	bls.n	8005be0 <_vfiprintf_r+0x1c4>
 8005b42:	b1b0      	cbz	r0, 8005b72 <_vfiprintf_r+0x156>
 8005b44:	9207      	str	r2, [sp, #28]
 8005b46:	e014      	b.n	8005b72 <_vfiprintf_r+0x156>
 8005b48:	eba0 0308 	sub.w	r3, r0, r8
 8005b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b50:	4313      	orrs	r3, r2
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	46a2      	mov	sl, r4
 8005b56:	e7d2      	b.n	8005afe <_vfiprintf_r+0xe2>
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	1d19      	adds	r1, r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	9103      	str	r1, [sp, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bfbb      	ittet	lt
 8005b64:	425b      	neglt	r3, r3
 8005b66:	f042 0202 	orrlt.w	r2, r2, #2
 8005b6a:	9307      	strge	r3, [sp, #28]
 8005b6c:	9307      	strlt	r3, [sp, #28]
 8005b6e:	bfb8      	it	lt
 8005b70:	9204      	strlt	r2, [sp, #16]
 8005b72:	7823      	ldrb	r3, [r4, #0]
 8005b74:	2b2e      	cmp	r3, #46	; 0x2e
 8005b76:	d10c      	bne.n	8005b92 <_vfiprintf_r+0x176>
 8005b78:	7863      	ldrb	r3, [r4, #1]
 8005b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7c:	d135      	bne.n	8005bea <_vfiprintf_r+0x1ce>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	9203      	str	r2, [sp, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb8      	it	lt
 8005b8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b8e:	3402      	adds	r4, #2
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c78 <_vfiprintf_r+0x25c>
 8005b96:	7821      	ldrb	r1, [r4, #0]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f7fa fb30 	bl	8000200 <memchr>
 8005ba0:	b140      	cbz	r0, 8005bb4 <_vfiprintf_r+0x198>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	eba0 000a 	sub.w	r0, r0, sl
 8005ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	4303      	orrs	r3, r0
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	482c      	ldr	r0, [pc, #176]	; (8005c6c <_vfiprintf_r+0x250>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	f7fa fb1e 	bl	8000200 <memchr>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d03f      	beq.n	8005c48 <_vfiprintf_r+0x22c>
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <_vfiprintf_r+0x254>)
 8005bca:	bb1b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x1f8>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	443b      	add	r3, r7
 8005bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bde:	e767      	b.n	8005ab0 <_vfiprintf_r+0x94>
 8005be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be4:	460c      	mov	r4, r1
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7a5      	b.n	8005b36 <_vfiprintf_r+0x11a>
 8005bea:	2300      	movs	r3, #0
 8005bec:	3401      	adds	r4, #1
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f04f 0c0a 	mov.w	ip, #10
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfc:	3a30      	subs	r2, #48	; 0x30
 8005bfe:	2a09      	cmp	r2, #9
 8005c00:	d903      	bls.n	8005c0a <_vfiprintf_r+0x1ee>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0c5      	beq.n	8005b92 <_vfiprintf_r+0x176>
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	e7c3      	b.n	8005b92 <_vfiprintf_r+0x176>
 8005c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0e:	4604      	mov	r4, r0
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7f0      	b.n	8005bf6 <_vfiprintf_r+0x1da>
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <_vfiprintf_r+0x258>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f3af 8000 	nop.w
 8005c24:	4607      	mov	r7, r0
 8005c26:	1c78      	adds	r0, r7, #1
 8005c28:	d1d6      	bne.n	8005bd8 <_vfiprintf_r+0x1bc>
 8005c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	d405      	bmi.n	8005c3c <_vfiprintf_r+0x220>
 8005c30:	89ab      	ldrh	r3, [r5, #12]
 8005c32:	059a      	lsls	r2, r3, #22
 8005c34:	d402      	bmi.n	8005c3c <_vfiprintf_r+0x220>
 8005c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c38:	f7ff fe31 	bl	800589e <__retarget_lock_release_recursive>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	065b      	lsls	r3, r3, #25
 8005c40:	f53f af12 	bmi.w	8005a68 <_vfiprintf_r+0x4c>
 8005c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c46:	e711      	b.n	8005a6c <_vfiprintf_r+0x50>
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <_vfiprintf_r+0x258>)
 8005c50:	a904      	add	r1, sp, #16
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f880 	bl	8005d58 <_printf_i>
 8005c58:	e7e4      	b.n	8005c24 <_vfiprintf_r+0x208>
 8005c5a:	bf00      	nop
 8005c5c:	08006e5c 	.word	0x08006e5c
 8005c60:	08006e7c 	.word	0x08006e7c
 8005c64:	08006e3c 	.word	0x08006e3c
 8005c68:	08006e9c 	.word	0x08006e9c
 8005c6c:	08006ea6 	.word	0x08006ea6
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059f7 	.word	0x080059f7
 8005c78:	08006ea2 	.word	0x08006ea2

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68e5      	ldr	r5, [r4, #12]
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	bf08      	it	eq
 8005cf0:	1aad      	subeq	r5, r5, r2
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d8 	beq.w	8005f2a <_printf_i+0x1d2>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80a3 	beq.w	8005ec6 <_printf_i+0x16e>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f11 	.word	0x08005f11
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005ef3 	.word	0x08005ef3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f33 	.word	0x08005f33
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005efb 	.word	0x08005efb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0a3      	b.n	8005f4c <_printf_i+0x1f4>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	f101 0304 	add.w	r3, r1, #4
 8005e0e:	d50a      	bpl.n	8005e26 <_printf_i+0xce>
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	2e00      	cmp	r6, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xc8>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	4276      	negs	r6, r6
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	485e      	ldr	r0, [pc, #376]	; (8005f9c <_printf_i+0x244>)
 8005e22:	230a      	movs	r3, #10
 8005e24:	e019      	b.n	8005e5a <_printf_i+0x102>
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2e:	bf18      	it	ne
 8005e30:	b236      	sxthne	r6, r6
 8005e32:	e7ef      	b.n	8005e14 <_printf_i+0xbc>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0601      	lsls	r1, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xec>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xf2>
 8005e44:	0646      	lsls	r6, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	4854      	ldr	r0, [pc, #336]	; (8005f9c <_printf_i+0x244>)
 8005e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4e:	bf0c      	ite	eq
 8005e50:	2308      	moveq	r3, #8
 8005e52:	230a      	movne	r3, #10
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	bfa2      	ittt	ge
 8005e62:	6821      	ldrge	r1, [r4, #0]
 8005e64:	f021 0104 	bicge.w	r1, r1, #4
 8005e68:	6021      	strge	r1, [r4, #0]
 8005e6a:	b90e      	cbnz	r6, 8005e70 <_printf_i+0x118>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d04d      	beq.n	8005f0c <_printf_i+0x1b4>
 8005e70:	4615      	mov	r5, r2
 8005e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e76:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7a:	5dc7      	ldrb	r7, [r0, r7]
 8005e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e80:	4637      	mov	r7, r6
 8005e82:	42bb      	cmp	r3, r7
 8005e84:	460e      	mov	r6, r1
 8005e86:	d9f4      	bls.n	8005e72 <_printf_i+0x11a>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <_printf_i+0x14c>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07de      	lsls	r6, r3, #31
 8005e90:	d508      	bpl.n	8005ea4 <_printf_i+0x14c>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	bfde      	ittt	le
 8005e9a:	2330      	movle	r3, #48	; 0x30
 8005e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ea4:	1b52      	subs	r2, r2, r5
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	f8cd a000 	str.w	sl, [sp]
 8005eac:	464b      	mov	r3, r9
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fee2 	bl	8005c7c <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14c      	bne.n	8005f56 <_printf_i+0x1fe>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec0:	b004      	add	sp, #16
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	4835      	ldr	r0, [pc, #212]	; (8005f9c <_printf_i+0x244>)
 8005ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ecc:	6829      	ldr	r1, [r5, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	061d      	lsls	r5, r3, #24
 8005ed8:	d514      	bpl.n	8005f04 <_printf_i+0x1ac>
 8005eda:	07df      	lsls	r7, r3, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee2:	6023      	strmi	r3, [r4, #0]
 8005ee4:	b91e      	cbnz	r6, 8005eee <_printf_i+0x196>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f023 0320 	bic.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7b0      	b.n	8005e54 <_printf_i+0xfc>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <_printf_i+0x248>)
 8005efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f02:	e7e3      	b.n	8005ecc <_printf_i+0x174>
 8005f04:	0659      	lsls	r1, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2b6      	uxthmi	r6, r6
 8005f0a:	e7e6      	b.n	8005eda <_printf_i+0x182>
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	e7bb      	b.n	8005e88 <_printf_i+0x130>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	6826      	ldr	r6, [r4, #0]
 8005f14:	6961      	ldr	r1, [r4, #20]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6028      	str	r0, [r5, #0]
 8005f1a:	0635      	lsls	r5, r6, #24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0x1cc>
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0x1d2>
 8005f24:	0670      	lsls	r0, r6, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0x1c8>
 8005f28:	8019      	strh	r1, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7ba      	b.n	8005ea8 <_printf_i+0x150>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	1d1a      	adds	r2, r3, #4
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7fa f95e 	bl	8000200 <memchr>
 8005f44:	b108      	cbz	r0, 8005f4a <_printf_i+0x1f2>
 8005f46:	1b40      	subs	r0, r0, r5
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f54:	e7a8      	b.n	8005ea8 <_printf_i+0x150>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0ab      	beq.n	8005ebc <_printf_i+0x164>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	d413      	bmi.n	8005f92 <_printf_i+0x23a>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bfb8      	it	lt
 8005f72:	4618      	movlt	r0, r3
 8005f74:	e7a4      	b.n	8005ec0 <_printf_i+0x168>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d09b      	beq.n	8005ebc <_printf_i+0x164>
 8005f84:	3501      	adds	r5, #1
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	9903      	ldr	r1, [sp, #12]
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dcf2      	bgt.n	8005f76 <_printf_i+0x21e>
 8005f90:	e7eb      	b.n	8005f6a <_printf_i+0x212>
 8005f92:	2500      	movs	r5, #0
 8005f94:	f104 0619 	add.w	r6, r4, #25
 8005f98:	e7f5      	b.n	8005f86 <_printf_i+0x22e>
 8005f9a:	bf00      	nop
 8005f9c:	08006ead 	.word	0x08006ead
 8005fa0:	08006ebe 	.word	0x08006ebe

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7ff fa7c 	bl	80054ac <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	2000025c 	.word	0x2000025c

08005fc4 <__sread>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	f000 fab2 	bl	8006534 <_read_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	bfab      	itete	ge
 8005fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd8:	181b      	addge	r3, r3, r0
 8005fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fde:	bfac      	ite	ge
 8005fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fe2:	81a3      	strhlt	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__swrite>:
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	461f      	mov	r7, r3
 8005fec:	898b      	ldrh	r3, [r1, #12]
 8005fee:	05db      	lsls	r3, r3, #23
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	d505      	bpl.n	8006004 <__swrite+0x1e>
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	2200      	movs	r2, #0
 8006000:	f000 f9c8 	bl	8006394 <_lseek_r>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4628      	mov	r0, r5
 8006016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	f000 b869 	b.w	80060f0 <_write_r>

0800601e <__sseek>:
 800601e:	b510      	push	{r4, lr}
 8006020:	460c      	mov	r4, r1
 8006022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006026:	f000 f9b5 	bl	8006394 <_lseek_r>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	bf15      	itete	ne
 8006030:	6560      	strne	r0, [r4, #84]	; 0x54
 8006032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800603a:	81a3      	strheq	r3, [r4, #12]
 800603c:	bf18      	it	ne
 800603e:	81a3      	strhne	r3, [r4, #12]
 8006040:	bd10      	pop	{r4, pc}

08006042 <__sclose>:
 8006042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006046:	f000 b8d3 	b.w	80061f0 <_close_r>
	...

0800604c <__swbuf_r>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	460e      	mov	r6, r1
 8006050:	4614      	mov	r4, r2
 8006052:	4605      	mov	r5, r0
 8006054:	b118      	cbz	r0, 800605e <__swbuf_r+0x12>
 8006056:	6983      	ldr	r3, [r0, #24]
 8006058:	b90b      	cbnz	r3, 800605e <__swbuf_r+0x12>
 800605a:	f7ff fb81 	bl	8005760 <__sinit>
 800605e:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <__swbuf_r+0x98>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d12b      	bne.n	80060bc <__swbuf_r+0x70>
 8006064:	686c      	ldr	r4, [r5, #4]
 8006066:	69a3      	ldr	r3, [r4, #24]
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	071a      	lsls	r2, r3, #28
 800606e:	d52f      	bpl.n	80060d0 <__swbuf_r+0x84>
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	b36b      	cbz	r3, 80060d0 <__swbuf_r+0x84>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	1ac0      	subs	r0, r0, r3
 800607a:	6963      	ldr	r3, [r4, #20]
 800607c:	b2f6      	uxtb	r6, r6
 800607e:	4283      	cmp	r3, r0
 8006080:	4637      	mov	r7, r6
 8006082:	dc04      	bgt.n	800608e <__swbuf_r+0x42>
 8006084:	4621      	mov	r1, r4
 8006086:	4628      	mov	r0, r5
 8006088:	f000 f948 	bl	800631c <_fflush_r>
 800608c:	bb30      	cbnz	r0, 80060dc <__swbuf_r+0x90>
 800608e:	68a3      	ldr	r3, [r4, #8]
 8006090:	3b01      	subs	r3, #1
 8006092:	60a3      	str	r3, [r4, #8]
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	701e      	strb	r6, [r3, #0]
 800609c:	6963      	ldr	r3, [r4, #20]
 800609e:	3001      	adds	r0, #1
 80060a0:	4283      	cmp	r3, r0
 80060a2:	d004      	beq.n	80060ae <__swbuf_r+0x62>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	07db      	lsls	r3, r3, #31
 80060a8:	d506      	bpl.n	80060b8 <__swbuf_r+0x6c>
 80060aa:	2e0a      	cmp	r6, #10
 80060ac:	d104      	bne.n	80060b8 <__swbuf_r+0x6c>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 f933 	bl	800631c <_fflush_r>
 80060b6:	b988      	cbnz	r0, 80060dc <__swbuf_r+0x90>
 80060b8:	4638      	mov	r0, r7
 80060ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <__swbuf_r+0x9c>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	d101      	bne.n	80060c6 <__swbuf_r+0x7a>
 80060c2:	68ac      	ldr	r4, [r5, #8]
 80060c4:	e7cf      	b.n	8006066 <__swbuf_r+0x1a>
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <__swbuf_r+0xa0>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	bf08      	it	eq
 80060cc:	68ec      	ldreq	r4, [r5, #12]
 80060ce:	e7ca      	b.n	8006066 <__swbuf_r+0x1a>
 80060d0:	4621      	mov	r1, r4
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f81e 	bl	8006114 <__swsetup_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d0cb      	beq.n	8006074 <__swbuf_r+0x28>
 80060dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060e0:	e7ea      	b.n	80060b8 <__swbuf_r+0x6c>
 80060e2:	bf00      	nop
 80060e4:	08006e5c 	.word	0x08006e5c
 80060e8:	08006e7c 	.word	0x08006e7c
 80060ec:	08006e3c 	.word	0x08006e3c

080060f0 <_write_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	; (8006110 <_write_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fe fd9c 	bl	8004c3c <_write>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_write_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_write_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	2000025c 	.word	0x2000025c

08006114 <__swsetup_r>:
 8006114:	4b32      	ldr	r3, [pc, #200]	; (80061e0 <__swsetup_r+0xcc>)
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	681d      	ldr	r5, [r3, #0]
 800611a:	4606      	mov	r6, r0
 800611c:	460c      	mov	r4, r1
 800611e:	b125      	cbz	r5, 800612a <__swsetup_r+0x16>
 8006120:	69ab      	ldr	r3, [r5, #24]
 8006122:	b913      	cbnz	r3, 800612a <__swsetup_r+0x16>
 8006124:	4628      	mov	r0, r5
 8006126:	f7ff fb1b 	bl	8005760 <__sinit>
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <__swsetup_r+0xd0>)
 800612c:	429c      	cmp	r4, r3
 800612e:	d10f      	bne.n	8006150 <__swsetup_r+0x3c>
 8006130:	686c      	ldr	r4, [r5, #4]
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006138:	0719      	lsls	r1, r3, #28
 800613a:	d42c      	bmi.n	8006196 <__swsetup_r+0x82>
 800613c:	06dd      	lsls	r5, r3, #27
 800613e:	d411      	bmi.n	8006164 <__swsetup_r+0x50>
 8006140:	2309      	movs	r3, #9
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800614e:	e03e      	b.n	80061ce <__swsetup_r+0xba>
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <__swsetup_r+0xd4>)
 8006152:	429c      	cmp	r4, r3
 8006154:	d101      	bne.n	800615a <__swsetup_r+0x46>
 8006156:	68ac      	ldr	r4, [r5, #8]
 8006158:	e7eb      	b.n	8006132 <__swsetup_r+0x1e>
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <__swsetup_r+0xd8>)
 800615c:	429c      	cmp	r4, r3
 800615e:	bf08      	it	eq
 8006160:	68ec      	ldreq	r4, [r5, #12]
 8006162:	e7e6      	b.n	8006132 <__swsetup_r+0x1e>
 8006164:	0758      	lsls	r0, r3, #29
 8006166:	d512      	bpl.n	800618e <__swsetup_r+0x7a>
 8006168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800616a:	b141      	cbz	r1, 800617e <__swsetup_r+0x6a>
 800616c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006170:	4299      	cmp	r1, r3
 8006172:	d002      	beq.n	800617a <__swsetup_r+0x66>
 8006174:	4630      	mov	r0, r6
 8006176:	f000 f991 	bl	800649c <_free_r>
 800617a:	2300      	movs	r3, #0
 800617c:	6363      	str	r3, [r4, #52]	; 0x34
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	2300      	movs	r3, #0
 8006188:	6063      	str	r3, [r4, #4]
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	f043 0308 	orr.w	r3, r3, #8
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	b94b      	cbnz	r3, 80061ae <__swsetup_r+0x9a>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a4:	d003      	beq.n	80061ae <__swsetup_r+0x9a>
 80061a6:	4621      	mov	r1, r4
 80061a8:	4630      	mov	r0, r6
 80061aa:	f000 f92b 	bl	8006404 <__smakebuf_r>
 80061ae:	89a0      	ldrh	r0, [r4, #12]
 80061b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061b4:	f010 0301 	ands.w	r3, r0, #1
 80061b8:	d00a      	beq.n	80061d0 <__swsetup_r+0xbc>
 80061ba:	2300      	movs	r3, #0
 80061bc:	60a3      	str	r3, [r4, #8]
 80061be:	6963      	ldr	r3, [r4, #20]
 80061c0:	425b      	negs	r3, r3
 80061c2:	61a3      	str	r3, [r4, #24]
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	b943      	cbnz	r3, 80061da <__swsetup_r+0xc6>
 80061c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061cc:	d1ba      	bne.n	8006144 <__swsetup_r+0x30>
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	0781      	lsls	r1, r0, #30
 80061d2:	bf58      	it	pl
 80061d4:	6963      	ldrpl	r3, [r4, #20]
 80061d6:	60a3      	str	r3, [r4, #8]
 80061d8:	e7f4      	b.n	80061c4 <__swsetup_r+0xb0>
 80061da:	2000      	movs	r0, #0
 80061dc:	e7f7      	b.n	80061ce <__swsetup_r+0xba>
 80061de:	bf00      	nop
 80061e0:	2000000c 	.word	0x2000000c
 80061e4:	08006e5c 	.word	0x08006e5c
 80061e8:	08006e7c 	.word	0x08006e7c
 80061ec:	08006e3c 	.word	0x08006e3c

080061f0 <_close_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_close_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7ff f921 	bl	8005442 <_close>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_close_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_close_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	2000025c 	.word	0x2000025c

08006210 <__sflush_r>:
 8006210:	898a      	ldrh	r2, [r1, #12]
 8006212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	4605      	mov	r5, r0
 8006218:	0710      	lsls	r0, r2, #28
 800621a:	460c      	mov	r4, r1
 800621c:	d458      	bmi.n	80062d0 <__sflush_r+0xc0>
 800621e:	684b      	ldr	r3, [r1, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dc05      	bgt.n	8006230 <__sflush_r+0x20>
 8006224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	dc02      	bgt.n	8006230 <__sflush_r+0x20>
 800622a:	2000      	movs	r0, #0
 800622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006232:	2e00      	cmp	r6, #0
 8006234:	d0f9      	beq.n	800622a <__sflush_r+0x1a>
 8006236:	2300      	movs	r3, #0
 8006238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800623c:	682f      	ldr	r7, [r5, #0]
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	d032      	beq.n	80062a8 <__sflush_r+0x98>
 8006242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	075a      	lsls	r2, r3, #29
 8006248:	d505      	bpl.n	8006256 <__sflush_r+0x46>
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006250:	b10b      	cbz	r3, 8006256 <__sflush_r+0x46>
 8006252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006254:	1ac0      	subs	r0, r0, r3
 8006256:	2300      	movs	r3, #0
 8006258:	4602      	mov	r2, r0
 800625a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800625c:	6a21      	ldr	r1, [r4, #32]
 800625e:	4628      	mov	r0, r5
 8006260:	47b0      	blx	r6
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	d106      	bne.n	8006276 <__sflush_r+0x66>
 8006268:	6829      	ldr	r1, [r5, #0]
 800626a:	291d      	cmp	r1, #29
 800626c:	d82c      	bhi.n	80062c8 <__sflush_r+0xb8>
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <__sflush_r+0x108>)
 8006270:	40ca      	lsrs	r2, r1
 8006272:	07d6      	lsls	r6, r2, #31
 8006274:	d528      	bpl.n	80062c8 <__sflush_r+0xb8>
 8006276:	2200      	movs	r2, #0
 8006278:	6062      	str	r2, [r4, #4]
 800627a:	04d9      	lsls	r1, r3, #19
 800627c:	6922      	ldr	r2, [r4, #16]
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	d504      	bpl.n	800628c <__sflush_r+0x7c>
 8006282:	1c42      	adds	r2, r0, #1
 8006284:	d101      	bne.n	800628a <__sflush_r+0x7a>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	b903      	cbnz	r3, 800628c <__sflush_r+0x7c>
 800628a:	6560      	str	r0, [r4, #84]	; 0x54
 800628c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628e:	602f      	str	r7, [r5, #0]
 8006290:	2900      	cmp	r1, #0
 8006292:	d0ca      	beq.n	800622a <__sflush_r+0x1a>
 8006294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <__sflush_r+0x92>
 800629c:	4628      	mov	r0, r5
 800629e:	f000 f8fd 	bl	800649c <_free_r>
 80062a2:	2000      	movs	r0, #0
 80062a4:	6360      	str	r0, [r4, #52]	; 0x34
 80062a6:	e7c1      	b.n	800622c <__sflush_r+0x1c>
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	2301      	movs	r3, #1
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b0      	blx	r6
 80062b0:	1c41      	adds	r1, r0, #1
 80062b2:	d1c7      	bne.n	8006244 <__sflush_r+0x34>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0c4      	beq.n	8006244 <__sflush_r+0x34>
 80062ba:	2b1d      	cmp	r3, #29
 80062bc:	d001      	beq.n	80062c2 <__sflush_r+0xb2>
 80062be:	2b16      	cmp	r3, #22
 80062c0:	d101      	bne.n	80062c6 <__sflush_r+0xb6>
 80062c2:	602f      	str	r7, [r5, #0]
 80062c4:	e7b1      	b.n	800622a <__sflush_r+0x1a>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	e7ad      	b.n	800622c <__sflush_r+0x1c>
 80062d0:	690f      	ldr	r7, [r1, #16]
 80062d2:	2f00      	cmp	r7, #0
 80062d4:	d0a9      	beq.n	800622a <__sflush_r+0x1a>
 80062d6:	0793      	lsls	r3, r2, #30
 80062d8:	680e      	ldr	r6, [r1, #0]
 80062da:	bf08      	it	eq
 80062dc:	694b      	ldreq	r3, [r1, #20]
 80062de:	600f      	str	r7, [r1, #0]
 80062e0:	bf18      	it	ne
 80062e2:	2300      	movne	r3, #0
 80062e4:	eba6 0807 	sub.w	r8, r6, r7
 80062e8:	608b      	str	r3, [r1, #8]
 80062ea:	f1b8 0f00 	cmp.w	r8, #0
 80062ee:	dd9c      	ble.n	800622a <__sflush_r+0x1a>
 80062f0:	6a21      	ldr	r1, [r4, #32]
 80062f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062f4:	4643      	mov	r3, r8
 80062f6:	463a      	mov	r2, r7
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b0      	blx	r6
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dc06      	bgt.n	800630e <__sflush_r+0xfe>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630c:	e78e      	b.n	800622c <__sflush_r+0x1c>
 800630e:	4407      	add	r7, r0
 8006310:	eba8 0800 	sub.w	r8, r8, r0
 8006314:	e7e9      	b.n	80062ea <__sflush_r+0xda>
 8006316:	bf00      	nop
 8006318:	20400001 	.word	0x20400001

0800631c <_fflush_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	4605      	mov	r5, r0
 8006322:	460c      	mov	r4, r1
 8006324:	b913      	cbnz	r3, 800632c <_fflush_r+0x10>
 8006326:	2500      	movs	r5, #0
 8006328:	4628      	mov	r0, r5
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	b118      	cbz	r0, 8006336 <_fflush_r+0x1a>
 800632e:	6983      	ldr	r3, [r0, #24]
 8006330:	b90b      	cbnz	r3, 8006336 <_fflush_r+0x1a>
 8006332:	f7ff fa15 	bl	8005760 <__sinit>
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <_fflush_r+0x6c>)
 8006338:	429c      	cmp	r4, r3
 800633a:	d11b      	bne.n	8006374 <_fflush_r+0x58>
 800633c:	686c      	ldr	r4, [r5, #4]
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <_fflush_r+0xa>
 8006346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006348:	07d0      	lsls	r0, r2, #31
 800634a:	d404      	bmi.n	8006356 <_fflush_r+0x3a>
 800634c:	0599      	lsls	r1, r3, #22
 800634e:	d402      	bmi.n	8006356 <_fflush_r+0x3a>
 8006350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006352:	f7ff faa3 	bl	800589c <__retarget_lock_acquire_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	4621      	mov	r1, r4
 800635a:	f7ff ff59 	bl	8006210 <__sflush_r>
 800635e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006360:	07da      	lsls	r2, r3, #31
 8006362:	4605      	mov	r5, r0
 8006364:	d4e0      	bmi.n	8006328 <_fflush_r+0xc>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	d4dd      	bmi.n	8006328 <_fflush_r+0xc>
 800636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800636e:	f7ff fa96 	bl	800589e <__retarget_lock_release_recursive>
 8006372:	e7d9      	b.n	8006328 <_fflush_r+0xc>
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <_fflush_r+0x70>)
 8006376:	429c      	cmp	r4, r3
 8006378:	d101      	bne.n	800637e <_fflush_r+0x62>
 800637a:	68ac      	ldr	r4, [r5, #8]
 800637c:	e7df      	b.n	800633e <_fflush_r+0x22>
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <_fflush_r+0x74>)
 8006380:	429c      	cmp	r4, r3
 8006382:	bf08      	it	eq
 8006384:	68ec      	ldreq	r4, [r5, #12]
 8006386:	e7da      	b.n	800633e <_fflush_r+0x22>
 8006388:	08006e5c 	.word	0x08006e5c
 800638c:	08006e7c 	.word	0x08006e7c
 8006390:	08006e3c 	.word	0x08006e3c

08006394 <_lseek_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	; (80063b4 <_lseek_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7ff f874 	bl	8005490 <_lseek>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_lseek_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_lseek_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	2000025c 	.word	0x2000025c

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460e      	mov	r6, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	da08      	bge.n	80063dc <__swhatbuf_r+0x24>
 80063ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	061a      	lsls	r2, r3, #24
 80063d4:	d410      	bmi.n	80063f8 <__swhatbuf_r+0x40>
 80063d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063da:	e00e      	b.n	80063fa <__swhatbuf_r+0x42>
 80063dc:	466a      	mov	r2, sp
 80063de:	f000 f8bb 	bl	8006558 <_fstat_r>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	dbf1      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063e6:	9a01      	ldr	r2, [sp, #4]
 80063e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063f0:	425a      	negs	r2, r3
 80063f2:	415a      	adcs	r2, r3
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	e7ee      	b.n	80063d6 <__swhatbuf_r+0x1e>
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	2000      	movs	r0, #0
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	b016      	add	sp, #88	; 0x58
 8006400:	bd70      	pop	{r4, r5, r6, pc}
	...

08006404 <__smakebuf_r>:
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006408:	079d      	lsls	r5, r3, #30
 800640a:	4606      	mov	r6, r0
 800640c:	460c      	mov	r4, r1
 800640e:	d507      	bpl.n	8006420 <__smakebuf_r+0x1c>
 8006410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2301      	movs	r3, #1
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	b002      	add	sp, #8
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	ab01      	add	r3, sp, #4
 8006422:	466a      	mov	r2, sp
 8006424:	f7ff ffc8 	bl	80063b8 <__swhatbuf_r>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff fa57 	bl	80058e0 <_malloc_r>
 8006432:	b948      	cbnz	r0, 8006448 <__smakebuf_r+0x44>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d4ef      	bmi.n	800641c <__smakebuf_r+0x18>
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	e7e3      	b.n	8006410 <__smakebuf_r+0xc>
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <__smakebuf_r+0x7c>)
 800644a:	62b3      	str	r3, [r6, #40]	; 0x28
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	6020      	str	r0, [r4, #0]
 8006450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	6163      	str	r3, [r4, #20]
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	6120      	str	r0, [r4, #16]
 800645e:	b15b      	cbz	r3, 8006478 <__smakebuf_r+0x74>
 8006460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f889 	bl	800657c <_isatty_r>
 800646a:	b128      	cbz	r0, 8006478 <__smakebuf_r+0x74>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	89a0      	ldrh	r0, [r4, #12]
 800647a:	4305      	orrs	r5, r0
 800647c:	81a5      	strh	r5, [r4, #12]
 800647e:	e7cd      	b.n	800641c <__smakebuf_r+0x18>
 8006480:	080056f9 	.word	0x080056f9

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_lock+0x8>)
 8006486:	f7ff ba09 	b.w	800589c <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	20000250 	.word	0x20000250

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__malloc_unlock+0x8>)
 8006492:	f7ff ba04 	b.w	800589e <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	20000250 	.word	0x20000250

0800649c <_free_r>:
 800649c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800649e:	2900      	cmp	r1, #0
 80064a0:	d044      	beq.n	800652c <_free_r+0x90>
 80064a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a6:	9001      	str	r0, [sp, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f1a1 0404 	sub.w	r4, r1, #4
 80064ae:	bfb8      	it	lt
 80064b0:	18e4      	addlt	r4, r4, r3
 80064b2:	f7ff ffe7 	bl	8006484 <__malloc_lock>
 80064b6:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <_free_r+0x94>)
 80064b8:	9801      	ldr	r0, [sp, #4]
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	b933      	cbnz	r3, 80064cc <_free_r+0x30>
 80064be:	6063      	str	r3, [r4, #4]
 80064c0:	6014      	str	r4, [r2, #0]
 80064c2:	b003      	add	sp, #12
 80064c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064c8:	f7ff bfe2 	b.w	8006490 <__malloc_unlock>
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	d908      	bls.n	80064e2 <_free_r+0x46>
 80064d0:	6825      	ldr	r5, [r4, #0]
 80064d2:	1961      	adds	r1, r4, r5
 80064d4:	428b      	cmp	r3, r1
 80064d6:	bf01      	itttt	eq
 80064d8:	6819      	ldreq	r1, [r3, #0]
 80064da:	685b      	ldreq	r3, [r3, #4]
 80064dc:	1949      	addeq	r1, r1, r5
 80064de:	6021      	streq	r1, [r4, #0]
 80064e0:	e7ed      	b.n	80064be <_free_r+0x22>
 80064e2:	461a      	mov	r2, r3
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b10b      	cbz	r3, 80064ec <_free_r+0x50>
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	d9fa      	bls.n	80064e2 <_free_r+0x46>
 80064ec:	6811      	ldr	r1, [r2, #0]
 80064ee:	1855      	adds	r5, r2, r1
 80064f0:	42a5      	cmp	r5, r4
 80064f2:	d10b      	bne.n	800650c <_free_r+0x70>
 80064f4:	6824      	ldr	r4, [r4, #0]
 80064f6:	4421      	add	r1, r4
 80064f8:	1854      	adds	r4, r2, r1
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	d1e0      	bne.n	80064c2 <_free_r+0x26>
 8006500:	681c      	ldr	r4, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	6053      	str	r3, [r2, #4]
 8006506:	4421      	add	r1, r4
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	e7da      	b.n	80064c2 <_free_r+0x26>
 800650c:	d902      	bls.n	8006514 <_free_r+0x78>
 800650e:	230c      	movs	r3, #12
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	e7d6      	b.n	80064c2 <_free_r+0x26>
 8006514:	6825      	ldr	r5, [r4, #0]
 8006516:	1961      	adds	r1, r4, r5
 8006518:	428b      	cmp	r3, r1
 800651a:	bf04      	itt	eq
 800651c:	6819      	ldreq	r1, [r3, #0]
 800651e:	685b      	ldreq	r3, [r3, #4]
 8006520:	6063      	str	r3, [r4, #4]
 8006522:	bf04      	itt	eq
 8006524:	1949      	addeq	r1, r1, r5
 8006526:	6021      	streq	r1, [r4, #0]
 8006528:	6054      	str	r4, [r2, #4]
 800652a:	e7ca      	b.n	80064c2 <_free_r+0x26>
 800652c:	b003      	add	sp, #12
 800652e:	bd30      	pop	{r4, r5, pc}
 8006530:	20000254 	.word	0x20000254

08006534 <_read_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	; (8006554 <_read_r+0x20>)
 8006538:	4604      	mov	r4, r0
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	2200      	movs	r2, #0
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f7fe ff60 	bl	8005408 <_read>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_read_r+0x1e>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_read_r+0x1e>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	2000025c 	.word	0x2000025c

08006558 <_fstat_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	; (8006578 <_fstat_r+0x20>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f7fe ff78 	bl	800545a <_fstat>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d102      	bne.n	8006574 <_fstat_r+0x1c>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	b103      	cbz	r3, 8006574 <_fstat_r+0x1c>
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	bf00      	nop
 8006578:	2000025c 	.word	0x2000025c

0800657c <_isatty_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d06      	ldr	r5, [pc, #24]	; (8006598 <_isatty_r+0x1c>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	f7fe ff77 	bl	800547a <_isatty>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_isatty_r+0x1a>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_isatty_r+0x1a>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	2000025c 	.word	0x2000025c

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
