
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006860  08006860  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006868  08006868  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000007c  080068ec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080068ec  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d74  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbb  00000000  00000000  00038e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0003bbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca0b  00000000  00000000  0003df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016429  00000000  00000000  0006a98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011176b  00000000  00000000  00080db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0019251f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005358  00000000  00000000  001925e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0019793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000007c 	.word	0x2000007c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005f54 	.word	0x08005f54

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000080 	.word	0x20000080
 80001f8:	08005f54 	.word	0x08005f54

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f960 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f004 fd61 	bl	8004fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d023      	beq.n	800058c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_InitTick+0x70>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96d 	bl	800083a <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10f      	bne.n	8000586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 f937 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_InitTick+0x74>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e007      	b.n	8000590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e004      	b.n	8000590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000014 	.word	0x20000014
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000098 	.word	0x20000098

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000098 	.word	0x20000098

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e014      	b.n	800088e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f004 fbdb 	bl	8005030 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_DAC_Start_DMA+0x1e>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e0ab      	b.n	8000a0e <HAL_DAC_Start_DMA+0x176>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_DAC_Start_DMA+0x180>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_DAC_Start_DMA+0x184>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <HAL_DAC_Start_DMA+0x188>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0x86>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d845      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf0>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0x72>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000908:	e03e      	b.n	8000988 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e03c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330c      	adds	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e037      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3310      	adds	r3, #16
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e032      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <HAL_DAC_Start_DMA+0x18c>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_DAC_Start_DMA+0x190>)
 8000936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <HAL_DAC_Start_DMA+0x194>)
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d013      	beq.n	800097e <HAL_DAC_Start_DMA+0xe6>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d817      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf4>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_DAC_Start_DMA+0xd2>
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000968:	e010      	b.n	800098c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3314      	adds	r3, #20
 8000970:	613b      	str	r3, [r7, #16]
        break;
 8000972:	e00c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3318      	adds	r3, #24
 800097a:	613b      	str	r3, [r7, #16]
        break;
 800097c:	e007      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	331c      	adds	r3, #28
 8000984:	613b      	str	r3, [r7, #16]
        break;
 8000986:	e002      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	f000 fc29 	bl	8001204 <HAL_DMA_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e010      	b.n	80009da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	f000 fc17 	bl	8001204 <HAL_DMA_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f043 0204 	orr.w	r2, r3, #4
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08000d79 	.word	0x08000d79
 8000a1c:	08000d9b 	.word	0x08000d9b
 8000a20:	08000db7 	.word	0x08000db7
 8000a24:	08001049 	.word	0x08001049
 8000a28:	0800106b 	.word	0x0800106b
 8000a2c:	08001087 	.word	0x08001087

08000a30 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fc3b 	bl	80012fa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e00c      	b.n	8000ab0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fc2d 	bl	80012fa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000aae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d101      	bne.n	8000b14 <HAL_DAC_ConfigChannel+0x1c>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e12a      	b.n	8000d6a <HAL_DAC_ConfigChannel+0x272>
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2201      	movs	r2, #1
 8000b18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d174      	bne.n	8000c12 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b28:	f7ff fd52 	bl	80005d0 <HAL_GetTick>
 8000b2c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d134      	bne.n	8000b9e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b34:	e011      	b.n	8000b5a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b36:	f7ff fd4b 	bl	80005d0 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d90a      	bls.n	8000b5a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	f043 0208 	orr.w	r2, r3, #8
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2203      	movs	r2, #3
 8000b54:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e107      	b.n	8000d6a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1e6      	bne.n	8000b36 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fd3d 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	69d2      	ldr	r2, [r2, #28]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
 8000b78:	e01e      	b.n	8000bb8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b7a:	f7ff fd29 	bl	80005d0 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d90a      	bls.n	8000b9e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	f043 0208 	orr.w	r2, r3, #8
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2203      	movs	r2, #3
 8000b98:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e0e5      	b.n	8000d6a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dbe8      	blt.n	8000b7a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fd1d 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	69d2      	ldr	r2, [r2, #28]
 8000bb6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	ea02 0103 	and.w	r1, r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	6a1a      	ldr	r2, [r3, #32]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	21ff      	movs	r1, #255	; 0xff
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	ea02 0103 	and.w	r1, r2, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d11d      	bne.n	8000c56 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c20:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	221f      	movs	r2, #31
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69fa      	ldr	r2, [r7, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2207      	movs	r2, #7
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69fa      	ldr	r2, [r7, #28]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	400a      	ands	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cfa:	d104      	bne.n	8000d06 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	e018      	b.n	8000d38 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e00f      	b.n	8000d38 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d18:	f001 fd1a 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8000d1c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_DAC_ConfigChannel+0x27c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d904      	bls.n	8000d30 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e003      	b.n	8000d38 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d36:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	22c0      	movs	r2, #192	; 0xc0
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	04c4b400 	.word	0x04c4b400

08000d78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fe97 	bl	8000aba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	711a      	strb	r2, [r3, #4]
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff fe90 	bl	8000ace <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f043 0204 	orr.w	r2, r3, #4
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fe86 	bl	8000ae2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	711a      	strb	r2, [r3, #4]
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e0fd      	b.n	800103c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d103      	bne.n	8000e52 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e50:	e0f4      	b.n	800103c <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	795b      	ldrb	r3, [r3, #5]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_DACEx_SelfCalibrate+0x3e>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e0f0      	b.n	8001040 <HAL_DACEx_SelfCalibrate+0x220>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2201      	movs	r2, #1
 8000e62:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2107      	movs	r1, #7
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2201      	movs	r2, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	400a      	ands	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	400a      	ands	r2, r1
 8000eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e002      	b.n	8000ecc <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3314      	adds	r3, #20
 8000eca:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed4:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	623b      	str	r3, [r7, #32]
    delta = 8U;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8000ef8:	e037      	b.n	8000f6a <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	211f      	movs	r1, #31
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	ea02 0103 	and.w	r1, r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	6a3a      	ldr	r2, [r7, #32]
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fb5f 	bl	80005e8 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d104      	bne.n	8000f5c <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8000f52:	6a3a      	ldr	r2, [r7, #32]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	623b      	str	r3, [r7, #32]
 8000f5a:	e003      	b.n	8000f64 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1c4      	bne.n	8000efa <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	211f      	movs	r1, #31
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	ea02 0103 	and.w	r1, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	6a3a      	ldr	r2, [r7, #32]
 8000f90:	409a      	lsls	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fb24 	bl	80005e8 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d117      	bne.n	8000fea <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	211f      	movs	r1, #31
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	ea02 0103 	and.w	r1, r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	6a3a      	ldr	r2, [r7, #32]
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	6a3a      	ldr	r2, [r7, #32]
 800100c:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2201      	movs	r2, #1
 8001012:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2107      	movs	r1, #7
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	ea02 0103 	and.w	r1, r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	430a      	orrs	r2, r1
 8001034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	715a      	strb	r2, [r3, #5]
  }

  return status;
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001040:	4618      	mov	r0, r3
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff fec4 	bl	8000de4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2201      	movs	r2, #1
 8001060:	711a      	strb	r2, [r3, #4]
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff febd 	bl	8000df8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f043 0204 	orr.w	r2, r3, #4
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff feb3 	bl	8000e0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2201      	movs	r2, #1
 80010aa:	711a      	strb	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e08d      	b.n	80011e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_DMA_Init+0x138>)
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d80f      	bhi.n	80010f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <HAL_DMA_Init+0x13c>)
 80010da:	4413      	add	r3, r2
 80010dc:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <HAL_DMA_Init+0x140>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <HAL_DMA_Init+0x144>)
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
 80010f0:	e00e      	b.n	8001110 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_DMA_Init+0x148>)
 80010fa:	4413      	add	r3, r2
 80010fc:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <HAL_DMA_Init+0x140>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	009a      	lsls	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a3c      	ldr	r2, [pc, #240]	; (8001200 <HAL_DMA_Init+0x14c>)
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800112a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fa12 	bl	800158c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001170:	d102      	bne.n	8001178 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800118c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d010      	beq.n	80011b8 <HAL_DMA_Init+0x104>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d80c      	bhi.n	80011b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fa32 	bl	8001608 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	e008      	b.n	80011ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020407 	.word	0x40020407
 80011f0:	bffdfff8 	.word	0xbffdfff8
 80011f4:	cccccccd 	.word	0xcccccccd
 80011f8:	40020000 	.word	0x40020000
 80011fc:	bffdfbf8 	.word	0xbffdfbf8
 8001200:	40020400 	.word	0x40020400

08001204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_DMA_Start_IT+0x20>
 8001220:	2302      	movs	r3, #2
 8001222:	e066      	b.n	80012f2 <HAL_DMA_Start_IT+0xee>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d155      	bne.n	80012e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f957 	bl	8001510 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 020e 	orr.w	r2, r2, #14
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e00f      	b.n	800129c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0204 	bic.w	r2, r2, #4
 800128a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 020a 	orr.w	r2, r2, #10
 800129a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012b8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0201 	orr.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e005      	b.n	80012f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012ec:	2302      	movs	r3, #2
 80012ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2204      	movs	r2, #4
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e040      	b.n	80013a6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020e 	bic.w	r2, r2, #14
 8001332:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001342:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	f003 021c 	and.w	r2, r3, #28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001370:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00c      	beq.n	8001394 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001388:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001392:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f003 031c 	and.w	r3, r3, #28
 80013d2:	2204      	movs	r2, #4
 80013d4:	409a      	lsls	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d026      	beq.n	800142c <HAL_DMA_IRQHandler+0x7a>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0204 	bic.w	r2, r2, #4
 8001404:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f003 021c 	and.w	r2, r3, #28
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2104      	movs	r1, #4
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	2b00      	cmp	r3, #0
 8001420:	d071      	beq.n	8001506 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800142a:	e06c      	b.n	8001506 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f003 031c 	and.w	r3, r3, #28
 8001434:	2202      	movs	r2, #2
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d02e      	beq.n	800149e <HAL_DMA_IRQHandler+0xec>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d029      	beq.n	800149e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020a 	bic.w	r2, r2, #10
 8001466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 021c 	and.w	r2, r3, #28
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2102      	movs	r1, #2
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d038      	beq.n	8001506 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800149c:	e033      	b.n	8001506 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 031c 	and.w	r3, r3, #28
 80014a6:	2208      	movs	r2, #8
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d02a      	beq.n	8001508 <HAL_DMA_IRQHandler+0x156>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d025      	beq.n	8001508 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 020e 	bic.w	r2, r2, #14
 80014ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f003 021c 	and.w	r2, r3, #28
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001506:	bf00      	nop
 8001508:	bf00      	nop
}
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001526:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001538:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 021c 	and.w	r2, r3, #28
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b10      	cmp	r3, #16
 800155c:	d108      	bne.n	8001570 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800156e:	e007      	b.n	8001580 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d80a      	bhi.n	80015b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6493      	str	r3, [r2, #72]	; 0x48
 80015b4:	e007      	b.n	80015c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	009a      	lsls	r2, r3, #2
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80015c0:	4413      	add	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b08      	subs	r3, #8
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2201      	movs	r2, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40020407 	.word	0x40020407
 80015fc:	4002081c 	.word	0x4002081c
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	40020880 	.word	0x40020880

08001608 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800162a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	1000823f 	.word	0x1000823f
 800164c:	40020940 	.word	0x40020940

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e166      	b.n	800192e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8158 	beq.w	8001928 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80b2 	beq.w	8001928 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_GPIO_Init+0x2fc>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	4a60      	ldr	r2, [pc, #384]	; (800194c <HAL_GPIO_Init+0x2fc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6613      	str	r3, [r2, #96]	; 0x60
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <HAL_GPIO_Init+0x2fc>)
 80017d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a5c      	ldr	r2, [pc, #368]	; (8001950 <HAL_GPIO_Init+0x300>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001806:	d02b      	beq.n	8001860 <HAL_GPIO_Init+0x210>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_GPIO_Init+0x304>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d025      	beq.n	800185c <HAL_GPIO_Init+0x20c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_GPIO_Init+0x308>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d01f      	beq.n	8001858 <HAL_GPIO_Init+0x208>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a50      	ldr	r2, [pc, #320]	; (800195c <HAL_GPIO_Init+0x30c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_GPIO_Init+0x204>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_GPIO_Init+0x310>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x200>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x314>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1fc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <HAL_GPIO_Init+0x318>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1f8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_GPIO_Init+0x31c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1f4>
 8001840:	2307      	movs	r3, #7
 8001842:	e00e      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001844:	2308      	movs	r3, #8
 8001846:	e00c      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001848:	2306      	movs	r3, #6
 800184a:	e00a      	b.n	8001862 <HAL_GPIO_Init+0x212>
 800184c:	2305      	movs	r3, #5
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001850:	2304      	movs	r3, #4
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x212>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x212>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x300>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_GPIO_Init+0x320>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_GPIO_Init+0x320>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_GPIO_Init+0x320>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_GPIO_Init+0x320>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x320>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x320>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_GPIO_Init+0x320>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_GPIO_Init+0x320>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae91 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48001000 	.word	0x48001000
 8001964:	48001400 	.word	0x48001400
 8001968:	48001800 	.word	0x48001800
 800196c:	48001c00 	.word	0x48001c00
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43d9      	mvns	r1, r3
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	400b      	ands	r3, r1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 ffa2 	bl	8004940 <HAL_GPIO_EXTI_Callback>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a18:	d102      	bne.n	8001a20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	e00b      	b.n	8001a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2e:	d102      	bne.n	8001a36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a34:	e000      	b.n	8001a38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d141      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a56:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a62:	d131      	bne.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a6a:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7c:	4a41      	ldr	r2, [pc, #260]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2232      	movs	r2, #50	; 0x32
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	4a3f      	ldr	r2, [pc, #252]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	3301      	adds	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	e002      	b.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d102      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f2      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d158      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e057      	b.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ace:	4a2d      	ldr	r2, [pc, #180]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ad8:	e04d      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d141      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d131      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2232      	movs	r2, #50	; 0x32
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b26:	e002      	b.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d102      	bne.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f2      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d112      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e011      	b.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b64:	e007      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b74:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40007000 	.word	0x40007000
 8001b88:	20000014 	.word	0x20000014
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f000 bc08 	b.w	80023b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba4:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bae:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80e4 	beq.w	8001d8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4c>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	f040 808b 	bne.w	8001cea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	f040 8087 	bne.w	8001cea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x64>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e3df      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_RCC_OscConfig+0x7e>
 8001c04:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0c:	e005      	b.n	8001c1a <HAL_RCC_OscConfig+0x8a>
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d223      	bcs.n	8001c66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fdcc 	bl	80027c0 <RCC_SetFlashLatencyFromMSIRange>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e3c0      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	496d      	ldr	r1, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	4968      	ldr	r1, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e025      	b.n	8001cb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4960      	ldr	r1, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	495b      	ldr	r1, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fd8c 	bl	80027c0 <RCC_SetFlashLatencyFromMSIRange>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e380      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb2:	f000 fcc1 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4950      	ldr	r1, [pc, #320]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2a 	bl	8000530 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d052      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	e364      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d032      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fc67 	bl	80005d0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d06:	f7fe fc63 	bl	80005d0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e34d      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4930      	ldr	r1, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	492b      	ldr	r1, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e01a      	b.n	8001d8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d64:	f7fe fc34 	bl	80005d0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fc30 	bl	80005d0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e31a      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1dc>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d073      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x21c>
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d10e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d10b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d063      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d15f      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e2f7      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x24c>
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e025      	b.n	8001e28 <HAL_RCC_OscConfig+0x298>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d114      	bne.n	8001e10 <HAL_RCC_OscConfig+0x280>
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a02      	ldr	r2, [pc, #8]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e013      	b.n	8001e28 <HAL_RCC_OscConfig+0x298>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08005fb0 	.word	0x08005fb0
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	4ba0      	ldr	r3, [pc, #640]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b9d      	ldr	r3, [pc, #628]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a9c      	ldr	r2, [pc, #624]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe fbce 	bl	80005d0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe fbca 	bl	80005d0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e2b4      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2a8>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe fbba 	bl	80005d0 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7fe fbb6 	bl	80005d0 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e2a0      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2d0>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d060      	beq.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x310>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d116      	bne.n	8001ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x328>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e27d      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	4973      	ldr	r1, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	e040      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d023      	beq.n	8001f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fb75 	bl	80005d0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7fe fb71 	bl	80005d0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e25b      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	495f      	ldr	r1, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
 8001f1c:	e018      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fb51 	bl	80005d0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f32:	f7fe fb4d 	bl	80005d0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e237      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d03c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7fe fb2c 	bl	80005d0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fb28 	bl	80005d0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e212      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3ec>
 8001f9c:	e01b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa4:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7fe fb0f 	bl	80005d0 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fb0b 	bl	80005d0 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1f5      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ef      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a6 	beq.w	8002130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10d      	bne.n	8002010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d118      	bne.n	800204e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002028:	f7fe fad2 	bl	80005d0 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7fe face 	bl	80005d0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1b8      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x508>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_RCC_OscConfig+0x4d8>
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002066:	e029      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d115      	bne.n	800209c <HAL_RCC_OscConfig+0x50c>
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a03      	ldr	r2, [pc, #12]	; (8002094 <HAL_RCC_OscConfig+0x504>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002090:	e014      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	4b9d      	ldr	r3, [pc, #628]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a9c      	ldr	r2, [pc, #624]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ac:	4b99      	ldr	r3, [pc, #612]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a98      	ldr	r2, [pc, #608]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d016      	beq.n	80020f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fa84 	bl	80005d0 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7fe fa80 	bl	80005d0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e168      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ed      	beq.n	80020cc <HAL_RCC_OscConfig+0x53c>
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe fa6d 	bl	80005d0 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fa69 	bl	80005d0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e151      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	4b80      	ldr	r3, [pc, #512]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ed      	bne.n	80020fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002144:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800214a:	4a72      	ldr	r2, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fa3c 	bl	80005d0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215c:	f7fe fa38 	bl	80005d0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e122      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800216e:	4b69      	ldr	r3, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x5cc>
 800217c:	e01b      	b.n	80021b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002184:	4a63      	ldr	r2, [pc, #396]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fa1f 	bl	80005d0 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002196:	f7fe fa1b 	bl	80005d0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e105      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a8:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80021aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ef      	bne.n	8002196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80f9 	beq.w	80023b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f040 80cf 	bne.w	8002368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021ca:	4b52      	ldr	r3, [pc, #328]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0203 	and.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d12c      	bne.n	8002238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	3b01      	subs	r3, #1
 80021ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d123      	bne.n	8002238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d11b      	bne.n	8002238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d113      	bne.n	8002238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d109      	bne.n	8002238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d071      	beq.n	800231c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d068      	beq.n	8002310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800224a:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0ac      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002266:	f7fe f9b3 	bl	80005d0 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe f9af 	bl	80005d0 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e099      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_OscConfig+0x788>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800229c:	3a01      	subs	r2, #1
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a6:	0212      	lsls	r2, r2, #8
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ae:	0852      	lsrs	r2, r2, #1
 80022b0:	3a01      	subs	r2, #1
 80022b2:	0552      	lsls	r2, r2, #21
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022ba:	0852      	lsrs	r2, r2, #1
 80022bc:	3a01      	subs	r2, #1
 80022be:	0652      	lsls	r2, r2, #25
 80022c0:	4311      	orrs	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022c6:	06d2      	lsls	r2, r2, #27
 80022c8:	430a      	orrs	r2, r1
 80022ca:	4912      	ldr	r1, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e8:	f7fe f972 	bl	80005d0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe f96e 	bl	80005d0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e058      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_RCC_OscConfig+0x784>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230e:	e050      	b.n	80023b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e04f      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
 8002314:	40021000 	.word	0x40021000
 8002318:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d144      	bne.n	80023b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a20      	ldr	r2, [pc, #128]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002340:	f7fe f946 	bl	80005d0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe f942 	bl	80005d0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e02c      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x7b8>
 8002366:	e024      	b.n	80023b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d01f      	beq.n	80023ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 8002374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe f929 	bl	80005d0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe f925 	bl	80005d0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e00f      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	4905      	ldr	r1, [pc, #20]	; (80023bc <HAL_RCC_OscConfig+0x82c>)
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_OscConfig+0x830>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
 80023ac:	e001      	b.n	80023b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	feeefffc 	.word	0xfeeefffc

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e11d      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b90      	ldr	r3, [pc, #576]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	498b      	ldr	r1, [pc, #556]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b89      	ldr	r3, [pc, #548]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e105      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d010      	beq.n	800243a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002424:	429a      	cmp	r2, r3
 8002426:	d908      	bls.n	800243a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	497b      	ldr	r1, [pc, #492]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d079      	beq.n	800253a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d11e      	bne.n	800248c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0dc      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800245e:	f000 fa09 	bl	8002874 <RCC_GetSysClockFreqFromPLLSource>
 8002462:	4603      	mov	r3, r0
 8002464:	4a70      	ldr	r2, [pc, #448]	; (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d946      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800246a:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d140      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002476:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247e:	4a69      	ldr	r2, [pc, #420]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e035      	b.n	80024f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d115      	bne.n	80024cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b9      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ac:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0ad      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0a5      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80024cc:	f000 f8b4 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d90f      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024d8:	4b52      	ldr	r3, [pc, #328]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024e4:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ec:	4a4d      	ldr	r2, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4947      	ldr	r1, [pc, #284]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250a:	f7fe f861 	bl	80005d0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002510:	e00a      	b.n	8002528 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002512:	f7fe f85d 	bl	80005d0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e077      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 020c 	and.w	r2, r3, #12
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	429a      	cmp	r2, r3
 8002538:	d1eb      	bne.n	8002512 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d105      	bne.n	800254c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	492b      	ldr	r1, [pc, #172]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d210      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 020f 	bic.w	r2, r3, #15
 8002590:	4923      	ldr	r1, [pc, #140]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e036      	b.n	8002618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4918      	ldr	r1, [pc, #96]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4910      	ldr	r1, [pc, #64]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e8:	f000 f826 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <HAL_RCC_ClockConfig+0x268>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x26c>)
 8002606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff8f 	bl	8000530 <HAL_InitTick>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]

  return status;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	04c4b400 	.word	0x04c4b400
 800262c:	08005fb0 	.word	0x08005fb0
 8002630:	20000014 	.word	0x20000014
 8002634:	20000000 	.word	0x20000000

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x34>
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d121      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11e      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_GetSysClockFreq+0x110>)
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e004      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCC_GetSysClockFreq+0x114>)
 80026be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d134      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0xa6>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d003      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xac>
 80026dc:	e005      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_GetSysClockFreq+0x110>)
 80026e0:	617b      	str	r3, [r7, #20]
      break;
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_GetSysClockFreq+0x114>)
 80026e6:	617b      	str	r3, [r7, #20]
      break;
 80026e8:	e002      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	fb03 f202 	mul.w	r2, r3, r2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	0e5b      	lsrs	r3, r3, #25
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	3301      	adds	r3, #1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002730:	69bb      	ldr	r3, [r7, #24]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	08005fc8 	.word	0x08005fc8
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200

08002750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000014 	.word	0x20000014

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800276c:	f7ff fff0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08005fc0 	.word	0x08005fc0

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002798:	f7ff ffda 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0adb      	lsrs	r3, r3, #11
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08005fc0 	.word	0x08005fc0

080027c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027d8:	f7ff f916 	bl	8001a08 <HAL_PWREx_GetVoltageRange>
 80027dc:	6178      	str	r0, [r7, #20]
 80027de:	e014      	b.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6593      	str	r3, [r2, #88]	; 0x58
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027f8:	f7ff f906 	bl	8001a08 <HAL_PWREx_GetVoltageRange>
 80027fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d10b      	bne.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d913      	bls.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2ba0      	cmp	r3, #160	; 0xa0
 800281c:	d902      	bls.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800281e:	2302      	movs	r3, #2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	e00d      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002824:	2301      	movs	r3, #1
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e00a      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b7f      	cmp	r3, #127	; 0x7f
 800282e:	d902      	bls.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002830:	2302      	movs	r3, #2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e004      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d101      	bne.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 020f 	bic.w	r2, r3, #15
 8002848:	4909      	ldr	r1, [pc, #36]	; (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	40022000 	.word	0x40022000

08002874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d00b      	beq.n	80028a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d825      	bhi.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d008      	beq.n	80028a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d11f      	bne.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800289e:	613b      	str	r3, [r7, #16]
    break;
 80028a0:	e01f      	b.n	80028e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028a2:	4b25      	ldr	r3, [pc, #148]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028a4:	613b      	str	r3, [r7, #16]
    break;
 80028a6:	e01c      	b.n	80028e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e005      	b.n	80028d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80028d0:	4a1a      	ldr	r2, [pc, #104]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	613b      	str	r3, [r7, #16]
    break;
 80028da:	e002      	b.n	80028e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
    break;
 80028e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	3301      	adds	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	fb03 f202 	mul.w	r2, r3, r2
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0e5b      	lsrs	r3, r3, #25
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002922:	683b      	ldr	r3, [r7, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40021000 	.word	0x40021000
 8002934:	00f42400 	.word	0x00f42400
 8002938:	007a1200 	.word	0x007a1200
 800293c:	08005fc8 	.word	0x08005fc8

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002948:	2300      	movs	r3, #0
 800294a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800294c:	2300      	movs	r3, #0
 800294e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d040      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d02a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d825      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002968:	2b60      	cmp	r3, #96	; 0x60
 800296a:	d026      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800296c:	2b60      	cmp	r3, #96	; 0x60
 800296e:	d821      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d006      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d81d      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d010      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002980:	e018      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a88      	ldr	r2, [pc, #544]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800298e:	e015      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fb02 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a0:	e00c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3320      	adds	r3, #32
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fbed 	bl	8003188 <RCCEx_PLLSAI2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b2:	e003      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	74fb      	strb	r3, [r7, #19]
      break;
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c2:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d0:	4975      	ldr	r1, [pc, #468]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029d8:	e001      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d047      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d030      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d82a      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80029fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fe:	d02a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a04:	d824      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a10:	d81e      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a1c:	e018      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4a61      	ldr	r2, [pc, #388]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a2a:	e015      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fab4 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3320      	adds	r3, #32
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fb9f 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	74fb      	strb	r3, [r7, #19]
      break;
 8002a54:	e000      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10b      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a5e:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	494e      	ldr	r1, [pc, #312]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a74:	e001      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 809f 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4a40      	ldr	r2, [pc, #256]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aca:	f7fd fd81 	bl	80005d0 <HAL_GetTick>
 8002ace:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad2:	f7fd fd7d 	bl	80005d0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d902      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae4:	e005      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ef      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d15b      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01f      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d019      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fd fd3c 	bl	80005d0 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fd fd38 	bl	80005d0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d902      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	74fb      	strb	r3, [r7, #19]
            break;
 8002b72:	e006      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ec      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	74bb      	strb	r3, [r7, #18]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb4:	7c7b      	ldrb	r3, [r7, #17]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4ba0      	ldr	r3, [pc, #640]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a9f      	ldr	r2, [pc, #636]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd2:	4b9a      	ldr	r3, [pc, #616]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f023 0203 	bic.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	4996      	ldr	r1, [pc, #600]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf4:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 020c 	bic.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	498e      	ldr	r1, [pc, #568]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4985      	ldr	r1, [pc, #532]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	497d      	ldr	r1, [pc, #500]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	4974      	ldr	r1, [pc, #464]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	496c      	ldr	r1, [pc, #432]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9e:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cac:	4963      	ldr	r1, [pc, #396]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cce:	495b      	ldr	r1, [pc, #364]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	4952      	ldr	r1, [pc, #328]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d04:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	494a      	ldr	r1, [pc, #296]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d26:	4b45      	ldr	r3, [pc, #276]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	4941      	ldr	r1, [pc, #260]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d48:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	4939      	ldr	r1, [pc, #228]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d6a:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	4930      	ldr	r1, [pc, #192]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d94:	60d3      	str	r3, [r2, #12]
 8002d96:	e011      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f8f9 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d04d      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002de2:	e012      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1e:	60d3      	str	r3, [r2, #12]
 8002e20:	e020      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a02      	ldr	r2, [pc, #8]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e014      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8a5 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d028      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e70:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7e:	4947      	ldr	r1, [pc, #284]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f876 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01e      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ede:	492f      	ldr	r1, [pc, #188]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f851 	bl	8002fa0 <RCCEx_PLLSAI1_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f1e:	f023 0204 	bic.w	r2, r3, #4
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f28:	491c      	ldr	r1, [pc, #112]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f42:	f023 0218 	bic.w	r2, r3, #24
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	4913      	ldr	r1, [pc, #76]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f70:	490a      	ldr	r1, [pc, #40]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fba:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d103      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d142      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e03f      	b.n	8003058 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d018      	beq.n	8003012 <RCCEx_PLLSAI1_Config+0x72>
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d825      	bhi.n	8003030 <RCCEx_PLLSAI1_Config+0x90>
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d002      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x4e>
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d009      	beq.n	8003000 <RCCEx_PLLSAI1_Config+0x60>
 8002fec:	e020      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11d      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffe:	e01a      	b.n	8003036 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003000:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003010:	e013      	b.n	800303a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302e:	e006      	b.n	800303e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e004      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003036:	bf00      	nop
 8003038:	e002      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800303e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d108      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4949      	ldr	r1, [pc, #292]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 8086 	bne.w	800316c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003060:	4b45      	ldr	r3, [pc, #276]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a44      	ldr	r2, [pc, #272]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800306a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fd fab0 	bl	80005d0 <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003074:	f7fd faac 	bl	80005d0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
        break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ef      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	06d2      	lsls	r2, r2, #27
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	430a      	orrs	r2, r1
 80030c0:	492d      	ldr	r1, [pc, #180]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
 80030c6:	e02d      	b.n	8003124 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d115      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	0211      	lsls	r1, r2, #8
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6912      	ldr	r2, [r2, #16]
 80030e0:	0852      	lsrs	r2, r2, #1
 80030e2:	3a01      	subs	r2, #1
 80030e4:	0552      	lsls	r2, r2, #21
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6852      	ldr	r2, [r2, #4]
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0112      	lsls	r2, r2, #4
 80030f0:	430a      	orrs	r2, r1
 80030f2:	4921      	ldr	r1, [pc, #132]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	610b      	str	r3, [r1, #16]
 80030f8:	e014      	b.n	8003124 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6892      	ldr	r2, [r2, #8]
 8003106:	0211      	lsls	r1, r2, #8
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6952      	ldr	r2, [r2, #20]
 800310c:	0852      	lsrs	r2, r2, #1
 800310e:	3a01      	subs	r2, #1
 8003110:	0652      	lsls	r2, r2, #25
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6852      	ldr	r2, [r2, #4]
 8003118:	3a01      	subs	r2, #1
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	430a      	orrs	r2, r1
 800311e:	4916      	ldr	r1, [pc, #88]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800312a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800312e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fd fa4e 	bl	80005d0 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003136:	e009      	b.n	800314c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003138:	f7fd fa4a 	bl	80005d0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d902      	bls.n	800314c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	73fb      	strb	r3, [r7, #15]
          break;
 800314a:	e005      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ef      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	07ff800f 	.word	0x07ff800f
 8003180:	ff9f800f 	.word	0xff9f800f
 8003184:	f9ff800f 	.word	0xf9ff800f

08003188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003196:	4b72      	ldr	r3, [pc, #456]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00e      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031a2:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d103      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
       ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d142      	bne.n	8003240 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e03f      	b.n	8003240 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d018      	beq.n	80031fa <RCCEx_PLLSAI2_Config+0x72>
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d825      	bhi.n	8003218 <RCCEx_PLLSAI2_Config+0x90>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d002      	beq.n	80031d6 <RCCEx_PLLSAI2_Config+0x4e>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d009      	beq.n	80031e8 <RCCEx_PLLSAI2_Config+0x60>
 80031d4:	e020      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d6:	4b62      	ldr	r3, [pc, #392]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11d      	bne.n	800321e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e6:	e01a      	b.n	800321e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e8:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e013      	b.n	8003222 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fa:	4b59      	ldr	r3, [pc, #356]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003206:	4b56      	ldr	r3, [pc, #344]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003216:	e006      	b.n	8003226 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e004      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003226:	bf00      	nop
    }

    if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800322e:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4949      	ldr	r1, [pc, #292]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8086 	bne.w	8003354 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003248:	4b45      	ldr	r3, [pc, #276]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a44      	ldr	r2, [pc, #272]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fd f9bc 	bl	80005d0 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800325a:	e009      	b.n	8003270 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800325c:	f7fd f9b8 	bl	80005d0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	73fb      	strb	r3, [r7, #15]
        break;
 800326e:	e005      	b.n	800327c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ef      	bne.n	800325c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d168      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <RCCEx_PLLSAI2_Config+0x1dc>)
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	06d2      	lsls	r2, r2, #27
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	492d      	ldr	r1, [pc, #180]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	614b      	str	r3, [r1, #20]
 80032ae:	e02d      	b.n	800330c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d115      	bne.n	80032e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <RCCEx_PLLSAI2_Config+0x1e0>)
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	0211      	lsls	r1, r2, #8
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6912      	ldr	r2, [r2, #16]
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0552      	lsls	r2, r2, #21
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6852      	ldr	r2, [r2, #4]
 80032d4:	3a01      	subs	r2, #1
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	430a      	orrs	r2, r1
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	614b      	str	r3, [r1, #20]
 80032e0:	e014      	b.n	800330c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <RCCEx_PLLSAI2_Config+0x1e4>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6892      	ldr	r2, [r2, #8]
 80032ee:	0211      	lsls	r1, r2, #8
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6952      	ldr	r2, [r2, #20]
 80032f4:	0852      	lsrs	r2, r2, #1
 80032f6:	3a01      	subs	r2, #1
 80032f8:	0652      	lsls	r2, r2, #25
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	3a01      	subs	r2, #1
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	430a      	orrs	r2, r1
 8003306:	4916      	ldr	r1, [pc, #88]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd f95a 	bl	80005d0 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800331e:	e009      	b.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003320:	f7fd f956 	bl	80005d0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d902      	bls.n	8003334 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	73fb      	strb	r3, [r7, #15]
          break;
 8003332:	e005      	b.n	8003340 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	4904      	ldr	r1, [pc, #16]	; (8003360 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	07ff800f 	.word	0x07ff800f
 8003368:	ff9f800f 	.word	0xff9f800f
 800336c:	f9ff800f 	.word	0xf9ff800f

08003370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e049      	b.n	8003416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f001 feb8 	bl	800510c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 fac0 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d001      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e04f      	b.n	80034d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d018      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_TIM_Base_Start_IT+0x76>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d115      	bne.n	80034c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_TIM_Base_Start_IT+0xdc>)
 800349e:	4013      	ands	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d015      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0xb4>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ae:	d011      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	e008      	b.n	80034d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e000      	b.n	80034d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	00010007 	.word	0x00010007

08003500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0202 	mvn.w	r2, #2
 800352c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9d8 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9ca 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f9db 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0204 	mvn.w	r2, #4
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9ae 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9a0 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f9b1 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0208 	mvn.w	r2, #8
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f984 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f976 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f987 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0210 	mvn.w	r2, #16
 8003628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2208      	movs	r2, #8
 800362e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f95a 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f94c 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f95d 	bl	800390c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0201 	mvn.w	r2, #1
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f926 	bl	80038d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fb08 	bl	8003cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fafb 	bl	8003cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f90b 	bl	8003920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b20      	cmp	r3, #32
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d107      	bne.n	8003736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0220 	mvn.w	r2, #32
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fabb 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_TIM_ConfigClockSource+0x1c>
 8003756:	2302      	movs	r3, #2
 8003758:	e0b6      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x18a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800377c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003784:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d03e      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xd8>
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379c:	f200 8087 	bhi.w	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	f000 8086 	beq.w	80038b4 <HAL_TIM_ConfigClockSource+0x176>
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d87f      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037ae:	2b70      	cmp	r3, #112	; 0x70
 80037b0:	d01a      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0xaa>
 80037b2:	2b70      	cmp	r3, #112	; 0x70
 80037b4:	d87b      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037b6:	2b60      	cmp	r3, #96	; 0x60
 80037b8:	d050      	beq.n	800385c <HAL_TIM_ConfigClockSource+0x11e>
 80037ba:	2b60      	cmp	r3, #96	; 0x60
 80037bc:	d877      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037be:	2b50      	cmp	r3, #80	; 0x50
 80037c0:	d03c      	beq.n	800383c <HAL_TIM_ConfigClockSource+0xfe>
 80037c2:	2b50      	cmp	r3, #80	; 0x50
 80037c4:	d873      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d058      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x13e>
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d86f      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037ce:	2b30      	cmp	r3, #48	; 0x30
 80037d0:	d064      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x15e>
 80037d2:	2b30      	cmp	r3, #48	; 0x30
 80037d4:	d86b      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d060      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x15e>
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d867      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05c      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x15e>
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d05a      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x15e>
 80037e6:	e062      	b.n	80038ae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f000 f9b0 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800380a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e04f      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f000 f999 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003838:	609a      	str	r2, [r3, #8]
      break;
 800383a:	e03c      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	461a      	mov	r2, r3
 800384a:	f000 f90d 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2150      	movs	r1, #80	; 0x50
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f966 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 800385a:	e02c      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	461a      	mov	r2, r3
 800386a:	f000 f92c 	bl	8003ac6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2160      	movs	r1, #96	; 0x60
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f956 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 800387a:	e01c      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	f000 f8ed 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2140      	movs	r1, #64	; 0x40
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f946 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 f93d 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d01b      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d017      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0x9a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00f      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40013400 	.word	0x40013400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 030a 	bic.w	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0210 	bic.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e068      	b.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2e      	ldr	r2, [pc, #184]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01d      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d018      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10c      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40014000 	.word	0x40014000

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e042      	b.n	8003d80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f001 fa21 	bl	8005154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2224      	movs	r2, #36	; 0x24
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f82c 	bl	8003d88 <UART_SetConfig>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e022      	b.n	8003d80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fb1c 	bl	8004380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fba3 	bl	80044c4 <UART_CheckIdleState>
 8003d7e:	4603      	mov	r3, r0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d8c:	b08c      	sub	sp, #48	; 0x30
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4baa      	ldr	r3, [pc, #680]	; (8004060 <UART_SetConfig+0x2d8>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a9f      	ldr	r2, [pc, #636]	; (8004064 <UART_SetConfig+0x2dc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df0:	4313      	orrs	r3, r2
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003dfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f023 010f 	bic.w	r1, r3, #15
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a90      	ldr	r2, [pc, #576]	; (8004068 <UART_SetConfig+0x2e0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d125      	bne.n	8003e78 <UART_SetConfig+0xf0>
 8003e2c:	4b8f      	ldr	r3, [pc, #572]	; (800406c <UART_SetConfig+0x2e4>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d81a      	bhi.n	8003e70 <UART_SetConfig+0xe8>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0xb8>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e116      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e112      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e10e      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	e10a      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e76:	e106      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <UART_SetConfig+0x2e8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d138      	bne.n	8003ef4 <UART_SetConfig+0x16c>
 8003e82:	4b7a      	ldr	r3, [pc, #488]	; (800406c <UART_SetConfig+0x2e4>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d82d      	bhi.n	8003eec <UART_SetConfig+0x164>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x110>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003eed 	.word	0x08003eed
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003eed 	.word	0x08003eed
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ee5 	.word	0x08003ee5
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed2:	e0d8      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eda:	e0d4      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003edc:	2304      	movs	r3, #4
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ee2:	e0d0      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eea:	e0cc      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003eec:	2310      	movs	r3, #16
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef2:	e0c8      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5e      	ldr	r2, [pc, #376]	; (8004074 <UART_SetConfig+0x2ec>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d125      	bne.n	8003f4a <UART_SetConfig+0x1c2>
 8003efe:	4b5b      	ldr	r3, [pc, #364]	; (800406c <UART_SetConfig+0x2e4>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f08:	2b30      	cmp	r3, #48	; 0x30
 8003f0a:	d016      	beq.n	8003f3a <UART_SetConfig+0x1b2>
 8003f0c:	2b30      	cmp	r3, #48	; 0x30
 8003f0e:	d818      	bhi.n	8003f42 <UART_SetConfig+0x1ba>
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d00a      	beq.n	8003f2a <UART_SetConfig+0x1a2>
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d814      	bhi.n	8003f42 <UART_SetConfig+0x1ba>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <UART_SetConfig+0x19a>
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d008      	beq.n	8003f32 <UART_SetConfig+0x1aa>
 8003f20:	e00f      	b.n	8003f42 <UART_SetConfig+0x1ba>
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f28:	e0ad      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f30:	e0a9      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f32:	2304      	movs	r3, #4
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f38:	e0a5      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f40:	e0a1      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f42:	2310      	movs	r3, #16
 8003f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f48:	e09d      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4a      	ldr	r2, [pc, #296]	; (8004078 <UART_SetConfig+0x2f0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d125      	bne.n	8003fa0 <UART_SetConfig+0x218>
 8003f54:	4b45      	ldr	r3, [pc, #276]	; (800406c <UART_SetConfig+0x2e4>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f60:	d016      	beq.n	8003f90 <UART_SetConfig+0x208>
 8003f62:	2bc0      	cmp	r3, #192	; 0xc0
 8003f64:	d818      	bhi.n	8003f98 <UART_SetConfig+0x210>
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d00a      	beq.n	8003f80 <UART_SetConfig+0x1f8>
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d814      	bhi.n	8003f98 <UART_SetConfig+0x210>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <UART_SetConfig+0x1f0>
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d008      	beq.n	8003f88 <UART_SetConfig+0x200>
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x210>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	e082      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f86:	e07e      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	e07a      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e076      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9e:	e072      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a35      	ldr	r2, [pc, #212]	; (800407c <UART_SetConfig+0x2f4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12a      	bne.n	8004000 <UART_SetConfig+0x278>
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <UART_SetConfig+0x2e4>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb8:	d01a      	beq.n	8003ff0 <UART_SetConfig+0x268>
 8003fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fbe:	d81b      	bhi.n	8003ff8 <UART_SetConfig+0x270>
 8003fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc4:	d00c      	beq.n	8003fe0 <UART_SetConfig+0x258>
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fca:	d815      	bhi.n	8003ff8 <UART_SetConfig+0x270>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <UART_SetConfig+0x250>
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d008      	beq.n	8003fe8 <UART_SetConfig+0x260>
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x270>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fde:	e052      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e04e      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e04a      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e046      	b.n	8004086 <UART_SetConfig+0x2fe>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	e042      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <UART_SetConfig+0x2dc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d13a      	bne.n	8004080 <UART_SetConfig+0x2f8>
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <UART_SetConfig+0x2e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004018:	d01a      	beq.n	8004050 <UART_SetConfig+0x2c8>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0x2d0>
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d00c      	beq.n	8004040 <UART_SetConfig+0x2b8>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d815      	bhi.n	8004058 <UART_SetConfig+0x2d0>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <UART_SetConfig+0x2b0>
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d008      	beq.n	8004048 <UART_SetConfig+0x2c0>
 8004036:	e00f      	b.n	8004058 <UART_SetConfig+0x2d0>
 8004038:	2300      	movs	r3, #0
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e022      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e01e      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e01a      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e016      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e012      	b.n	8004086 <UART_SetConfig+0x2fe>
 8004060:	cfff69f3 	.word	0xcfff69f3
 8004064:	40008000 	.word	0x40008000
 8004068:	40013800 	.word	0x40013800
 800406c:	40021000 	.word	0x40021000
 8004070:	40004400 	.word	0x40004400
 8004074:	40004800 	.word	0x40004800
 8004078:	40004c00 	.word	0x40004c00
 800407c:	40005000 	.word	0x40005000
 8004080:	2310      	movs	r3, #16
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4aae      	ldr	r2, [pc, #696]	; (8004344 <UART_SetConfig+0x5bc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	f040 8097 	bne.w	80041c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004096:	2b08      	cmp	r3, #8
 8004098:	d823      	bhi.n	80040e2 <UART_SetConfig+0x35a>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x318>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040e3 	.word	0x080040e3
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040e3 	.word	0x080040e3
 80040b0:	080040d3 	.word	0x080040d3
 80040b4:	080040e3 	.word	0x080040e3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	080040db 	.word	0x080040db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe fb50 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ca:	e010      	b.n	80040ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040cc:	4b9e      	ldr	r3, [pc, #632]	; (8004348 <UART_SetConfig+0x5c0>)
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040d0:	e00d      	b.n	80040ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fe fab1 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040d8:	e009      	b.n	80040ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e0:	e005      	b.n	80040ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8130 	beq.w	8004356 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	4a94      	ldr	r2, [pc, #592]	; (800434c <UART_SetConfig+0x5c4>)
 80040fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004100:	461a      	mov	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	fbb3 f3f2 	udiv	r3, r3, r2
 8004108:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d305      	bcc.n	8004126 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	429a      	cmp	r2, r3
 8004124:	d903      	bls.n	800412e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800412c:	e113      	b.n	8004356 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2200      	movs	r2, #0
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	60fa      	str	r2, [r7, #12]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	4a84      	ldr	r2, [pc, #528]	; (800434c <UART_SetConfig+0x5c4>)
 800413c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004140:	b29b      	uxth	r3, r3
 8004142:	2200      	movs	r2, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800414c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004150:	f7fc f854 	bl	80001fc <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	020b      	lsls	r3, r1, #8
 8004166:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800416a:	0202      	lsls	r2, r0, #8
 800416c:	6979      	ldr	r1, [r7, #20]
 800416e:	6849      	ldr	r1, [r1, #4]
 8004170:	0849      	lsrs	r1, r1, #1
 8004172:	2000      	movs	r0, #0
 8004174:	460c      	mov	r4, r1
 8004176:	4605      	mov	r5, r0
 8004178:	eb12 0804 	adds.w	r8, r2, r4
 800417c:	eb43 0905 	adc.w	r9, r3, r5
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	469a      	mov	sl, r3
 8004188:	4693      	mov	fp, r2
 800418a:	4652      	mov	r2, sl
 800418c:	465b      	mov	r3, fp
 800418e:	4640      	mov	r0, r8
 8004190:	4649      	mov	r1, r9
 8004192:	f7fc f833 	bl	80001fc <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4613      	mov	r3, r2
 800419c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a4:	d308      	bcc.n	80041b8 <UART_SetConfig+0x430>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d204      	bcs.n	80041b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e0ce      	b.n	8004356 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041be:	e0ca      	b.n	8004356 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d166      	bne.n	8004298 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80041ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d827      	bhi.n	8004222 <UART_SetConfig+0x49a>
 80041d2:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x450>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	08004223 	.word	0x08004223
 80041e8:	08004213 	.word	0x08004213
 80041ec:	08004223 	.word	0x08004223
 80041f0:	08004223 	.word	0x08004223
 80041f4:	08004223 	.word	0x08004223
 80041f8:	0800421b 	.word	0x0800421b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe fab4 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004202:	e014      	b.n	800422e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe fac6 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8004208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420a:	e010      	b.n	800422e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <UART_SetConfig+0x5c0>)
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004210:	e00d      	b.n	800422e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fe fa11 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004218:	e009      	b.n	800422e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004220:	e005      	b.n	800422e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800422c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8090 	beq.w	8004356 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	4a44      	ldr	r2, [pc, #272]	; (800434c <UART_SetConfig+0x5c4>)
 800423c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004240:	461a      	mov	r2, r3
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	fbb3 f3f2 	udiv	r3, r3, r2
 8004248:	005a      	lsls	r2, r3, #1
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	441a      	add	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	d916      	bls.n	8004290 <UART_SetConfig+0x508>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d212      	bcs.n	8004290 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f023 030f 	bic.w	r3, r3, #15
 8004272:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	b29a      	uxth	r2, r3
 8004280:	8bfb      	ldrh	r3, [r7, #30]
 8004282:	4313      	orrs	r3, r2
 8004284:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	8bfa      	ldrh	r2, [r7, #30]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	e062      	b.n	8004356 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004296:	e05e      	b.n	8004356 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800429c:	2b08      	cmp	r3, #8
 800429e:	d828      	bhi.n	80042f2 <UART_SetConfig+0x56a>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x520>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042f3 	.word	0x080042f3
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042f3 	.word	0x080042f3
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fe fa4c 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042d2:	e014      	b.n	80042fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fa5e 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <UART_SetConfig+0x5c0>)
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e0:	e00d      	b.n	80042fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe f9a9 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042e8:	e009      	b.n	80042fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042f0:	e005      	b.n	80042fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042fc:	bf00      	nop
    }

    if (pclk != 0U)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d028      	beq.n	8004356 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	4a10      	ldr	r2, [pc, #64]	; (800434c <UART_SetConfig+0x5c4>)
 800430a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800430e:	461a      	mov	r2, r3
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	fbb3 f2f2 	udiv	r2, r3, r2
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	441a      	add	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2b0f      	cmp	r3, #15
 800432c:	d910      	bls.n	8004350 <UART_SetConfig+0x5c8>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d20c      	bcs.n	8004350 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	b29a      	uxth	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e009      	b.n	8004356 <UART_SetConfig+0x5ce>
 8004342:	bf00      	nop
 8004344:	40008000 	.word	0x40008000
 8004348:	00f42400 	.word	0x00f42400
 800434c:	08005f88 	.word	0x08005f88
      }
      else
      {
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2201      	movs	r2, #1
 800435a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2201      	movs	r2, #1
 8004362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004372:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004376:	4618      	mov	r0, r3
 8004378:	3730      	adds	r7, #48	; 0x30
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01a      	beq.n	8004496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d10a      	bne.n	8004496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d4:	f7fc f87c 	bl	80005d0 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10e      	bne.n	8004506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f82f 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e025      	b.n	8004552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d10e      	bne.n	8004532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f819 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00f      	b.n	8004552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b09c      	sub	sp, #112	; 0x70
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	e0a9      	b.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004572:	f000 80a5 	beq.w	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fc f82b 	bl	80005d0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <UART_WaitOnFlagUntilTimeout+0x32>
 8004586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004588:	2b00      	cmp	r3, #0
 800458a:	d140      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045a0:	667b      	str	r3, [r7, #100]	; 0x64
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	663b      	str	r3, [r7, #96]	; 0x60
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045de:	64ba      	str	r2, [r7, #72]	; 0x48
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e069      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d051      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d149      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800464a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
 8004656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004688:	623a      	str	r2, [r7, #32]
 800468a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69f9      	ldr	r1, [r7, #28]
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	61bb      	str	r3, [r7, #24]
   return(result);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e010      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4013      	ands	r3, r2
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	429a      	cmp	r2, r3
 80046dc:	f43f af46 	beq.w	800456c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3770      	adds	r7, #112	; 0x70
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_UARTEx_DisableFifoMode+0x16>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e027      	b.n	8004750 <HAL_UARTEx_DisableFifoMode+0x66>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800472e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e02d      	b.n	80047d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f84f 	bl	8004854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e02d      	b.n	800484c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f811 	bl	8004854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004874:	e031      	b.n	80048da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004876:	2308      	movs	r3, #8
 8004878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800487a:	2308      	movs	r3, #8
 800487c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	0e5b      	lsrs	r3, r3, #25
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	0f5b      	lsrs	r3, r3, #29
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	7b3a      	ldrb	r2, [r7, #12]
 80048a2:	4911      	ldr	r1, [pc, #68]	; (80048e8 <UARTEx_SetNbDataToProcess+0x94>)
 80048a4:	5c8a      	ldrb	r2, [r1, r2]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048aa:	7b3a      	ldrb	r2, [r7, #12]
 80048ac:	490f      	ldr	r1, [pc, #60]	; (80048ec <UARTEx_SetNbDataToProcess+0x98>)
 80048ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	7b7a      	ldrb	r2, [r7, #13]
 80048c0:	4909      	ldr	r1, [pc, #36]	; (80048e8 <UARTEx_SetNbDataToProcess+0x94>)
 80048c2:	5c8a      	ldrb	r2, [r1, r2]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048c8:	7b7a      	ldrb	r2, [r7, #13]
 80048ca:	4908      	ldr	r1, [pc, #32]	; (80048ec <UARTEx_SetNbDataToProcess+0x98>)
 80048cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	08005fa0 	.word	0x08005fa0
 80048ec:	08005fa8 	.word	0x08005fa8

080048f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80048f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80048fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004908:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800490c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004910:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004918:	e000      	b.n	800491c <ITM_SendChar+0x2c>
    {
      __NOP();
 800491a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800491c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f9      	beq.n	800491a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004926:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004930:	687b      	ldr	r3, [r7, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Define our interrupt handlers
// Handler for button interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af02      	add	r7, sp, #8
 8004946:	4603      	mov	r3, r0
 8004948:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004950:	d14e      	bne.n	80049f0 <HAL_GPIO_EXTI_Callback+0xb0>
		note_selector = (note_selector + 1)%3; // cycle through three notes
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	4b28      	ldr	r3, [pc, #160]	; (80049fc <HAL_GPIO_EXTI_Callback+0xbc>)
 800495a:	fb83 3201 	smull	r3, r2, r3, r1
 800495e:	17cb      	asrs	r3, r1, #31
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	1aca      	subs	r2, r1, r3
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800496c:	601a      	str	r2, [r3, #0]
		// change note
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800496e:	2100      	movs	r1, #0
 8004970:	4823      	ldr	r0, [pc, #140]	; (8004a00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8004972:	f7fc f85d 	bl	8000a30 <HAL_DAC_Stop_DMA>
		if (note_selector == 0) { // C6
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10e      	bne.n	800499c <HAL_GPIO_EXTI_Callback+0x5c>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) C6_data, (uint32_t) C6_size, DAC_ALIGN_12B_R);
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_GPIO_EXTI_Callback+0xc8>)
 800498c:	2100      	movs	r1, #0
 800498e:	481c      	ldr	r0, [pc, #112]	; (8004a00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8004990:	f7fb ff82 	bl	8000898 <HAL_DAC_Start_DMA>
			printf("C6\n");
 8004994:	481d      	ldr	r0, [pc, #116]	; (8004a0c <HAL_GPIO_EXTI_Callback+0xcc>)
 8004996:	f000 fe4d 	bl	8005634 <puts>
 800499a:	e024      	b.n	80049e6 <HAL_GPIO_EXTI_Callback+0xa6>
		} else if (note_selector == 1) { // E6
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10e      	bne.n	80049c2 <HAL_GPIO_EXTI_Callback+0x82>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) E6_data, (uint32_t) E6_size, DAC_ALIGN_12B_R);
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <HAL_GPIO_EXTI_Callback+0xd0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_GPIO_EXTI_Callback+0xd4>)
 80049b2:	2100      	movs	r1, #0
 80049b4:	4812      	ldr	r0, [pc, #72]	; (8004a00 <HAL_GPIO_EXTI_Callback+0xc0>)
 80049b6:	f7fb ff6f 	bl	8000898 <HAL_DAC_Start_DMA>
			printf("E6\n");
 80049ba:	4817      	ldr	r0, [pc, #92]	; (8004a18 <HAL_GPIO_EXTI_Callback+0xd8>)
 80049bc:	f000 fe3a 	bl	8005634 <puts>
 80049c0:	e011      	b.n	80049e6 <HAL_GPIO_EXTI_Callback+0xa6>
		} else if (note_selector == 2) { // G6
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d10d      	bne.n	80049e6 <HAL_GPIO_EXTI_Callback+0xa6>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) G6_data, (uint32_t) G6_size, DAC_ALIGN_12B_R);
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_GPIO_EXTI_Callback+0xdc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <HAL_GPIO_EXTI_Callback+0xe0>)
 80049d8:	2100      	movs	r1, #0
 80049da:	4809      	ldr	r0, [pc, #36]	; (8004a00 <HAL_GPIO_EXTI_Callback+0xc0>)
 80049dc:	f7fb ff5c 	bl	8000898 <HAL_DAC_Start_DMA>
			printf("G6\n");
 80049e0:	4810      	ldr	r0, [pc, #64]	; (8004a24 <HAL_GPIO_EXTI_Callback+0xe4>)
 80049e2:	f000 fe27 	bl	8005634 <puts>
		}

		HAL_GPIO_TogglePin(myLed_GPIO_Port, myLed_Pin); // toggle LED as user feedback for a successful button press
 80049e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049ea:	480f      	ldr	r0, [pc, #60]	; (8004a28 <HAL_GPIO_EXTI_Callback+0xe8>)
 80049ec:	f7fc ffda 	bl	80019a4 <HAL_GPIO_TogglePin>
	}
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000214 	.word	0x20000214
 80049fc:	55555556 	.word	0x55555556
 8004a00:	2000009c 	.word	0x2000009c
 8004a04:	20000008 	.word	0x20000008
 8004a08:	2000021c 	.word	0x2000021c
 8004a0c:	08005f6c 	.word	0x08005f6c
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	20000274 	.word	0x20000274
 8004a18:	08005f70 	.word	0x08005f70
 8004a1c:	20000010 	.word	0x20000010
 8004a20:	200002b8 	.word	0x200002b8
 8004a24:	08005f74 	.word	0x08005f74
 8004a28:	48000400 	.word	0x48000400

08004a2c <_write>:
//		printf("Note Changed\n");
//	}
//}

// for printf
int _write(int file, char *ptr, int len) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e009      	b.n	8004a52 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	60ba      	str	r2, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff52 	bl	80048f0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	dbf1      	blt.n	8004a3e <_write+0x12>
	}
	return len;
 8004a5a:	687b      	ldr	r3, [r7, #4]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	note_selector = 2; // [0, 2] to indicate if the note that should be played is C6 E6 or G6 respectively
 8004a6a:	4b60      	ldr	r3, [pc, #384]	; (8004bec <main+0x188>)
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	601a      	str	r2, [r3, #0]

	note_data_index = 0; // index of above array to indicate which piece of data we are on (for step 2 of part 2)
 8004a70:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <main+0x18c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

	sine_wave_index = 0; //[0, 43] 44.1 kHz sample rate, 1kHz desired sine wave, so one period every 44 samples (for part 1)
 8004a76:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <main+0x190>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a7c:	f7fb fd40 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a80:	f000 f8d2 	bl	8004c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a84:	f000 fa28 	bl	8004ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a88:	f000 f9fc 	bl	8004e84 <MX_DMA_Init>
  MX_DAC1_Init();
 8004a8c:	f000 f91e 	bl	8004ccc <MX_DAC1_Init>
  MX_TIM2_Init();
 8004a90:	f000 f95e 	bl	8004d50 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004a94:	f000 f9aa 	bl	8004dec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize DAC
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4957      	ldr	r1, [pc, #348]	; (8004bf8 <main+0x194>)
 8004a9c:	4857      	ldr	r0, [pc, #348]	; (8004bfc <main+0x198>)
 8004a9e:	f7fc f9bf 	bl	8000e20 <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_2); //from part 1
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	4954      	ldr	r1, [pc, #336]	; (8004bf8 <main+0x194>)
 8004aa6:	4855      	ldr	r0, [pc, #340]	; (8004bfc <main+0x198>)
 8004aa8:	f7fc f9ba 	bl	8000e20 <HAL_DACEx_SelfCalibrate>


  // Start DAC and timer
  //HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
  //HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2); //from part 1
  HAL_TIM_Base_Start_IT(&htim2); // Start the timer in interrupt mode (for step 2 of part 2)
 8004aac:	4854      	ldr	r0, [pc, #336]	; (8004c00 <main+0x19c>)
 8004aae:	f7fe fcb7 	bl	8003420 <HAL_TIM_Base_Start_IT>
//  printf("Sine array made.\n");



  // Make notes
  for (int i = 0; i < C6_size; i++) {
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e02a      	b.n	8004b0e <main+0xaa>
	  C6_data[i] = (arm_sin_f32(2*PI*i/C6_size)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004c04 <main+0x1a0>
 8004ac6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aca:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <main+0x1a4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ada:	eeb0 0a66 	vmov.f32	s0, s13
 8004ade:	f000 fcc3 	bl	8005468 <arm_sin_f32>
 8004ae2:	eef0 7a40 	vmov.f32	s15, s0
 8004ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004c0c <main+0x1a8>
 8004af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afa:	ee17 3a90 	vmov	r3, s15
 8004afe:	b299      	uxth	r1, r3
 8004b00:	4a43      	ldr	r2, [pc, #268]	; (8004c10 <main+0x1ac>)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < C6_size; i++) {
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <main+0x1a4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	dbcf      	blt.n	8004ab8 <main+0x54>
  }
  for (int i = 0; i < E6_size; i++) {
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	e02a      	b.n	8004b74 <main+0x110>
  	  E6_data[i] = (arm_sin_f32(2*PI*i/E6_size)+1)*(1365);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b28:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004c04 <main+0x1a0>
 8004b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b30:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <main+0x1b0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	ee07 3a90 	vmov	s15, r3
 8004b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b40:	eeb0 0a66 	vmov.f32	s0, s13
 8004b44:	f000 fc90 	bl	8005468 <arm_sin_f32>
 8004b48:	eef0 7a40 	vmov.f32	s15, s0
 8004b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b54:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004c0c <main+0x1a8>
 8004b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b60:	ee17 3a90 	vmov	r3, s15
 8004b64:	b299      	uxth	r1, r3
 8004b66:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <main+0x1b4>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < E6_size; i++) {
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <main+0x1b0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	dbcf      	blt.n	8004b1e <main+0xba>
  }
  for (int i = 0; i < G6_size; i++) {
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e02a      	b.n	8004bda <main+0x176>
  	  G6_data[i] = (arm_sin_f32(2*PI*i/G6_size)+1)*(1365);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c04 <main+0x1a0>
 8004b92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <main+0x1b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8004baa:	f000 fc5d 	bl	8005468 <arm_sin_f32>
 8004bae:	eef0 7a40 	vmov.f32	s15, s0
 8004bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c0c <main+0x1a8>
 8004bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 3a90 	vmov	r3, s15
 8004bca:	b299      	uxth	r1, r3
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <main+0x1bc>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < G6_size; i++) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <main+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	dbcf      	blt.n	8004b84 <main+0x120>
  // Start DAC with DMA
  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) C6_data, (uint32_t) C6_size, DAC_ALIGN_12B_R);



  printf("Program started\n");
 8004be4:	480f      	ldr	r0, [pc, #60]	; (8004c24 <main+0x1c0>)
 8004be6:	f000 fd25 	bl	8005634 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004bea:	e7fe      	b.n	8004bea <main+0x186>
 8004bec:	20000214 	.word	0x20000214
 8004bf0:	20000218 	.word	0x20000218
 8004bf4:	200002f0 	.word	0x200002f0
 8004bf8:	200001ec 	.word	0x200001ec
 8004bfc:	2000009c 	.word	0x2000009c
 8004c00:	20000110 	.word	0x20000110
 8004c04:	40c90fdb 	.word	0x40c90fdb
 8004c08:	20000008 	.word	0x20000008
 8004c0c:	44aaa000 	.word	0x44aaa000
 8004c10:	2000021c 	.word	0x2000021c
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	20000274 	.word	0x20000274
 8004c1c:	20000010 	.word	0x20000010
 8004c20:	200002b8 	.word	0x200002b8
 8004c24:	08005f78 	.word	0x08005f78

08004c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b096      	sub	sp, #88	; 0x58
 8004c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c2e:	f107 0314 	add.w	r3, r7, #20
 8004c32:	2244      	movs	r2, #68	; 0x44
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fc86 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7fc fefc 	bl	8001a48 <HAL_PWREx_ControlVoltageScaling>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004c56:	f000 f9c1 	bl	8004fdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004c66:	2360      	movs	r3, #96	; 0x60
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004c76:	233c      	movs	r3, #60	; 0x3c
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c82:	2302      	movs	r3, #2
 8004c84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc ff80 	bl	8001b90 <HAL_RCC_OscConfig>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004c96:	f000 f9a1 	bl	8004fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004cae:	463b      	mov	r3, r7
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fb86 	bl	80023c4 <HAL_RCC_ClockConfig>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004cbe:	f000 f98d 	bl	8004fdc <Error_Handler>
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3758      	adds	r7, #88	; 0x58
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	2228      	movs	r2, #40	; 0x28
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fc35 	bl	8005548 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <MX_DAC1_Init+0x7c>)
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <MX_DAC1_Init+0x80>)
 8004ce2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004ce4:	4818      	ldr	r0, [pc, #96]	; (8004d48 <MX_DAC1_Init+0x7c>)
 8004ce6:	f7fb fdb4 	bl	8000852 <HAL_DAC_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004cf0:	f000 f974 	bl	8004fdc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004cf8:	230a      	movs	r3, #10
 8004cfa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d00:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004d0e:	463b      	mov	r3, r7
 8004d10:	2200      	movs	r2, #0
 8004d12:	4619      	mov	r1, r3
 8004d14:	480c      	ldr	r0, [pc, #48]	; (8004d48 <MX_DAC1_Init+0x7c>)
 8004d16:	f7fb feef 	bl	8000af8 <HAL_DAC_ConfigChannel>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8004d20:	f000 f95c 	bl	8004fdc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004d28:	463b      	mov	r3, r7
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4806      	ldr	r0, [pc, #24]	; (8004d48 <MX_DAC1_Init+0x7c>)
 8004d30:	f7fb fee2 	bl	8000af8 <HAL_DAC_ConfigChannel>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8004d3a:	f000 f94f 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004d3e:	bf00      	nop
 8004d40:	3728      	adds	r7, #40	; 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2000009c 	.word	0x2000009c
 8004d4c:	40007400 	.word	0x40007400

08004d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d64:	1d3b      	adds	r3, r7, #4
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d84:	f640 22a1 	movw	r2, #2721	; 0xaa1
 8004d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d96:	4814      	ldr	r0, [pc, #80]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004d98:	f7fe faea 	bl	8003370 <HAL_TIM_Base_Init>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004da2:	f000 f91b 	bl	8004fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	4619      	mov	r1, r3
 8004db2:	480d      	ldr	r0, [pc, #52]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004db4:	f7fe fcc3 	bl	800373e <HAL_TIM_ConfigClockSource>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004dbe:	f000 f90d 	bl	8004fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4806      	ldr	r0, [pc, #24]	; (8004de8 <MX_TIM2_Init+0x98>)
 8004dd0:	f7fe fee4 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004dda:	f000 f8ff 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000110 	.word	0x20000110

08004dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004df0:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004df2:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <MX_USART2_UART_Init+0x94>)
 8004df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e12:	220c      	movs	r2, #12
 8004e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e1c:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e34:	4811      	ldr	r0, [pc, #68]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e36:	f7fe ff57 	bl	8003ce8 <HAL_UART_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004e40:	f000 f8cc 	bl	8004fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e44:	2100      	movs	r1, #0
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e48:	f7ff fc88 	bl	800475c <HAL_UARTEx_SetTxFifoThreshold>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004e52:	f000 f8c3 	bl	8004fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e56:	2100      	movs	r1, #0
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e5a:	f7ff fcbd 	bl	80047d8 <HAL_UARTEx_SetRxFifoThreshold>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004e64:	f000 f8ba 	bl	8004fdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004e68:	4804      	ldr	r0, [pc, #16]	; (8004e7c <MX_USART2_UART_Init+0x90>)
 8004e6a:	f7ff fc3e 	bl	80046ea <HAL_UARTEx_DisableFifoMode>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004e74:	f000 f8b2 	bl	8004fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e78:	bf00      	nop
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000015c 	.word	0x2000015c
 8004e80:	40004400 	.word	0x40004400

08004e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	6493      	str	r3, [r2, #72]	; 0x48
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6493      	str	r3, [r2, #72]	; 0x48
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <MX_DMA_Init+0x50>)
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	200b      	movs	r0, #11
 8004ec0:	f7fb fc91 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ec4:	200b      	movs	r0, #11
 8004ec6:	f7fb fcaa 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4a37      	ldr	r2, [pc, #220]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004efa:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f06:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2a:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f36:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	607b      	str	r3, [r7, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f54:	481f      	ldr	r0, [pc, #124]	; (8004fd4 <MX_GPIO_Init+0xfc>)
 8004f56:	f7fc fd0d 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8004f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4819      	ldr	r0, [pc, #100]	; (8004fd8 <MX_GPIO_Init+0x100>)
 8004f72:	f7fc fb6d 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f76:	230c      	movs	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004f86:	2308      	movs	r3, #8
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f94:	f7fc fb5c 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8004f98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <MX_GPIO_Init+0xfc>)
 8004fb2:	f7fc fb4d 	bl	8001650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2100      	movs	r1, #0
 8004fba:	2028      	movs	r0, #40	; 0x28
 8004fbc:	f7fb fc13 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fc0:	2028      	movs	r0, #40	; 0x28
 8004fc2:	f7fb fc2c 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8004fc6:	bf00      	nop
 8004fc8:	3728      	adds	r7, #40	; 0x28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	48000400 	.word	0x48000400
 8004fd8:	48000800 	.word	0x48000800

08004fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fe0:	b672      	cpsid	i
}
 8004fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fe4:	e7fe      	b.n	8004fe4 <Error_Handler+0x8>
	...

08004fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_MspInit+0x44>)
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_MspInit+0x44>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_MspInit+0x44>)
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_MspInit+0x44>)
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	4a08      	ldr	r2, [pc, #32]	; (800502c <HAL_MspInit+0x44>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6593      	str	r3, [r2, #88]	; 0x58
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_MspInit+0x44>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000

08005030 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2b      	ldr	r2, [pc, #172]	; (80050fc <HAL_DAC_MspInit+0xcc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d14f      	bne.n	80050f2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005052:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 8005058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800505c:	6593      	str	r3, [r2, #88]	; 0x58
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506a:	4b25      	ldr	r3, [pc, #148]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 800506c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506e:	4a24      	ldr	r2, [pc, #144]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_DAC_MspInit+0xd0>)
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005082:	2330      	movs	r3, #48	; 0x30
 8005084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005086:	2303      	movs	r3, #3
 8005088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	4619      	mov	r1, r3
 8005094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005098:	f7fc fada 	bl	8001650 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_DAC_MspInit+0xd8>)
 80050a0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050a4:	2206      	movs	r2, #6
 80050a6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050aa:	2210      	movs	r2, #16
 80050ac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050cc:	2220      	movs	r2, #32
 80050ce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80050d6:	480b      	ldr	r0, [pc, #44]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050d8:	f7fb ffec 	bl	80010b4 <HAL_DMA_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80050e2:	f7ff ff7b 	bl	8004fdc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	4a05      	ldr	r2, [pc, #20]	; (8005104 <HAL_DAC_MspInit+0xd4>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40007400 	.word	0x40007400
 8005100:	40021000 	.word	0x40021000
 8005104:	200000b0 	.word	0x200000b0
 8005108:	40020008 	.word	0x40020008

0800510c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d113      	bne.n	8005146 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_TIM_Base_MspInit+0x44>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <HAL_TIM_Base_MspInit+0x44>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6593      	str	r3, [r2, #88]	; 0x58
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_TIM_Base_MspInit+0x44>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005136:	2200      	movs	r2, #0
 8005138:	2100      	movs	r1, #0
 800513a:	201c      	movs	r0, #28
 800513c:	f7fb fb53 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005140:	201c      	movs	r0, #28
 8005142:	f7fb fb6c 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b0b0      	sub	sp, #192	; 0xc0
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800516c:	f107 0318 	add.w	r3, r7, #24
 8005170:	2294      	movs	r2, #148	; 0x94
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f9e7 	bl	8005548 <memset>
  if(huart->Instance==USART2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <HAL_UART_MspInit+0xf4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d15d      	bne.n	8005240 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005184:	2302      	movs	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005188:	2300      	movs	r3, #0
 800518a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800518c:	f107 0318 	add.w	r3, r7, #24
 8005190:	4618      	mov	r0, r3
 8005192:	f7fd fbd5 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800519c:	f7ff ff1e 	bl	8004fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	4a29      	ldr	r2, [pc, #164]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	6593      	str	r3, [r2, #88]	; 0x58
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	4a23      	ldr	r2, [pc, #140]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051d0:	4b1e      	ldr	r3, [pc, #120]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	4a1d      	ldr	r2, [pc, #116]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051d6:	f043 0308 	orr.w	r3, r3, #8
 80051da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_UART_MspInit+0xf8>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f0:	2302      	movs	r3, #2
 80051f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fc:	2303      	movs	r3, #3
 80051fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005202:	2303      	movs	r3, #3
 8005204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005208:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800520c:	4619      	mov	r1, r3
 800520e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005212:	f7fc fa1d 	bl	8001650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005216:	2320      	movs	r3, #32
 8005218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005228:	2303      	movs	r3, #3
 800522a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800522e:	2307      	movs	r3, #7
 8005230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005234:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005238:	4619      	mov	r1, r3
 800523a:	4805      	ldr	r0, [pc, #20]	; (8005250 <HAL_UART_MspInit+0xfc>)
 800523c:	f7fc fa08 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005240:	bf00      	nop
 8005242:	37c0      	adds	r7, #192	; 0xc0
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40004400 	.word	0x40004400
 800524c:	40021000 	.word	0x40021000
 8005250:	48000c00 	.word	0x48000c00

08005254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005258:	e7fe      	b.n	8005258 <NMI_Handler+0x4>

0800525a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800525e:	e7fe      	b.n	800525e <HardFault_Handler+0x4>

08005260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005264:	e7fe      	b.n	8005264 <MemManage_Handler+0x4>

08005266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005266:	b480      	push	{r7}
 8005268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800526a:	e7fe      	b.n	800526a <BusFault_Handler+0x4>

0800526c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005270:	e7fe      	b.n	8005270 <UsageFault_Handler+0x4>

08005272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005276:	bf00      	nop
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052a0:	f7fb f982 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80052ac:	4802      	ldr	r0, [pc, #8]	; (80052b8 <DMA1_Channel1_IRQHandler+0x10>)
 80052ae:	f7fc f880 	bl	80013b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200000b0 	.word	0x200000b0

080052bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <TIM2_IRQHandler+0x10>)
 80052c2:	f7fe f91d 	bl	8003500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000110 	.word	0x20000110

080052d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 80052d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80052d8:	f7fc fb7e 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80052dc:	bf00      	nop
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00a      	b.n	8005308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052f2:	f3af 8000 	nop.w
 80052f6:	4601      	mov	r1, r0
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	60ba      	str	r2, [r7, #8]
 80052fe:	b2ca      	uxtb	r2, r1
 8005300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3301      	adds	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	dbf0      	blt.n	80052f2 <_read+0x12>
  }

  return len;
 8005310:	687b      	ldr	r3, [r7, #4]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_close>:
  }
  return len;
}

int _close(int file)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005342:	605a      	str	r2, [r3, #4]
  return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <_isatty>:

int _isatty(int file)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800535a:	2301      	movs	r3, #1
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <_sbrk+0x5c>)
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <_sbrk+0x60>)
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <_sbrk+0x64>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <_sbrk+0x64>)
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <_sbrk+0x68>)
 80053a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <_sbrk+0x64>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d207      	bcs.n	80053c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053b4:	f000 f89e 	bl	80054f4 <__errno>
 80053b8:	4603      	mov	r3, r0
 80053ba:	220c      	movs	r2, #12
 80053bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c2:	e009      	b.n	80053d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053c4:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <_sbrk+0x64>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <_sbrk+0x64>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <_sbrk+0x64>)
 80053d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	200a0000 	.word	0x200a0000
 80053e4:	00000400 	.word	0x00000400
 80053e8:	200002f4 	.word	0x200002f4
 80053ec:	20000308 	.word	0x20000308

080053f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <SystemInit+0x20>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	4a05      	ldr	r2, [pc, #20]	; (8005410 <SystemInit+0x20>)
 80053fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800544c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005418:	f7ff ffea 	bl	80053f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800541c:	480c      	ldr	r0, [pc, #48]	; (8005450 <LoopForever+0x6>)
  ldr r1, =_edata
 800541e:	490d      	ldr	r1, [pc, #52]	; (8005454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <LoopForever+0xe>)
  movs r3, #0
 8005422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005424:	e002      	b.n	800542c <LoopCopyDataInit>

08005426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800542a:	3304      	adds	r3, #4

0800542c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800542c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800542e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005430:	d3f9      	bcc.n	8005426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005434:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <LoopForever+0x16>)
  movs r3, #0
 8005436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005438:	e001      	b.n	800543e <LoopFillZerobss>

0800543a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800543a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800543c:	3204      	adds	r2, #4

0800543e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800543e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005440:	d3fb      	bcc.n	800543a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005442:	f000 f85d 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005446:	f7ff fb0d 	bl	8004a64 <main>

0800544a <LoopForever>:

LoopForever:
    b LoopForever
 800544a:	e7fe      	b.n	800544a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800544c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005454:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005458:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 800545c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8005460:	20000308 	.word	0x20000308

08005464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005464:	e7fe      	b.n	8005464 <ADC1_IRQHandler>
	...

08005468 <arm_sin_f32>:
 8005468:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80054e8 <arm_sin_f32+0x80>
 800546c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005470:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005478:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800547c:	d504      	bpl.n	8005488 <arm_sin_f32+0x20>
 800547e:	ee17 3a90 	vmov	r3, s15
 8005482:	3b01      	subs	r3, #1
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80054ec <arm_sin_f32+0x84>
 8005490:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005494:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005498:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800549c:	ee17 3a90 	vmov	r3, s15
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a6:	d21a      	bcs.n	80054de <arm_sin_f32+0x76>
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	1c59      	adds	r1, r3, #1
 80054b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <arm_sin_f32+0x88>)
 80054b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80054c4:	ed93 7a00 	vldr	s14, [r3]
 80054c8:	edd2 6a00 	vldr	s13, [r2]
 80054cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80054d0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80054d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054d8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80054dc:	4770      	bx	lr
 80054de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80054e2:	2101      	movs	r1, #1
 80054e4:	2300      	movs	r3, #0
 80054e6:	e7e6      	b.n	80054b6 <arm_sin_f32+0x4e>
 80054e8:	3e22f983 	.word	0x3e22f983
 80054ec:	44000000 	.word	0x44000000
 80054f0:	08005ff8 	.word	0x08005ff8

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000018 	.word	0x20000018

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	; (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	; (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	; (8005544 <__libc_init_array+0x44>)
 8005514:	f000 fd1e 	bl	8005f54 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	08006868 	.word	0x08006868
 800553c:	08006868 	.word	0x08006868
 8005540:	08006868 	.word	0x08006868
 8005544:	0800686c 	.word	0x0800686c

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <_puts_r>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	4605      	mov	r5, r0
 800555e:	b118      	cbz	r0, 8005568 <_puts_r+0x10>
 8005560:	6983      	ldr	r3, [r0, #24]
 8005562:	b90b      	cbnz	r3, 8005568 <_puts_r+0x10>
 8005564:	f000 fa48 	bl	80059f8 <__sinit>
 8005568:	69ab      	ldr	r3, [r5, #24]
 800556a:	68ac      	ldr	r4, [r5, #8]
 800556c:	b913      	cbnz	r3, 8005574 <_puts_r+0x1c>
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fa42 	bl	80059f8 <__sinit>
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <_puts_r+0xd0>)
 8005576:	429c      	cmp	r4, r3
 8005578:	d120      	bne.n	80055bc <_puts_r+0x64>
 800557a:	686c      	ldr	r4, [r5, #4]
 800557c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557e:	07db      	lsls	r3, r3, #31
 8005580:	d405      	bmi.n	800558e <_puts_r+0x36>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	0598      	lsls	r0, r3, #22
 8005586:	d402      	bmi.n	800558e <_puts_r+0x36>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f000 fad3 	bl	8005b34 <__retarget_lock_acquire_recursive>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	0719      	lsls	r1, r3, #28
 8005592:	d51d      	bpl.n	80055d0 <_puts_r+0x78>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	b1db      	cbz	r3, 80055d0 <_puts_r+0x78>
 8005598:	3e01      	subs	r6, #1
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	bb39      	cbnz	r1, 80055f6 <_puts_r+0x9e>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da38      	bge.n	800561c <_puts_r+0xc4>
 80055aa:	4622      	mov	r2, r4
 80055ac:	210a      	movs	r1, #10
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f848 	bl	8005644 <__swbuf_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d011      	beq.n	80055dc <_puts_r+0x84>
 80055b8:	250a      	movs	r5, #10
 80055ba:	e011      	b.n	80055e0 <_puts_r+0x88>
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <_puts_r+0xd4>)
 80055be:	429c      	cmp	r4, r3
 80055c0:	d101      	bne.n	80055c6 <_puts_r+0x6e>
 80055c2:	68ac      	ldr	r4, [r5, #8]
 80055c4:	e7da      	b.n	800557c <_puts_r+0x24>
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <_puts_r+0xd8>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	bf08      	it	eq
 80055cc:	68ec      	ldreq	r4, [r5, #12]
 80055ce:	e7d5      	b.n	800557c <_puts_r+0x24>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f888 	bl	80056e8 <__swsetup_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d0dd      	beq.n	8005598 <_puts_r+0x40>
 80055dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e2:	07da      	lsls	r2, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_puts_r+0x9a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	059b      	lsls	r3, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_puts_r+0x9a>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f000 faa2 	bl	8005b36 <__retarget_lock_release_recursive>
 80055f2:	4628      	mov	r0, r5
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da04      	bge.n	8005604 <_puts_r+0xac>
 80055fa:	69a2      	ldr	r2, [r4, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	dc06      	bgt.n	800560e <_puts_r+0xb6>
 8005600:	290a      	cmp	r1, #10
 8005602:	d004      	beq.n	800560e <_puts_r+0xb6>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	7019      	strb	r1, [r3, #0]
 800560c:	e7c5      	b.n	800559a <_puts_r+0x42>
 800560e:	4622      	mov	r2, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f000 f817 	bl	8005644 <__swbuf_r>
 8005616:	3001      	adds	r0, #1
 8005618:	d1bf      	bne.n	800559a <_puts_r+0x42>
 800561a:	e7df      	b.n	80055dc <_puts_r+0x84>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	250a      	movs	r5, #10
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	701d      	strb	r5, [r3, #0]
 8005626:	e7db      	b.n	80055e0 <_puts_r+0x88>
 8005628:	08006820 	.word	0x08006820
 800562c:	08006840 	.word	0x08006840
 8005630:	08006800 	.word	0x08006800

08005634 <puts>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <puts+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f7ff bf8d 	b.w	8005558 <_puts_r>
 800563e:	bf00      	nop
 8005640:	20000018 	.word	0x20000018

08005644 <__swbuf_r>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	460e      	mov	r6, r1
 8005648:	4614      	mov	r4, r2
 800564a:	4605      	mov	r5, r0
 800564c:	b118      	cbz	r0, 8005656 <__swbuf_r+0x12>
 800564e:	6983      	ldr	r3, [r0, #24]
 8005650:	b90b      	cbnz	r3, 8005656 <__swbuf_r+0x12>
 8005652:	f000 f9d1 	bl	80059f8 <__sinit>
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <__swbuf_r+0x98>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d12b      	bne.n	80056b4 <__swbuf_r+0x70>
 800565c:	686c      	ldr	r4, [r5, #4]
 800565e:	69a3      	ldr	r3, [r4, #24]
 8005660:	60a3      	str	r3, [r4, #8]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	071a      	lsls	r2, r3, #28
 8005666:	d52f      	bpl.n	80056c8 <__swbuf_r+0x84>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	b36b      	cbz	r3, 80056c8 <__swbuf_r+0x84>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	6963      	ldr	r3, [r4, #20]
 8005674:	b2f6      	uxtb	r6, r6
 8005676:	4283      	cmp	r3, r0
 8005678:	4637      	mov	r7, r6
 800567a:	dc04      	bgt.n	8005686 <__swbuf_r+0x42>
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f926 	bl	80058d0 <_fflush_r>
 8005684:	bb30      	cbnz	r0, 80056d4 <__swbuf_r+0x90>
 8005686:	68a3      	ldr	r3, [r4, #8]
 8005688:	3b01      	subs	r3, #1
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	701e      	strb	r6, [r3, #0]
 8005694:	6963      	ldr	r3, [r4, #20]
 8005696:	3001      	adds	r0, #1
 8005698:	4283      	cmp	r3, r0
 800569a:	d004      	beq.n	80056a6 <__swbuf_r+0x62>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d506      	bpl.n	80056b0 <__swbuf_r+0x6c>
 80056a2:	2e0a      	cmp	r6, #10
 80056a4:	d104      	bne.n	80056b0 <__swbuf_r+0x6c>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f911 	bl	80058d0 <_fflush_r>
 80056ae:	b988      	cbnz	r0, 80056d4 <__swbuf_r+0x90>
 80056b0:	4638      	mov	r0, r7
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <__swbuf_r+0x9c>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d101      	bne.n	80056be <__swbuf_r+0x7a>
 80056ba:	68ac      	ldr	r4, [r5, #8]
 80056bc:	e7cf      	b.n	800565e <__swbuf_r+0x1a>
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <__swbuf_r+0xa0>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	bf08      	it	eq
 80056c4:	68ec      	ldreq	r4, [r5, #12]
 80056c6:	e7ca      	b.n	800565e <__swbuf_r+0x1a>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f80c 	bl	80056e8 <__swsetup_r>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d0cb      	beq.n	800566c <__swbuf_r+0x28>
 80056d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056d8:	e7ea      	b.n	80056b0 <__swbuf_r+0x6c>
 80056da:	bf00      	nop
 80056dc:	08006820 	.word	0x08006820
 80056e0:	08006840 	.word	0x08006840
 80056e4:	08006800 	.word	0x08006800

080056e8 <__swsetup_r>:
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <__swsetup_r+0xcc>)
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	4606      	mov	r6, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	b125      	cbz	r5, 80056fe <__swsetup_r+0x16>
 80056f4:	69ab      	ldr	r3, [r5, #24]
 80056f6:	b913      	cbnz	r3, 80056fe <__swsetup_r+0x16>
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f97d 	bl	80059f8 <__sinit>
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <__swsetup_r+0xd0>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d10f      	bne.n	8005724 <__swsetup_r+0x3c>
 8005704:	686c      	ldr	r4, [r5, #4]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800570c:	0719      	lsls	r1, r3, #28
 800570e:	d42c      	bmi.n	800576a <__swsetup_r+0x82>
 8005710:	06dd      	lsls	r5, r3, #27
 8005712:	d411      	bmi.n	8005738 <__swsetup_r+0x50>
 8005714:	2309      	movs	r3, #9
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005722:	e03e      	b.n	80057a2 <__swsetup_r+0xba>
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <__swsetup_r+0xd4>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <__swsetup_r+0x46>
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	e7eb      	b.n	8005706 <__swsetup_r+0x1e>
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <__swsetup_r+0xd8>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68ec      	ldreq	r4, [r5, #12]
 8005736:	e7e6      	b.n	8005706 <__swsetup_r+0x1e>
 8005738:	0758      	lsls	r0, r3, #29
 800573a:	d512      	bpl.n	8005762 <__swsetup_r+0x7a>
 800573c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800573e:	b141      	cbz	r1, 8005752 <__swsetup_r+0x6a>
 8005740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <__swsetup_r+0x66>
 8005748:	4630      	mov	r0, r6
 800574a:	f000 fa5b 	bl	8005c04 <_free_r>
 800574e:	2300      	movs	r3, #0
 8005750:	6363      	str	r3, [r4, #52]	; 0x34
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	2300      	movs	r3, #0
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	b94b      	cbnz	r3, 8005782 <__swsetup_r+0x9a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d003      	beq.n	8005782 <__swsetup_r+0x9a>
 800577a:	4621      	mov	r1, r4
 800577c:	4630      	mov	r0, r6
 800577e:	f000 fa01 	bl	8005b84 <__smakebuf_r>
 8005782:	89a0      	ldrh	r0, [r4, #12]
 8005784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005788:	f010 0301 	ands.w	r3, r0, #1
 800578c:	d00a      	beq.n	80057a4 <__swsetup_r+0xbc>
 800578e:	2300      	movs	r3, #0
 8005790:	60a3      	str	r3, [r4, #8]
 8005792:	6963      	ldr	r3, [r4, #20]
 8005794:	425b      	negs	r3, r3
 8005796:	61a3      	str	r3, [r4, #24]
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	b943      	cbnz	r3, 80057ae <__swsetup_r+0xc6>
 800579c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a0:	d1ba      	bne.n	8005718 <__swsetup_r+0x30>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	0781      	lsls	r1, r0, #30
 80057a6:	bf58      	it	pl
 80057a8:	6963      	ldrpl	r3, [r4, #20]
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	e7f4      	b.n	8005798 <__swsetup_r+0xb0>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7f7      	b.n	80057a2 <__swsetup_r+0xba>
 80057b2:	bf00      	nop
 80057b4:	20000018 	.word	0x20000018
 80057b8:	08006820 	.word	0x08006820
 80057bc:	08006840 	.word	0x08006840
 80057c0:	08006800 	.word	0x08006800

080057c4 <__sflush_r>:
 80057c4:	898a      	ldrh	r2, [r1, #12]
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	4605      	mov	r5, r0
 80057cc:	0710      	lsls	r0, r2, #28
 80057ce:	460c      	mov	r4, r1
 80057d0:	d458      	bmi.n	8005884 <__sflush_r+0xc0>
 80057d2:	684b      	ldr	r3, [r1, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc05      	bgt.n	80057e4 <__sflush_r+0x20>
 80057d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dc02      	bgt.n	80057e4 <__sflush_r+0x20>
 80057de:	2000      	movs	r0, #0
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d0f9      	beq.n	80057de <__sflush_r+0x1a>
 80057ea:	2300      	movs	r3, #0
 80057ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f0:	682f      	ldr	r7, [r5, #0]
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	d032      	beq.n	800585c <__sflush_r+0x98>
 80057f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	075a      	lsls	r2, r3, #29
 80057fc:	d505      	bpl.n	800580a <__sflush_r+0x46>
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	1ac0      	subs	r0, r0, r3
 8005802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005804:	b10b      	cbz	r3, 800580a <__sflush_r+0x46>
 8005806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	2300      	movs	r3, #0
 800580c:	4602      	mov	r2, r0
 800580e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	4628      	mov	r0, r5
 8005814:	47b0      	blx	r6
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	d106      	bne.n	800582a <__sflush_r+0x66>
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	291d      	cmp	r1, #29
 8005820:	d82c      	bhi.n	800587c <__sflush_r+0xb8>
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <__sflush_r+0x108>)
 8005824:	40ca      	lsrs	r2, r1
 8005826:	07d6      	lsls	r6, r2, #31
 8005828:	d528      	bpl.n	800587c <__sflush_r+0xb8>
 800582a:	2200      	movs	r2, #0
 800582c:	6062      	str	r2, [r4, #4]
 800582e:	04d9      	lsls	r1, r3, #19
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	d504      	bpl.n	8005840 <__sflush_r+0x7c>
 8005836:	1c42      	adds	r2, r0, #1
 8005838:	d101      	bne.n	800583e <__sflush_r+0x7a>
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	b903      	cbnz	r3, 8005840 <__sflush_r+0x7c>
 800583e:	6560      	str	r0, [r4, #84]	; 0x54
 8005840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005842:	602f      	str	r7, [r5, #0]
 8005844:	2900      	cmp	r1, #0
 8005846:	d0ca      	beq.n	80057de <__sflush_r+0x1a>
 8005848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584c:	4299      	cmp	r1, r3
 800584e:	d002      	beq.n	8005856 <__sflush_r+0x92>
 8005850:	4628      	mov	r0, r5
 8005852:	f000 f9d7 	bl	8005c04 <_free_r>
 8005856:	2000      	movs	r0, #0
 8005858:	6360      	str	r0, [r4, #52]	; 0x34
 800585a:	e7c1      	b.n	80057e0 <__sflush_r+0x1c>
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	2301      	movs	r3, #1
 8005860:	4628      	mov	r0, r5
 8005862:	47b0      	blx	r6
 8005864:	1c41      	adds	r1, r0, #1
 8005866:	d1c7      	bne.n	80057f8 <__sflush_r+0x34>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0c4      	beq.n	80057f8 <__sflush_r+0x34>
 800586e:	2b1d      	cmp	r3, #29
 8005870:	d001      	beq.n	8005876 <__sflush_r+0xb2>
 8005872:	2b16      	cmp	r3, #22
 8005874:	d101      	bne.n	800587a <__sflush_r+0xb6>
 8005876:	602f      	str	r7, [r5, #0]
 8005878:	e7b1      	b.n	80057de <__sflush_r+0x1a>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7ad      	b.n	80057e0 <__sflush_r+0x1c>
 8005884:	690f      	ldr	r7, [r1, #16]
 8005886:	2f00      	cmp	r7, #0
 8005888:	d0a9      	beq.n	80057de <__sflush_r+0x1a>
 800588a:	0793      	lsls	r3, r2, #30
 800588c:	680e      	ldr	r6, [r1, #0]
 800588e:	bf08      	it	eq
 8005890:	694b      	ldreq	r3, [r1, #20]
 8005892:	600f      	str	r7, [r1, #0]
 8005894:	bf18      	it	ne
 8005896:	2300      	movne	r3, #0
 8005898:	eba6 0807 	sub.w	r8, r6, r7
 800589c:	608b      	str	r3, [r1, #8]
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	dd9c      	ble.n	80057de <__sflush_r+0x1a>
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a8:	4643      	mov	r3, r8
 80058aa:	463a      	mov	r2, r7
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b0      	blx	r6
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dc06      	bgt.n	80058c2 <__sflush_r+0xfe>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c0:	e78e      	b.n	80057e0 <__sflush_r+0x1c>
 80058c2:	4407      	add	r7, r0
 80058c4:	eba8 0800 	sub.w	r8, r8, r0
 80058c8:	e7e9      	b.n	800589e <__sflush_r+0xda>
 80058ca:	bf00      	nop
 80058cc:	20400001 	.word	0x20400001

080058d0 <_fflush_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b913      	cbnz	r3, 80058e0 <_fflush_r+0x10>
 80058da:	2500      	movs	r5, #0
 80058dc:	4628      	mov	r0, r5
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	b118      	cbz	r0, 80058ea <_fflush_r+0x1a>
 80058e2:	6983      	ldr	r3, [r0, #24]
 80058e4:	b90b      	cbnz	r3, 80058ea <_fflush_r+0x1a>
 80058e6:	f000 f887 	bl	80059f8 <__sinit>
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <_fflush_r+0x6c>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d11b      	bne.n	8005928 <_fflush_r+0x58>
 80058f0:	686c      	ldr	r4, [r5, #4]
 80058f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <_fflush_r+0xa>
 80058fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058fc:	07d0      	lsls	r0, r2, #31
 80058fe:	d404      	bmi.n	800590a <_fflush_r+0x3a>
 8005900:	0599      	lsls	r1, r3, #22
 8005902:	d402      	bmi.n	800590a <_fflush_r+0x3a>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 f915 	bl	8005b34 <__retarget_lock_acquire_recursive>
 800590a:	4628      	mov	r0, r5
 800590c:	4621      	mov	r1, r4
 800590e:	f7ff ff59 	bl	80057c4 <__sflush_r>
 8005912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005914:	07da      	lsls	r2, r3, #31
 8005916:	4605      	mov	r5, r0
 8005918:	d4e0      	bmi.n	80058dc <_fflush_r+0xc>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	059b      	lsls	r3, r3, #22
 800591e:	d4dd      	bmi.n	80058dc <_fflush_r+0xc>
 8005920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005922:	f000 f908 	bl	8005b36 <__retarget_lock_release_recursive>
 8005926:	e7d9      	b.n	80058dc <_fflush_r+0xc>
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <_fflush_r+0x70>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d101      	bne.n	8005932 <_fflush_r+0x62>
 800592e:	68ac      	ldr	r4, [r5, #8]
 8005930:	e7df      	b.n	80058f2 <_fflush_r+0x22>
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <_fflush_r+0x74>)
 8005934:	429c      	cmp	r4, r3
 8005936:	bf08      	it	eq
 8005938:	68ec      	ldreq	r4, [r5, #12]
 800593a:	e7da      	b.n	80058f2 <_fflush_r+0x22>
 800593c:	08006820 	.word	0x08006820
 8005940:	08006840 	.word	0x08006840
 8005944:	08006800 	.word	0x08006800

08005948 <std>:
 8005948:	2300      	movs	r3, #0
 800594a:	b510      	push	{r4, lr}
 800594c:	4604      	mov	r4, r0
 800594e:	e9c0 3300 	strd	r3, r3, [r0]
 8005952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005956:	6083      	str	r3, [r0, #8]
 8005958:	8181      	strh	r1, [r0, #12]
 800595a:	6643      	str	r3, [r0, #100]	; 0x64
 800595c:	81c2      	strh	r2, [r0, #14]
 800595e:	6183      	str	r3, [r0, #24]
 8005960:	4619      	mov	r1, r3
 8005962:	2208      	movs	r2, #8
 8005964:	305c      	adds	r0, #92	; 0x5c
 8005966:	f7ff fdef 	bl	8005548 <memset>
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <std+0x38>)
 800596c:	6263      	str	r3, [r4, #36]	; 0x24
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <std+0x3c>)
 8005970:	62a3      	str	r3, [r4, #40]	; 0x28
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x40>)
 8005974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x44>)
 8005978:	6224      	str	r4, [r4, #32]
 800597a:	6323      	str	r3, [r4, #48]	; 0x30
 800597c:	bd10      	pop	{r4, pc}
 800597e:	bf00      	nop
 8005980:	08005de5 	.word	0x08005de5
 8005984:	08005e07 	.word	0x08005e07
 8005988:	08005e3f 	.word	0x08005e3f
 800598c:	08005e63 	.word	0x08005e63

08005990 <_cleanup_r>:
 8005990:	4901      	ldr	r1, [pc, #4]	; (8005998 <_cleanup_r+0x8>)
 8005992:	f000 b8af 	b.w	8005af4 <_fwalk_reent>
 8005996:	bf00      	nop
 8005998:	080058d1 	.word	0x080058d1

0800599c <__sfmoreglue>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	2268      	movs	r2, #104	; 0x68
 80059a0:	1e4d      	subs	r5, r1, #1
 80059a2:	4355      	muls	r5, r2
 80059a4:	460e      	mov	r6, r1
 80059a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059aa:	f000 f997 	bl	8005cdc <_malloc_r>
 80059ae:	4604      	mov	r4, r0
 80059b0:	b140      	cbz	r0, 80059c4 <__sfmoreglue+0x28>
 80059b2:	2100      	movs	r1, #0
 80059b4:	e9c0 1600 	strd	r1, r6, [r0]
 80059b8:	300c      	adds	r0, #12
 80059ba:	60a0      	str	r0, [r4, #8]
 80059bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c0:	f7ff fdc2 	bl	8005548 <memset>
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd70      	pop	{r4, r5, r6, pc}

080059c8 <__sfp_lock_acquire>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__sfp_lock_acquire+0x8>)
 80059ca:	f000 b8b3 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	200002f9 	.word	0x200002f9

080059d4 <__sfp_lock_release>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sfp_lock_release+0x8>)
 80059d6:	f000 b8ae 	b.w	8005b36 <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	200002f9 	.word	0x200002f9

080059e0 <__sinit_lock_acquire>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sinit_lock_acquire+0x8>)
 80059e2:	f000 b8a7 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 80059e6:	bf00      	nop
 80059e8:	200002fa 	.word	0x200002fa

080059ec <__sinit_lock_release>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__sinit_lock_release+0x8>)
 80059ee:	f000 b8a2 	b.w	8005b36 <__retarget_lock_release_recursive>
 80059f2:	bf00      	nop
 80059f4:	200002fa 	.word	0x200002fa

080059f8 <__sinit>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4604      	mov	r4, r0
 80059fc:	f7ff fff0 	bl	80059e0 <__sinit_lock_acquire>
 8005a00:	69a3      	ldr	r3, [r4, #24]
 8005a02:	b11b      	cbz	r3, 8005a0c <__sinit+0x14>
 8005a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a08:	f7ff bff0 	b.w	80059ec <__sinit_lock_release>
 8005a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a10:	6523      	str	r3, [r4, #80]	; 0x50
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <__sinit+0x68>)
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <__sinit+0x6c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	bf04      	itt	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	61a3      	streq	r3, [r4, #24]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f820 	bl	8005a68 <__sfp>
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f81c 	bl	8005a68 <__sfp>
 8005a30:	60a0      	str	r0, [r4, #8]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f818 	bl	8005a68 <__sfp>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60e0      	str	r0, [r4, #12]
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	6860      	ldr	r0, [r4, #4]
 8005a40:	f7ff ff82 	bl	8005948 <std>
 8005a44:	68a0      	ldr	r0, [r4, #8]
 8005a46:	2201      	movs	r2, #1
 8005a48:	2109      	movs	r1, #9
 8005a4a:	f7ff ff7d 	bl	8005948 <std>
 8005a4e:	68e0      	ldr	r0, [r4, #12]
 8005a50:	2202      	movs	r2, #2
 8005a52:	2112      	movs	r1, #18
 8005a54:	f7ff ff78 	bl	8005948 <std>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	61a3      	str	r3, [r4, #24]
 8005a5c:	e7d2      	b.n	8005a04 <__sinit+0xc>
 8005a5e:	bf00      	nop
 8005a60:	080067fc 	.word	0x080067fc
 8005a64:	08005991 	.word	0x08005991

08005a68 <__sfp>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	f7ff ffac 	bl	80059c8 <__sfp_lock_acquire>
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <__sfp+0x84>)
 8005a72:	681e      	ldr	r6, [r3, #0]
 8005a74:	69b3      	ldr	r3, [r6, #24]
 8005a76:	b913      	cbnz	r3, 8005a7e <__sfp+0x16>
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f7ff ffbd 	bl	80059f8 <__sinit>
 8005a7e:	3648      	adds	r6, #72	; 0x48
 8005a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	d503      	bpl.n	8005a90 <__sfp+0x28>
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	b30b      	cbz	r3, 8005ad0 <__sfp+0x68>
 8005a8c:	6836      	ldr	r6, [r6, #0]
 8005a8e:	e7f7      	b.n	8005a80 <__sfp+0x18>
 8005a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a94:	b9d5      	cbnz	r5, 8005acc <__sfp+0x64>
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <__sfp+0x88>)
 8005a98:	60e3      	str	r3, [r4, #12]
 8005a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa0:	f000 f847 	bl	8005b32 <__retarget_lock_init_recursive>
 8005aa4:	f7ff ff96 	bl	80059d4 <__sfp_lock_release>
 8005aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	61a5      	str	r5, [r4, #24]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005abc:	f7ff fd44 	bl	8005548 <memset>
 8005ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005acc:	3468      	adds	r4, #104	; 0x68
 8005ace:	e7d9      	b.n	8005a84 <__sfp+0x1c>
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f7ff ff62 	bl	800599c <__sfmoreglue>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	6030      	str	r0, [r6, #0]
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d1d5      	bne.n	8005a8c <__sfp+0x24>
 8005ae0:	f7ff ff78 	bl	80059d4 <__sfp_lock_release>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	e7ee      	b.n	8005ac8 <__sfp+0x60>
 8005aea:	bf00      	nop
 8005aec:	080067fc 	.word	0x080067fc
 8005af0:	ffff0001 	.word	0xffff0001

08005af4 <_fwalk_reent>:
 8005af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	4606      	mov	r6, r0
 8005afa:	4688      	mov	r8, r1
 8005afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b00:	2700      	movs	r7, #0
 8005b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b06:	f1b9 0901 	subs.w	r9, r9, #1
 8005b0a:	d505      	bpl.n	8005b18 <_fwalk_reent+0x24>
 8005b0c:	6824      	ldr	r4, [r4, #0]
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	d1f7      	bne.n	8005b02 <_fwalk_reent+0xe>
 8005b12:	4638      	mov	r0, r7
 8005b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b18:	89ab      	ldrh	r3, [r5, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d907      	bls.n	8005b2e <_fwalk_reent+0x3a>
 8005b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b22:	3301      	adds	r3, #1
 8005b24:	d003      	beq.n	8005b2e <_fwalk_reent+0x3a>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4630      	mov	r0, r6
 8005b2a:	47c0      	blx	r8
 8005b2c:	4307      	orrs	r7, r0
 8005b2e:	3568      	adds	r5, #104	; 0x68
 8005b30:	e7e9      	b.n	8005b06 <_fwalk_reent+0x12>

08005b32 <__retarget_lock_init_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_acquire_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_release_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <__swhatbuf_r>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	460e      	mov	r6, r1
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	2900      	cmp	r1, #0
 8005b42:	b096      	sub	sp, #88	; 0x58
 8005b44:	4614      	mov	r4, r2
 8005b46:	461d      	mov	r5, r3
 8005b48:	da08      	bge.n	8005b5c <__swhatbuf_r+0x24>
 8005b4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	061a      	lsls	r2, r3, #24
 8005b54:	d410      	bmi.n	8005b78 <__swhatbuf_r+0x40>
 8005b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5a:	e00e      	b.n	8005b7a <__swhatbuf_r+0x42>
 8005b5c:	466a      	mov	r2, sp
 8005b5e:	f000 f9a7 	bl	8005eb0 <_fstat_r>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	dbf1      	blt.n	8005b4a <__swhatbuf_r+0x12>
 8005b66:	9a01      	ldr	r2, [sp, #4]
 8005b68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b70:	425a      	negs	r2, r3
 8005b72:	415a      	adcs	r2, r3
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	e7ee      	b.n	8005b56 <__swhatbuf_r+0x1e>
 8005b78:	2340      	movs	r3, #64	; 0x40
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	b016      	add	sp, #88	; 0x58
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b84 <__smakebuf_r>:
 8005b84:	898b      	ldrh	r3, [r1, #12]
 8005b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b88:	079d      	lsls	r5, r3, #30
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	d507      	bpl.n	8005ba0 <__smakebuf_r+0x1c>
 8005b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	2301      	movs	r3, #1
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	ab01      	add	r3, sp, #4
 8005ba2:	466a      	mov	r2, sp
 8005ba4:	f7ff ffc8 	bl	8005b38 <__swhatbuf_r>
 8005ba8:	9900      	ldr	r1, [sp, #0]
 8005baa:	4605      	mov	r5, r0
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 f895 	bl	8005cdc <_malloc_r>
 8005bb2:	b948      	cbnz	r0, 8005bc8 <__smakebuf_r+0x44>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	059a      	lsls	r2, r3, #22
 8005bba:	d4ef      	bmi.n	8005b9c <__smakebuf_r+0x18>
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	e7e3      	b.n	8005b90 <__smakebuf_r+0xc>
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <__smakebuf_r+0x7c>)
 8005bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	6020      	str	r0, [r4, #0]
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	6163      	str	r3, [r4, #20]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	6120      	str	r0, [r4, #16]
 8005bde:	b15b      	cbz	r3, 8005bf8 <__smakebuf_r+0x74>
 8005be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f975 	bl	8005ed4 <_isatty_r>
 8005bea:	b128      	cbz	r0, 8005bf8 <__smakebuf_r+0x74>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	89a0      	ldrh	r0, [r4, #12]
 8005bfa:	4305      	orrs	r5, r0
 8005bfc:	81a5      	strh	r5, [r4, #12]
 8005bfe:	e7cd      	b.n	8005b9c <__smakebuf_r+0x18>
 8005c00:	08005991 	.word	0x08005991

08005c04 <_free_r>:
 8005c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d044      	beq.n	8005c94 <_free_r+0x90>
 8005c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0e:	9001      	str	r0, [sp, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f1a1 0404 	sub.w	r4, r1, #4
 8005c16:	bfb8      	it	lt
 8005c18:	18e4      	addlt	r4, r4, r3
 8005c1a:	f000 f97d 	bl	8005f18 <__malloc_lock>
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <_free_r+0x94>)
 8005c20:	9801      	ldr	r0, [sp, #4]
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	b933      	cbnz	r3, 8005c34 <_free_r+0x30>
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	b003      	add	sp, #12
 8005c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c30:	f000 b978 	b.w	8005f24 <__malloc_unlock>
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d908      	bls.n	8005c4a <_free_r+0x46>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf01      	itttt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	1949      	addeq	r1, r1, r5
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	e7ed      	b.n	8005c26 <_free_r+0x22>
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b10b      	cbz	r3, 8005c54 <_free_r+0x50>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d9fa      	bls.n	8005c4a <_free_r+0x46>
 8005c54:	6811      	ldr	r1, [r2, #0]
 8005c56:	1855      	adds	r5, r2, r1
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d10b      	bne.n	8005c74 <_free_r+0x70>
 8005c5c:	6824      	ldr	r4, [r4, #0]
 8005c5e:	4421      	add	r1, r4
 8005c60:	1854      	adds	r4, r2, r1
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	6011      	str	r1, [r2, #0]
 8005c66:	d1e0      	bne.n	8005c2a <_free_r+0x26>
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	6053      	str	r3, [r2, #4]
 8005c6e:	4421      	add	r1, r4
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	e7da      	b.n	8005c2a <_free_r+0x26>
 8005c74:	d902      	bls.n	8005c7c <_free_r+0x78>
 8005c76:	230c      	movs	r3, #12
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	e7d6      	b.n	8005c2a <_free_r+0x26>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	1961      	adds	r1, r4, r5
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bf04      	itt	eq
 8005c84:	6819      	ldreq	r1, [r3, #0]
 8005c86:	685b      	ldreq	r3, [r3, #4]
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	bf04      	itt	eq
 8005c8c:	1949      	addeq	r1, r1, r5
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	6054      	str	r4, [r2, #4]
 8005c92:	e7ca      	b.n	8005c2a <_free_r+0x26>
 8005c94:	b003      	add	sp, #12
 8005c96:	bd30      	pop	{r4, r5, pc}
 8005c98:	200002fc 	.word	0x200002fc

08005c9c <sbrk_aligned>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0e      	ldr	r6, [pc, #56]	; (8005cd8 <sbrk_aligned+0x3c>)
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6831      	ldr	r1, [r6, #0]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	b911      	cbnz	r1, 8005cae <sbrk_aligned+0x12>
 8005ca8:	f000 f88c 	bl	8005dc4 <_sbrk_r>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f887 	bl	8005dc4 <_sbrk_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d00a      	beq.n	8005cd0 <sbrk_aligned+0x34>
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d007      	beq.n	8005cd4 <sbrk_aligned+0x38>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 f87c 	bl	8005dc4 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d101      	bne.n	8005cd4 <sbrk_aligned+0x38>
 8005cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	20000300 	.word	0x20000300

08005cdc <_malloc_r>:
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	1ccd      	adds	r5, r1, #3
 8005ce2:	f025 0503 	bic.w	r5, r5, #3
 8005ce6:	3508      	adds	r5, #8
 8005ce8:	2d0c      	cmp	r5, #12
 8005cea:	bf38      	it	cc
 8005cec:	250c      	movcc	r5, #12
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	db01      	blt.n	8005cf8 <_malloc_r+0x1c>
 8005cf4:	42a9      	cmp	r1, r5
 8005cf6:	d905      	bls.n	8005d04 <_malloc_r+0x28>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	4630      	mov	r0, r6
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	4e2e      	ldr	r6, [pc, #184]	; (8005dc0 <_malloc_r+0xe4>)
 8005d06:	f000 f907 	bl	8005f18 <__malloc_lock>
 8005d0a:	6833      	ldr	r3, [r6, #0]
 8005d0c:	461c      	mov	r4, r3
 8005d0e:	bb34      	cbnz	r4, 8005d5e <_malloc_r+0x82>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4638      	mov	r0, r7
 8005d14:	f7ff ffc2 	bl	8005c9c <sbrk_aligned>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	d14d      	bne.n	8005dba <_malloc_r+0xde>
 8005d1e:	6834      	ldr	r4, [r6, #0]
 8005d20:	4626      	mov	r6, r4
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d140      	bne.n	8005da8 <_malloc_r+0xcc>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	eb04 0803 	add.w	r8, r4, r3
 8005d30:	f000 f848 	bl	8005dc4 <_sbrk_r>
 8005d34:	4580      	cmp	r8, r0
 8005d36:	d13a      	bne.n	8005dae <_malloc_r+0xd2>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	3503      	adds	r5, #3
 8005d3c:	1a6d      	subs	r5, r5, r1
 8005d3e:	f025 0503 	bic.w	r5, r5, #3
 8005d42:	3508      	adds	r5, #8
 8005d44:	2d0c      	cmp	r5, #12
 8005d46:	bf38      	it	cc
 8005d48:	250c      	movcc	r5, #12
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ffa5 	bl	8005c9c <sbrk_aligned>
 8005d52:	3001      	adds	r0, #1
 8005d54:	d02b      	beq.n	8005dae <_malloc_r+0xd2>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	442b      	add	r3, r5
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	e00e      	b.n	8005d7c <_malloc_r+0xa0>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	1b52      	subs	r2, r2, r5
 8005d62:	d41e      	bmi.n	8005da2 <_malloc_r+0xc6>
 8005d64:	2a0b      	cmp	r2, #11
 8005d66:	d916      	bls.n	8005d96 <_malloc_r+0xba>
 8005d68:	1961      	adds	r1, r4, r5
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	6025      	str	r5, [r4, #0]
 8005d6e:	bf18      	it	ne
 8005d70:	6059      	strne	r1, [r3, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	bf08      	it	eq
 8005d76:	6031      	streq	r1, [r6, #0]
 8005d78:	5162      	str	r2, [r4, r5]
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f104 060b 	add.w	r6, r4, #11
 8005d82:	f000 f8cf 	bl	8005f24 <__malloc_unlock>
 8005d86:	f026 0607 	bic.w	r6, r6, #7
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	1af2      	subs	r2, r6, r3
 8005d8e:	d0b6      	beq.n	8005cfe <_malloc_r+0x22>
 8005d90:	1b9b      	subs	r3, r3, r6
 8005d92:	50a3      	str	r3, [r4, r2]
 8005d94:	e7b3      	b.n	8005cfe <_malloc_r+0x22>
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	bf0c      	ite	eq
 8005d9c:	6032      	streq	r2, [r6, #0]
 8005d9e:	605a      	strne	r2, [r3, #4]
 8005da0:	e7ec      	b.n	8005d7c <_malloc_r+0xa0>
 8005da2:	4623      	mov	r3, r4
 8005da4:	6864      	ldr	r4, [r4, #4]
 8005da6:	e7b2      	b.n	8005d0e <_malloc_r+0x32>
 8005da8:	4634      	mov	r4, r6
 8005daa:	6876      	ldr	r6, [r6, #4]
 8005dac:	e7b9      	b.n	8005d22 <_malloc_r+0x46>
 8005dae:	230c      	movs	r3, #12
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4638      	mov	r0, r7
 8005db4:	f000 f8b6 	bl	8005f24 <__malloc_unlock>
 8005db8:	e7a1      	b.n	8005cfe <_malloc_r+0x22>
 8005dba:	6025      	str	r5, [r4, #0]
 8005dbc:	e7de      	b.n	8005d7c <_malloc_r+0xa0>
 8005dbe:	bf00      	nop
 8005dc0:	200002fc 	.word	0x200002fc

08005dc4 <_sbrk_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	; (8005de0 <_sbrk_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7ff fad8 	bl	8005384 <_sbrk>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_sbrk_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_sbrk_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000304 	.word	0x20000304

08005de4 <__sread>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	f000 f8a0 	bl	8005f30 <_read_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	bfab      	itete	ge
 8005df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005df6:	89a3      	ldrhlt	r3, [r4, #12]
 8005df8:	181b      	addge	r3, r3, r0
 8005dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dfe:	bfac      	ite	ge
 8005e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e02:	81a3      	strhlt	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__swrite>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	05db      	lsls	r3, r3, #23
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	d505      	bpl.n	8005e24 <__swrite+0x1e>
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f000 f868 	bl	8005ef4 <_lseek_r>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	4632      	mov	r2, r6
 8005e32:	463b      	mov	r3, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f000 b817 	b.w	8005e6c <_write_r>

08005e3e <__sseek>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 f855 	bl	8005ef4 <_lseek_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	bf15      	itete	ne
 8005e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e5a:	81a3      	strheq	r3, [r4, #12]
 8005e5c:	bf18      	it	ne
 8005e5e:	81a3      	strhne	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__sclose>:
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 b813 	b.w	8005e90 <_close_r>
	...

08005e6c <_write_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	; (8005e8c <_write_r+0x20>)
 8005e70:	4604      	mov	r4, r0
 8005e72:	4608      	mov	r0, r1
 8005e74:	4611      	mov	r1, r2
 8005e76:	2200      	movs	r2, #0
 8005e78:	602a      	str	r2, [r5, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f7fe fdd6 	bl	8004a2c <_write>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_write_r+0x1e>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_write_r+0x1e>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000304 	.word	0x20000304

08005e90 <_close_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_close_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7ff fa3d 	bl	800531a <_close>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_close_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_close_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000304 	.word	0x20000304

08005eb0 <_fstat_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	; (8005ed0 <_fstat_r+0x20>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f7ff fa38 	bl	8005332 <_fstat>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d102      	bne.n	8005ecc <_fstat_r+0x1c>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	b103      	cbz	r3, 8005ecc <_fstat_r+0x1c>
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000304 	.word	0x20000304

08005ed4 <_isatty_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	; (8005ef0 <_isatty_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7ff fa37 	bl	8005352 <_isatty>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_isatty_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_isatty_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000304 	.word	0x20000304

08005ef4 <_lseek_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d07      	ldr	r5, [pc, #28]	; (8005f14 <_lseek_r+0x20>)
 8005ef8:	4604      	mov	r4, r0
 8005efa:	4608      	mov	r0, r1
 8005efc:	4611      	mov	r1, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	602a      	str	r2, [r5, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7ff fa30 	bl	8005368 <_lseek>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_lseek_r+0x1e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_lseek_r+0x1e>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000304 	.word	0x20000304

08005f18 <__malloc_lock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_lock+0x8>)
 8005f1a:	f7ff be0b 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 8005f1e:	bf00      	nop
 8005f20:	200002f8 	.word	0x200002f8

08005f24 <__malloc_unlock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_unlock+0x8>)
 8005f26:	f7ff be06 	b.w	8005b36 <__retarget_lock_release_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	200002f8 	.word	0x200002f8

08005f30 <_read_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d07      	ldr	r5, [pc, #28]	; (8005f50 <_read_r+0x20>)
 8005f34:	4604      	mov	r4, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7ff f9ce 	bl	80052e0 <_read>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_read_r+0x1e>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_read_r+0x1e>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000304 	.word	0x20000304

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
